{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst {\n  validateDeployParameterForKIP17,\n  kip17JsonInterface,\n  kip17ByteCode,\n  determineSendParams,\n  formatParamForUint256,\n  interfaceIds\n} = require('./kctHelper');\n\nconst {\n  toBuffer,\n  isHexStrict,\n  toHex\n} = require('../../caver-utils/src');\n\nconst {\n  isAddress\n} = require('../../caver-utils/src');\n\nconst KIP13 = require('../src/kip13');\n\nclass KIP17 extends Contract {\n  /**\n   * deploy deploys a KIP-17 token contract to Klaytn network.\n   * `const deployedContract = await caver.kct.kip17.deploy({\n   *      name: 'TokenName',\n   *      symbol: 'TKN',\n   *  }, '0x{address in hex}')`\n   *\n   * @method deploy\n   * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n   * @param {Object|String} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\n   * @return {Object}\n   */\n  static deploy(tokenInfo, sendOptions) {\n    validateDeployParameterForKIP17(tokenInfo);\n    const {\n      name,\n      symbol\n    } = tokenInfo;\n    const kip17 = new KIP17(); // If sendOptions is string type, sendOptions means deployer's address\n\n    if (_.isString(sendOptions)) sendOptions = {\n      from: sendOptions,\n      gas: 6600000,\n      value: 0\n    };\n    sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000;\n    return kip17.deploy({\n      data: kip17ByteCode,\n      arguments: [name, symbol]\n    }).send(sendOptions);\n  }\n  /**\n   * detectInterface detects which interface the KIP-17 token contract supports.\n   *\n   * @method detectInterface\n   * @param {string} contractAddress The address of the KIP-17 token contract to detect.\n   * @return {object}\n   */\n\n\n  static detectInterface(contractAddress) {\n    const kip17 = new KIP17(contractAddress);\n    return kip17.detectInterface();\n  }\n  /**\n   * KIP17 class represents the KIP-17 token contract.\n   *\n   * @constructor\n   * @param {string} tokenAddress - The KIP-17 token contract address.\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n   */\n\n\n  constructor(tokenAddress, abi = kip17JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`);\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n\n  clone(tokenAddress = this.options.address) {\n    const cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n    cloned.setWallet(this._wallet);\n    return cloned;\n  }\n  /**\n   * detectInterface detects which interface the KIP-17 token contract supports.\n   *\n   * @method detectInterface\n   * @return {object}\n   */\n\n\n  async detectInterface() {\n    const detected = {\n      IKIP17: false,\n      IKIP17Metadata: false,\n      IKIP17Enumerable: false,\n      IKIP17Mintable: false,\n      IKIP17MetadataMintable: false,\n      IKIP17Burnable: false,\n      IKIP17Pausable: false\n    };\n    const notSupportedMsg = `This contract does not support KIP-13.`;\n    const contractAddress = this._address;\n\n    try {\n      const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress);\n      if (isSupported !== true) throw new Error(notSupportedMsg); // Since there is an extension that has the same interface id even though it is a different KCT,\n      // it must be checked first whether the contract is a KIP-17 contract.\n\n      detected.IKIP17 = await this.supportsInterface(interfaceIds.kip17.IKIP17);\n      if (detected.IKIP17 === false) return detected;\n      await Promise.all(Object.keys(interfaceIds.kip17).map(async interfaceName => {\n        if (interfaceIds.kip17[interfaceName] !== interfaceIds.kip17.IKIP17) detected[interfaceName] = await this.supportsInterface(interfaceIds.kip17[interfaceName]);\n      }));\n      return detected;\n    } catch (e) {\n      throw new Error(notSupportedMsg);\n    }\n  }\n  /**\n   * supportsInterface checks whether interface is supported or not.\n   *\n   * @method supportsInterface\n   * @param {string} interfaceId The interface id to check.\n   * @return {boolean}\n   */\n\n\n  async supportsInterface(interfaceId) {\n    const isSupported = await this.methods.supportsInterface(interfaceId).call();\n    return isSupported;\n  }\n  /**\n   * name returns the name of the token.\n   *\n   * @method name\n   * @return {String}\n   */\n\n\n  async name() {\n    const name = await this.methods.name().call();\n    return name;\n  }\n  /**\n   * symbol returns the symbol of the token.\n   *\n   * @method symbol\n   * @return {String}\n   */\n\n\n  async symbol() {\n    const symbol = await this.methods.symbol().call();\n    return symbol;\n  }\n  /**\n   * tokenURI returns the uri of the token.\n   *\n   * @method tokenURI\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {String}\n   */\n\n\n  async tokenURI(tokenId) {\n    const tokenURI = await this.methods.tokenURI(formatParamForUint256(tokenId)).call();\n    return tokenURI;\n  }\n  /**\n   * totalSupply returns the total amount of tokens stored by the contract.\n   *\n   * @method totalSupply\n   * @return {BigNumber}\n   */\n\n\n  async totalSupply() {\n    const totalSupply = await this.methods.totalSupply().call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * tokenOfOwnerByIndex returns the token id at a given index of the tokens list of the requested owner.\n   *\n   * @method tokenOfOwnerByIndex\n   * @param {String} owner The address of the account whose token you want to query.\n   * @param {BigNumber|String|Number} index The index of the token to be searched among the tokens owned by a owner account.\n   * @return {BigNumber}\n   */\n\n\n  async tokenOfOwnerByIndex(owner, index) {\n    const token = await this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call();\n    return new BigNumber(token);\n  }\n  /**\n   * tokenByIndex returns the token id at a given index of all the tokens in this contract.\n   *\n   * @method tokenByIndex\n   * @param {BigNumber|String|Number} index The index of the token to query.\n   * @return {BigNumber}\n   */\n\n\n  async tokenByIndex(index) {\n    const token = await this.methods.tokenByIndex(formatParamForUint256(index)).call();\n    return new BigNumber(token);\n  }\n  /**\n   * balanceOf returns the balance of the specified address.\n   * The balance of an account in KIP-17 means that the total number of NFT(Non Fungible Token) owned by the account.\n   *\n   * @method balanceOf\n   * @param {String} account The address of the account whose number of tokens you want to see.\n   * @return {BigNumber}\n   */\n\n\n  async balanceOf(account) {\n    const balance = await this.methods.balanceOf(account).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * ownerOf returns the owner of the specified token id.\n   *\n   * @method ownerOf\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {BigNumber}\n   */\n\n\n  async ownerOf(tokenId) {\n    const owner = await this.methods.ownerOf(formatParamForUint256(tokenId)).call();\n    return owner;\n  }\n  /**\n   * getApproved returns the approved address for a token id, or zero if no address set.\n   *\n   * @method getApproved\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {Boolean}\n   */\n\n\n  async getApproved(tokenId) {\n    const isApproved = await this.methods.getApproved(formatParamForUint256(tokenId)).call();\n    return isApproved;\n  }\n  /**\n   * isApprovedForAll returns true if an operator is approved by a given owner.\n   *\n   * @method isApprovedForAll\n   * @param {String} owner The id of the token.\n   * @param {String} operator The id of the token.\n   * @return {Boolean}\n   */\n\n\n  async isApprovedForAll(owner, operator) {\n    const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call();\n    return isApprovedForAll;\n  }\n  /**\n   * isMinter returns whether the account is minter or not.\n   *\n   * @method isMinter\n   * @param {String} account The address of the account you want to check minter or not.\n   * @return {Boolean}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * paused returns whether or not the token contract's transaction is paused.\n   *\n   * @method paused\n   * @return {Boolean}\n   */\n\n\n  async paused() {\n    const isPaused = await this.methods.paused().call();\n    return isPaused;\n  }\n  /**\n   * isPauser returns whether the account is pauser or not.\n   *\n   * @method isPauser\n   * @param {String} account The address of the account you want to check pauser or not.\n   * @return {Boolean}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * approve sets approval with another address to transfer the given token id.\n   *\n   * @method approve\n   * @param {String} to The address of the account to use on behalf of owner for the tokenId.\n   * @param {BigNumber|String|Number} tokenId The id of token the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async approve(to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.approve(to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * setApprovalForAll sets or unsets the approval of a given operator.\n   * An operator is allowed to transfer all tokens of the sender on their behalf.\n   *\n   * @method setApprovalForAll\n   * @param {String} to The address of an account to allow/forbid for transfer of all tokens owned by the owner on behalf of the owner.\n   * @param {Boolean} approved Whether to allow sending tokens on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async setApprovalForAll(to, approved, sendParam = {}) {\n    const executableObj = this.methods.setApprovalForAll(to, approved);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * transferFrom transfers the ownership of a given token id to another address.\n   *\n   * @method transferFrom\n   * @param {String} from The address of the owner or approved of the given token.\n   * @param {String} to The address of the account to receive the token.\n   * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async transferFrom(from, to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * safeTransferFrom safely transfers the ownership of a given token id to another address.\n   *\n   * @method safeTransferFrom\n   * @param {String} from The address of the owner or approved of the given token.\n   * @param {String} to The address of the account to receive the token.\n   * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`);\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data) : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method addMinter\n   * @param {String} account The address of account to add as minter.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async addMinter(account, sendParam = {}) {\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renounceMinter renounces privilege of MinterRole.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @method renounceMinter\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async renounceMinter(sendParam = {}) {\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * mint creates token and assigns them to account, increasing the total supply.\n   *\n   * @method mint\n   * @param {String} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} tokenId The id of token to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async mint(to, tokenId, sendParam = {}) {\n    const executableObj = this.methods.mint(to, formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * mintWithTokenURI creates token with uri and assigns them to account, increasing the total supply.\n   *\n   * @method mintWithTokenURI\n   * @param {String} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} tokenId The id of token to mint.\n   * @param {String} tokenURI The uri of token to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\n    const executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * burn destroys a specific KIP-17 token.\n   *\n   * @method burn\n   * @param {BigNumber|String|Number} tokenId The id of token to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async burn(tokenId, sendParam = {}) {\n    const executableObj = this.methods.burn(formatParamForUint256(tokenId));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * pause triggers stopped state that stops sending tokens in emergency situation.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @method pause\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async pause(sendParam = {}) {\n    const executableObj = this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * unpause sets amount as the allowance of spender over the caller’s tokens.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @method unpause\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async unpause(sendParam = {}) {\n    const executableObj = this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @method addPauser\n   * @param {String} account The address of account to add as pauser.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async addPauser(account, sendParam = {}) {\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renouncePauser renounces privilege of PauserRole.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @method renouncePauser\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  async renouncePauser(sendParam = {}) {\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n\n}\n\nKIP17.byteCode = kip17ByteCode;\nmodule.exports = KIP17;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-kct/src/kip17.js"],"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP17","kip17JsonInterface","kip17ByteCode","determineSendParams","formatParamForUint256","interfaceIds","toBuffer","isHexStrict","toHex","isAddress","KIP13","KIP17","deploy","tokenInfo","sendOptions","name","symbol","kip17","isString","from","gas","value","undefined","data","arguments","send","detectInterface","contractAddress","constructor","tokenAddress","abi","Error","clone","options","address","cloned","jsonInterface","setWallet","_wallet","detected","IKIP17","IKIP17Metadata","IKIP17Enumerable","IKIP17Mintable","IKIP17MetadataMintable","IKIP17Burnable","IKIP17Pausable","notSupportedMsg","_address","isSupported","isImplementedKIP13Interface","supportsInterface","Promise","all","Object","keys","map","interfaceName","e","interfaceId","methods","call","tokenURI","tokenId","totalSupply","tokenOfOwnerByIndex","owner","index","token","tokenByIndex","balanceOf","account","balance","ownerOf","getApproved","isApproved","isApprovedForAll","operator","isMinter","paused","isPaused","isPauser","approve","to","sendParam","executableObj","setApprovalForAll","approved","transferFrom","safeTransferFrom","isObject","length","isBuffer","addMinter","renounceMinter","mint","mintWithTokenURI","burn","pause","unpause","addPauser","renouncePauser","byteCode","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BigNumber = require('bignumber.js')\n\nconst Contract = require('../../caver-contract')\nconst {\n    validateDeployParameterForKIP17,\n    kip17JsonInterface,\n    kip17ByteCode,\n    determineSendParams,\n    formatParamForUint256,\n    interfaceIds,\n} = require('./kctHelper')\nconst { toBuffer, isHexStrict, toHex } = require('../../caver-utils/src')\nconst { isAddress } = require('../../caver-utils/src')\nconst KIP13 = require('../src/kip13')\n\nclass KIP17 extends Contract {\n    /**\n     * deploy deploys a KIP-17 token contract to Klaytn network.\n     * `const deployedContract = await caver.kct.kip17.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n     * @param {Object|String} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\n     * @return {Object}\n     */\n    static deploy(tokenInfo, sendOptions) {\n        validateDeployParameterForKIP17(tokenInfo)\n\n        const { name, symbol } = tokenInfo\n        const kip17 = new KIP17()\n\n        // If sendOptions is string type, sendOptions means deployer's address\n        if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 6600000, value: 0 }\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000\n\n        return kip17\n            .deploy({\n                data: kip17ByteCode,\n                arguments: [name, symbol],\n            })\n            .send(sendOptions)\n    }\n\n    /**\n     * detectInterface detects which interface the KIP-17 token contract supports.\n     *\n     * @method detectInterface\n     * @param {string} contractAddress The address of the KIP-17 token contract to detect.\n     * @return {object}\n     */\n    static detectInterface(contractAddress) {\n        const kip17 = new KIP17(contractAddress)\n        return kip17.detectInterface()\n    }\n\n    /**\n     * KIP17 class represents the KIP-17 token contract.\n     *\n     * @constructor\n     * @param {string} tokenAddress - The KIP-17 token contract address.\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n     */\n    constructor(tokenAddress, abi = kip17JsonInterface) {\n        if (tokenAddress) {\n            if (_.isString(tokenAddress)) {\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\n            } else {\n                abi = tokenAddress\n                tokenAddress = undefined\n            }\n        }\n        super(abi, tokenAddress)\n    }\n\n    clone(tokenAddress = this.options.address) {\n        const cloned = new this.constructor(tokenAddress, this.options.jsonInterface)\n        cloned.setWallet(this._wallet)\n        return cloned\n    }\n\n    /**\n     * detectInterface detects which interface the KIP-17 token contract supports.\n     *\n     * @method detectInterface\n     * @return {object}\n     */\n    async detectInterface() {\n        const detected = {\n            IKIP17: false,\n            IKIP17Metadata: false,\n            IKIP17Enumerable: false,\n            IKIP17Mintable: false,\n            IKIP17MetadataMintable: false,\n            IKIP17Burnable: false,\n            IKIP17Pausable: false,\n        }\n\n        const notSupportedMsg = `This contract does not support KIP-13.`\n        const contractAddress = this._address\n\n        try {\n            const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress)\n            if (isSupported !== true) throw new Error(notSupportedMsg)\n\n            // Since there is an extension that has the same interface id even though it is a different KCT,\n            // it must be checked first whether the contract is a KIP-17 contract.\n            detected.IKIP17 = await this.supportsInterface(interfaceIds.kip17.IKIP17)\n            if (detected.IKIP17 === false) return detected\n\n            await Promise.all(\n                Object.keys(interfaceIds.kip17).map(async interfaceName => {\n                    if (interfaceIds.kip17[interfaceName] !== interfaceIds.kip17.IKIP17)\n                        detected[interfaceName] = await this.supportsInterface(interfaceIds.kip17[interfaceName])\n                })\n            )\n            return detected\n        } catch (e) {\n            throw new Error(notSupportedMsg)\n        }\n    }\n\n    /**\n     * supportsInterface checks whether interface is supported or not.\n     *\n     * @method supportsInterface\n     * @param {string} interfaceId The interface id to check.\n     * @return {boolean}\n     */\n    async supportsInterface(interfaceId) {\n        const isSupported = await this.methods.supportsInterface(interfaceId).call()\n        return isSupported\n    }\n\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n    async name() {\n        const name = await this.methods.name().call()\n        return name\n    }\n\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n    async symbol() {\n        const symbol = await this.methods.symbol().call()\n        return symbol\n    }\n\n    /**\n     * tokenURI returns the uri of the token.\n     *\n     * @method tokenURI\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {String}\n     */\n    async tokenURI(tokenId) {\n        const tokenURI = await this.methods.tokenURI(formatParamForUint256(tokenId)).call()\n        return tokenURI\n    }\n\n    /**\n     * totalSupply returns the total amount of tokens stored by the contract.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n    async totalSupply() {\n        const totalSupply = await this.methods.totalSupply().call()\n        return new BigNumber(totalSupply)\n    }\n\n    /**\n     * tokenOfOwnerByIndex returns the token id at a given index of the tokens list of the requested owner.\n     *\n     * @method tokenOfOwnerByIndex\n     * @param {String} owner The address of the account whose token you want to query.\n     * @param {BigNumber|String|Number} index The index of the token to be searched among the tokens owned by a owner account.\n     * @return {BigNumber}\n     */\n    async tokenOfOwnerByIndex(owner, index) {\n        const token = await this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call()\n        return new BigNumber(token)\n    }\n\n    /**\n     * tokenByIndex returns the token id at a given index of all the tokens in this contract.\n     *\n     * @method tokenByIndex\n     * @param {BigNumber|String|Number} index The index of the token to query.\n     * @return {BigNumber}\n     */\n    async tokenByIndex(index) {\n        const token = await this.methods.tokenByIndex(formatParamForUint256(index)).call()\n        return new BigNumber(token)\n    }\n\n    /**\n     * balanceOf returns the balance of the specified address.\n     * The balance of an account in KIP-17 means that the total number of NFT(Non Fungible Token) owned by the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account whose number of tokens you want to see.\n     * @return {BigNumber}\n     */\n    async balanceOf(account) {\n        const balance = await this.methods.balanceOf(account).call()\n        return new BigNumber(balance)\n    }\n\n    /**\n     * ownerOf returns the owner of the specified token id.\n     *\n     * @method ownerOf\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {BigNumber}\n     */\n    async ownerOf(tokenId) {\n        const owner = await this.methods.ownerOf(formatParamForUint256(tokenId)).call()\n        return owner\n    }\n\n    /**\n     * getApproved returns the approved address for a token id, or zero if no address set.\n     *\n     * @method getApproved\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {Boolean}\n     */\n    async getApproved(tokenId) {\n        const isApproved = await this.methods.getApproved(formatParamForUint256(tokenId)).call()\n        return isApproved\n    }\n\n    /**\n     * isApprovedForAll returns true if an operator is approved by a given owner.\n     *\n     * @method isApprovedForAll\n     * @param {String} owner The id of the token.\n     * @param {String} operator The id of the token.\n     * @return {Boolean}\n     */\n    async isApprovedForAll(owner, operator) {\n        const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call()\n        return isApprovedForAll\n    }\n\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n    async isMinter(account) {\n        const isMinter = await this.methods.isMinter(account).call()\n        return isMinter\n    }\n\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n    async paused() {\n        const isPaused = await this.methods.paused().call()\n        return isPaused\n    }\n\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n    async isPauser(account) {\n        const isPauser = await this.methods.isPauser(account).call()\n        return isPauser\n    }\n\n    /**\n     * approve sets approval with another address to transfer the given token id.\n     *\n     * @method approve\n     * @param {String} to The address of the account to use on behalf of owner for the tokenId.\n     * @param {BigNumber|String|Number} tokenId The id of token the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async approve(to, tokenId, sendParam = {}) {\n        const executableObj = this.methods.approve(to, formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * setApprovalForAll sets or unsets the approval of a given operator.\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     *\n     * @method setApprovalForAll\n     * @param {String} to The address of an account to allow/forbid for transfer of all tokens owned by the owner on behalf of the owner.\n     * @param {Boolean} approved Whether to allow sending tokens on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async setApprovalForAll(to, approved, sendParam = {}) {\n        const executableObj = this.methods.setApprovalForAll(to, approved)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transferFrom transfers the ownership of a given token id to another address.\n     *\n     * @method transferFrom\n     * @param {String} from The address of the owner or approved of the given token.\n     * @param {String} to The address of the account to receive the token.\n     * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async transferFrom(from, to, tokenId, sendParam = {}) {\n        const executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransferFrom safely transfers the ownership of a given token id to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} from The address of the owner or approved of the given token.\n     * @param {String} to The address of the account to receive the token.\n     * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data)\n            : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async addMinter(account, sendParam = {}) {\n        const executableObj = this.methods.addMinter(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async renounceMinter(sendParam = {}) {\n        const executableObj = this.methods.renounceMinter()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mint creates token and assigns them to account, increasing the total supply.\n     *\n     * @method mint\n     * @param {String} to The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} tokenId The id of token to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async mint(to, tokenId, sendParam = {}) {\n        const executableObj = this.methods.mint(to, formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mintWithTokenURI creates token with uri and assigns them to account, increasing the total supply.\n     *\n     * @method mintWithTokenURI\n     * @param {String} to The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} tokenId The id of token to mint.\n     * @param {String} tokenURI The uri of token to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\n        const executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burn destroys a specific KIP-17 token.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} tokenId The id of token to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async burn(tokenId, sendParam = {}) {\n        const executableObj = this.methods.burn(formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async pause(sendParam = {}) {\n        const executableObj = this.methods.pause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async unpause(sendParam = {}) {\n        const executableObj = this.methods.unpause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async addPauser(account, sendParam = {}) {\n        const executableObj = this.methods.addPauser(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async renouncePauser(sendParam = {}) {\n        const executableObj = this.methods.renouncePauser()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n}\n\nKIP17.byteCode = kip17ByteCode\nmodule.exports = KIP17\n"]},"metadata":{},"sourceType":"script"}