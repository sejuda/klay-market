{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeChainDataAnchoring)) throw new Error(`Cannot decode to ChainDataAnchoring. The prefix must be ${TX_TYPE_TAG.TxTypeChainDataAnchoring}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, input, signatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    input,\n    signatures\n  };\n}\n/**\n * Represents a chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypechaindataanchoring to see more detail.\n * @class\n */\n\n\nclass ChainDataAnchoring extends AbstractTransaction {\n  /**\n   * Creates a chain data anchoring transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a ChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures` and `chainId`.\n   * @return {ChainDataAnchoring}\n   */\n  static create(createTxObj) {\n    return new ChainDataAnchoring(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a ChainDataAnchoring transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded chain data anchoring transaction.\n   * @return {ChainDataAnchoring}\n   */\n\n\n  static decode(rlpEncoded) {\n    return new ChainDataAnchoring(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a chain data anchoring transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a ChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeChainDataAnchoring, createTxObj);\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.toHex(input);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeChainDataAnchoring + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, signatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeChainDataAnchoring, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input]);\n  }\n\n}\n\nmodule.exports = ChainDataAnchoring;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/chainDataAnchoring/chainDataAnchoring.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeChainDataAnchoring","Error","typeDettached","slice","nonce","gasPrice","gas","from","input","signatures","decode","trimLeadingZero","ChainDataAnchoring","create","createTxObj","constructor","isString","data","_input","isHex","toHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeChainDataAnchoring))\n        throw new Error(`Cannot decode to ChainDataAnchoring. The prefix must be ${TX_TYPE_TAG.TxTypeChainDataAnchoring}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, input, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        input,\n        signatures,\n    }\n}\n\n/**\n * Represents a chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypechaindataanchoring to see more detail.\n * @class\n */\nclass ChainDataAnchoring extends AbstractTransaction {\n    /**\n     * Creates a chain data anchoring transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a ChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures` and `chainId`.\n     * @return {ChainDataAnchoring}\n     */\n    static create(createTxObj) {\n        return new ChainDataAnchoring(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a ChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded chain data anchoring transaction.\n     * @return {ChainDataAnchoring}\n     */\n    static decode(rlpEncoded) {\n        return new ChainDataAnchoring(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a ChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeChainDataAnchoring, createTxObj)\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.toHex(input)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeChainDataAnchoring +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.input,\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeChainDataAnchoring,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.input,\n        ])\n    }\n}\n\nmodule.exports = ChainDataAnchoring\n"]},"metadata":{},"sourceType":"script"}