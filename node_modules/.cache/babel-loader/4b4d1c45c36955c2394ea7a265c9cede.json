{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-ipc/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst oboe = require('oboe');\n\nconst errors = require('../../../caver-core-helpers').errors;\n\nconst IpcProvider = function IpcProvider(path, net) {\n  const _this = this;\n\n  this.responseCallbacks = {};\n  this.notificationCallbacks = [];\n  this.path = path;\n  this.connection = net.connect({\n    path: this.path\n  });\n  this.addDefaultEvents(); // LISTEN FOR CONNECTION RESPONSES\n\n  const callback = function (result) {\n    let id = null; // get the id which matches the returned id\n\n    if (_.isArray(result)) {\n      result.forEach(function (load) {\n        if (_this.responseCallbacks[load.id]) {\n          id = load.id;\n        }\n      });\n    } else {\n      id = result.id;\n    } // notification\n\n\n    if (!id && result.method.indexOf('_subscription') !== -1) {\n      _this.notificationCallbacks.forEach(function (cb) {\n        if (_.isFunction(cb)) {\n          cb(result);\n        }\n      }); // fire the callback\n\n    } else if (_this.responseCallbacks[id]) {\n      _this.responseCallbacks[id](null, result);\n\n      delete _this.responseCallbacks[id];\n    }\n  }; // use oboe.js for Sockets\n\n\n  if (net.constructor.name === 'Socket') {\n    oboe(this.connection).done(callback);\n  } else {\n    this.connection.on('data', function (data) {\n      _this._parseResponse(data.toString()).forEach(callback);\n    });\n  }\n};\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/\n\n\nIpcProvider.prototype.addDefaultEvents = function () {\n  const _this = this;\n\n  this.connection.on('connect', function () {});\n  this.connection.on('error', function () {\n    _this._timeout();\n  });\n  this.connection.on('end', function () {\n    _this._timeout();\n  });\n  this.connection.on('timeout', function () {\n    _this._timeout();\n  });\n};\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */\n\n\nIpcProvider.prototype._parseResponse = function (data) {\n  const _this = this;\n\n  const returnValues = []; // DE-CHUNKER\n\n  const dechunkedData = data.replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n  .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n  .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n  .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n  .split('|--|');\n  dechunkedData.forEach(function (d) {\n    // prepend the last chunk\n    if (_this.lastChunk) {\n      d = _this.lastChunk + d;\n    }\n\n    let result = null;\n\n    try {\n      result = JSON.parse(d);\n    } catch (e) {\n      _this.lastChunk = d; // start timeout to cancel all requests\n\n      clearTimeout(_this.lastChunkTimeout);\n      _this.lastChunkTimeout = setTimeout(function () {\n        _this._timeout();\n\n        throw errors.InvalidResponse(d);\n      }, 1000 * 15);\n      return;\n    } // cancel timeout and set chunk to null\n\n\n    clearTimeout(_this.lastChunkTimeout);\n    _this.lastChunk = null;\n\n    if (result) {\n      returnValues.push(result);\n    }\n  });\n  return returnValues;\n};\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\n\n\nIpcProvider.prototype._addResponseCallback = function (payload, callback) {\n  const id = payload.id || payload[0].id;\n  const method = payload.method || payload[0].method;\n  this.responseCallbacks[id] = callback;\n  this.responseCallbacks[id].method = method;\n};\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\n\n\nIpcProvider.prototype._timeout = function () {\n  for (const key in this.responseCallbacks) {\n    if (Object.prototype.hasOwnProperty.call(this.responseCallbacks, key)) {\n      this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n      delete this.responseCallbacks[key];\n    }\n  }\n};\n/**\n Try to reconnect\n\n @method reconnect\n */\n\n\nIpcProvider.prototype.reconnect = function () {\n  this.connection.connect({\n    path: this.path\n  });\n};\n\nIpcProvider.prototype.send = function (payload, callback) {\n  // try reconnect, when connection is gone\n  if (!this.connection.writable) {\n    this.connection.connect({\n      path: this.path\n    });\n  }\n\n  this.connection.write(JSON.stringify(payload));\n\n  this._addResponseCallback(payload, callback);\n};\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\n\n\nIpcProvider.prototype.on = function (type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('The second parameter callback must be a function.');\n  }\n\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.push(callback);\n      break;\n    // adds error, end, timeout, connect\n\n    default:\n      this.connection.on(type, callback);\n      break;\n  }\n};\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\n\n\nIpcProvider.prototype.once = function (type, callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('The second parameter callback must be a function.');\n  }\n\n  this.connection.once(type, callback);\n};\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\n\n\nIpcProvider.prototype.removeListener = function (type, callback) {\n  const _this = this;\n\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks.forEach(function (cb, index) {\n        if (cb === callback) {\n          _this.notificationCallbacks.splice(index, 1);\n        }\n      });\n      break;\n\n    default:\n      this.connection.removeListener(type, callback);\n      break;\n  }\n};\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/\n\n\nIpcProvider.prototype.removeAllListeners = function (type) {\n  switch (type) {\n    case 'data':\n      this.notificationCallbacks = [];\n      break;\n\n    default:\n      this.connection.removeAllListeners(type);\n      break;\n  }\n};\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/\n\n\nIpcProvider.prototype.reset = function () {\n  this._timeout();\n\n  this.notificationCallbacks = [];\n  this.connection.removeAllListeners('error');\n  this.connection.removeAllListeners('end');\n  this.connection.removeAllListeners('timeout');\n  this.addDefaultEvents();\n};\n\nIpcProvider.prototype.supportsSubscriptions = function () {\n  return true;\n};\n\nmodule.exports = IpcProvider;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-core-requestmanager/caver-providers-ipc/src/index.js"],"names":["_","require","oboe","errors","IpcProvider","path","net","_this","responseCallbacks","notificationCallbacks","connection","connect","addDefaultEvents","callback","result","id","isArray","forEach","load","method","indexOf","cb","isFunction","constructor","name","done","on","data","_parseResponse","toString","prototype","_timeout","returnValues","dechunkedData","replace","split","d","lastChunk","JSON","parse","e","clearTimeout","lastChunkTimeout","setTimeout","InvalidResponse","push","_addResponseCallback","payload","key","Object","hasOwnProperty","call","InvalidConnection","reconnect","send","writable","write","stringify","type","Error","once","removeListener","index","splice","removeAllListeners","reset","supportsSubscriptions","module","exports"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-ipc/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/** @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nconst _ = require('lodash')\nconst oboe = require('oboe')\nconst errors = require('../../../caver-core-helpers').errors\n\nconst IpcProvider = function IpcProvider(path, net) {\n    const _this = this\n    this.responseCallbacks = {}\n    this.notificationCallbacks = []\n    this.path = path\n\n    this.connection = net.connect({ path: this.path })\n\n    this.addDefaultEvents()\n\n    // LISTEN FOR CONNECTION RESPONSES\n    const callback = function(result) {\n        let id = null\n\n        // get the id which matches the returned id\n        if (_.isArray(result)) {\n            result.forEach(function(load) {\n                if (_this.responseCallbacks[load.id]) {\n                    id = load.id\n                }\n            })\n        } else {\n            id = result.id\n        }\n\n        // notification\n        if (!id && result.method.indexOf('_subscription') !== -1) {\n            _this.notificationCallbacks.forEach(function(cb) {\n                if (_.isFunction(cb)) {\n                    cb(result)\n                }\n            })\n\n            // fire the callback\n        } else if (_this.responseCallbacks[id]) {\n            _this.responseCallbacks[id](null, result)\n            delete _this.responseCallbacks[id]\n        }\n    }\n\n    // use oboe.js for Sockets\n    if (net.constructor.name === 'Socket') {\n        oboe(this.connection).done(callback)\n    } else {\n        this.connection.on('data', function(data) {\n            _this._parseResponse(data.toString()).forEach(callback)\n        })\n    }\n}\n\n/**\nWill add the error and end event to timeout existing calls\n\n@method addDefaultEvents\n*/\nIpcProvider.prototype.addDefaultEvents = function() {\n    const _this = this\n\n    this.connection.on('connect', function() {})\n\n    this.connection.on('error', function() {\n        _this._timeout()\n    })\n\n    this.connection.on('end', function() {\n        _this._timeout()\n    })\n\n    this.connection.on('timeout', function() {\n        _this._timeout()\n    })\n}\n\n/**\n Will parse the response and make an array out of it.\n\n NOTE, this exists for backwards compatibility reasons.\n\n @method _parseResponse\n @param {String} data\n */\nIpcProvider.prototype._parseResponse = function(data) {\n    const _this = this\n    const returnValues = []\n\n    // DE-CHUNKER\n    const dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n        .split('|--|')\n\n    dechunkedData.forEach(function(d) {\n        // prepend the last chunk\n        if (_this.lastChunk) {\n            d = _this.lastChunk + d\n        }\n\n        let result = null\n\n        try {\n            result = JSON.parse(d)\n        } catch (e) {\n            _this.lastChunk = d\n\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout)\n            _this.lastChunkTimeout = setTimeout(function() {\n                _this._timeout()\n                throw errors.InvalidResponse(d)\n            }, 1000 * 15)\n\n            return\n        }\n\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout)\n        _this.lastChunk = null\n\n        if (result) {\n            returnValues.push(result)\n        }\n    })\n\n    return returnValues\n}\n\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {\n    const id = payload.id || payload[0].id\n    const method = payload.method || payload[0].method\n\n    this.responseCallbacks[id] = callback\n    this.responseCallbacks[id].method = method\n}\n\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function() {\n    for (const key in this.responseCallbacks) {\n        if (Object.prototype.hasOwnProperty.call(this.responseCallbacks, key)) {\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'))\n            delete this.responseCallbacks[key]\n        }\n    }\n}\n\n/**\n Try to reconnect\n\n @method reconnect\n */\nIpcProvider.prototype.reconnect = function() {\n    this.connection.connect({ path: this.path })\n}\n\nIpcProvider.prototype.send = function(payload, callback) {\n    // try reconnect, when connection is gone\n    if (!this.connection.writable) {\n        this.connection.connect({ path: this.path })\n    }\n\n    this.connection.write(JSON.stringify(payload))\n    this._addResponseCallback(payload, callback)\n}\n\n/**\nSubscribes to provider events.provider\n\n@method on\n@param {String} type    'notification', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.on = function(type, callback) {\n    if (typeof callback !== 'function') {\n        throw new Error('The second parameter callback must be a function.')\n    }\n\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks.push(callback)\n            break\n\n        // adds error, end, timeout, connect\n        default:\n            this.connection.on(type, callback)\n            break\n    }\n}\n\n/**\n Subscribes to provider events.provider\n\n @method on\n @param {String} type    'connect', 'error', 'end' or 'data'\n @param {Function} callback   the callback to call\n */\nIpcProvider.prototype.once = function(type, callback) {\n    if (typeof callback !== 'function') {\n        throw new Error('The second parameter callback must be a function.')\n    }\n\n    this.connection.once(type, callback)\n}\n\n/**\nRemoves event listener\n\n@method removeListener\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n@param {Function} callback   the callback to call\n*/\nIpcProvider.prototype.removeListener = function(type, callback) {\n    const _this = this\n\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks.forEach(function(cb, index) {\n                if (cb === callback) {\n                    _this.notificationCallbacks.splice(index, 1)\n                }\n            })\n            break\n\n        default:\n            this.connection.removeListener(type, callback)\n            break\n    }\n}\n\n/**\nRemoves all event listeners\n\n@method removeAllListeners\n@param {String} type    'data', 'connect', 'error', 'end' or 'data'\n*/\nIpcProvider.prototype.removeAllListeners = function(type) {\n    switch (type) {\n        case 'data':\n            this.notificationCallbacks = []\n            break\n\n        default:\n            this.connection.removeAllListeners(type)\n            break\n    }\n}\n\n/**\nResets the providers, clears all callbacks\n\n@method reset\n*/\nIpcProvider.prototype.reset = function() {\n    this._timeout()\n    this.notificationCallbacks = []\n\n    this.connection.removeAllListeners('error')\n    this.connection.removeAllListeners('end')\n    this.connection.removeAllListeners('timeout')\n\n    this.addDefaultEvents()\n}\n\nIpcProvider.prototype.supportsSubscriptions = function() {\n    return true\n}\n\nmodule.exports = IpcProvider\n"]},"metadata":{},"sourceType":"script"}