{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-requestmanager/src/batch.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\nconst Jsonrpc = require('./jsonrpc');\n\nconst errors = require('../../caver-core-helpers').errors;\n\nconst Batch = function (requestManager) {\n  this.requestManager = requestManager;\n  this.requests = [];\n};\n\nBatch.prototype.add = function (request) {\n  this.requests.push(request);\n};\n\nBatch.prototype.execute = function () {\n  const requests = this.requests;\n  this.requestManager.sendBatch(requests, function (err, results) {\n    results = results || [];\n    requests.map(function (request, index) {\n      return results[index] || {};\n    }).forEach(function (result, index) {\n      /**\n       * if callback is defined in requests[index]\n       * 1) Check result.error - if existed throw ErrorResponse.\n       * 2) Check result is valid json response object - if invalid throw InvalidResponse.\n       * 3) After passing 1) 2), if there is format method in requests[index] do formatting, and then callback.\n       */\n      if (requests[index].callback) {\n        if (result && result.error) {\n          return requests[index].callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n          return requests[index].callback(errors.InvalidResponse(result));\n        }\n\n        requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);\n      }\n    });\n  });\n};\n\nmodule.exports = Batch;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-core-requestmanager/src/batch.js"],"names":["Jsonrpc","require","errors","Batch","requestManager","requests","prototype","add","request","push","execute","sendBatch","err","results","map","index","forEach","result","callback","error","ErrorResponse","isValidResponse","InvalidResponse","format","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,0BAAD,CAAP,CAAoCC,MAAnD;;AAEA,MAAMC,KAAK,GAAG,UAASC,cAAT,EAAyB;AACnC,OAAKA,cAAL,GAAsBA,cAAtB;AACA,OAAKC,QAAL,GAAgB,EAAhB;AACH,CAHD;;AAKAF,KAAK,CAACG,SAAN,CAAgBC,GAAhB,GAAsB,UAASC,OAAT,EAAkB;AACpC,OAAKH,QAAL,CAAcI,IAAd,CAAmBD,OAAnB;AACH,CAFD;;AAIAL,KAAK,CAACG,SAAN,CAAgBI,OAAhB,GAA0B,YAAW;AACjC,QAAML,QAAQ,GAAG,KAAKA,QAAtB;AACA,OAAKD,cAAL,CAAoBO,SAApB,CAA8BN,QAA9B,EAAwC,UAASO,GAAT,EAAcC,OAAd,EAAuB;AAC3DA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEAR,IAAAA,QAAQ,CACHS,GADL,CACS,UAASN,OAAT,EAAkBO,KAAlB,EAAyB;AAC1B,aAAOF,OAAO,CAACE,KAAD,CAAP,IAAkB,EAAzB;AACH,KAHL,EAIKC,OAJL,CAIa,UAASC,MAAT,EAAiBF,KAAjB,EAAwB;AAC7B;AAChB;AACA;AACA;AACA;AACA;AACgB,UAAIV,QAAQ,CAACU,KAAD,CAAR,CAAgBG,QAApB,EAA8B;AAC1B,YAAID,MAAM,IAAIA,MAAM,CAACE,KAArB,EAA4B;AACxB,iBAAOd,QAAQ,CAACU,KAAD,CAAR,CAAgBG,QAAhB,CAAyBhB,MAAM,CAACkB,aAAP,CAAqBH,MAArB,CAAzB,CAAP;AACH;;AAED,YAAI,CAACjB,OAAO,CAACqB,eAAR,CAAwBJ,MAAxB,CAAL,EAAsC;AAClC,iBAAOZ,QAAQ,CAACU,KAAD,CAAR,CAAgBG,QAAhB,CAAyBhB,MAAM,CAACoB,eAAP,CAAuBL,MAAvB,CAAzB,CAAP;AACH;;AAEDZ,QAAAA,QAAQ,CAACU,KAAD,CAAR,CAAgBG,QAAhB,CAAyB,IAAzB,EAA+Bb,QAAQ,CAACU,KAAD,CAAR,CAAgBQ,MAAhB,GAAyBlB,QAAQ,CAACU,KAAD,CAAR,CAAgBQ,MAAhB,CAAuBN,MAAM,CAACA,MAA9B,CAAzB,GAAiEA,MAAM,CAACA,MAAvG;AACH;AACJ,KAtBL;AAuBH,GA1BD;AA2BH,CA7BD;;AA+BAO,MAAM,CAACC,OAAP,GAAiBtB,KAAjB","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-requestmanager/src/batch.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nconst Jsonrpc = require('./jsonrpc')\nconst errors = require('../../caver-core-helpers').errors\n\nconst Batch = function(requestManager) {\n    this.requestManager = requestManager\n    this.requests = []\n}\n\nBatch.prototype.add = function(request) {\n    this.requests.push(request)\n}\n\nBatch.prototype.execute = function() {\n    const requests = this.requests\n    this.requestManager.sendBatch(requests, function(err, results) {\n        results = results || []\n\n        requests\n            .map(function(request, index) {\n                return results[index] || {}\n            })\n            .forEach(function(result, index) {\n                /**\n                 * if callback is defined in requests[index]\n                 * 1) Check result.error - if existed throw ErrorResponse.\n                 * 2) Check result is valid json response object - if invalid throw InvalidResponse.\n                 * 3) After passing 1) 2), if there is format method in requests[index] do formatting, and then callback.\n                 */\n                if (requests[index].callback) {\n                    if (result && result.error) {\n                        return requests[index].callback(errors.ErrorResponse(result))\n                    }\n\n                    if (!Jsonrpc.isValidResponse(result)) {\n                        return requests[index].callback(errors.InvalidResponse(result))\n                    }\n\n                    requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result)\n                }\n            })\n    })\n}\n\nmodule.exports = Batch\n"]},"metadata":{},"sourceType":"script"}