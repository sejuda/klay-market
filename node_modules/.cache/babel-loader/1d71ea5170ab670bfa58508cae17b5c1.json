{"ast":null,"code":"'use strict';\n\nconst callbackify = require('./lib/callbackify');\n\nconst {\n  collectify,\n  pullify,\n  concatify\n} = require('./lib/iterable');\n\nmodule.exports = config => {\n  const add = require('./add')(config);\n\n  const cat = require('./cat')(config);\n\n  const ls = require('./ls')(config);\n\n  const ping = require('./ping')(config);\n\n  return {\n    add: callbackify(collectify(add), {\n      minArgs: 1\n    }),\n    addPullStream: pullify.transform(add),\n    addFromStream: callbackify(collectify(add), {\n      minArgs: 1\n    }),\n    addFromURL: callbackify(collectify(require('./add-from-url')(config))),\n    bitswap: {\n      stat: callbackify(require('./bitswap/stat')(config)),\n      wantlist: callbackify(require('./bitswap/wantlist')(config))\n    },\n    block: {\n      get: callbackify(require('./block/get')(config)),\n      put: callbackify(require('./block/put')(config)),\n      stat: callbackify(require('./block/stat')(config))\n    },\n    cat: callbackify(concatify(cat)),\n    catPullStream: pullify.source(cat),\n    files: {\n      cp: callbackify(require('./files/cp')(config)),\n      mkdir: callbackify(require('./files/mkdir')(config)),\n      write: callbackify(require('./files/write')(config))\n    },\n    ls: callbackify(collectify(ls)),\n    lsPullStream: pullify.source(ls),\n    id: callbackify(require('./id')(config)),\n    ping: callbackify(collectify(ping)),\n    pingPullStream: pullify.source(ping),\n    pubsub: {\n      ls: callbackify(require('./pubsub/ls')(config)),\n      peers: callbackify(require('./pubsub/peers')(config)),\n      publish: callbackify(require('./pubsub/publish')(config)),\n      subscribe: callbackify(require('./pubsub/subscribe')(config), {\n        minArgs: 2\n      }),\n      unsubscribe: callbackify(require('./pubsub/unsubscribe')(config), {\n        minArgs: 2\n      })\n    },\n    swarm: {\n      connect: callbackify(require('./swarm/connect')(config)),\n      peers: callbackify(require('./swarm/peers')(config))\n    },\n    version: callbackify(require('./version')(config))\n  };\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/ipfs-http-client-lite/src/index.js"],"names":["callbackify","require","collectify","pullify","concatify","module","exports","config","add","cat","ls","ping","minArgs","addPullStream","transform","addFromStream","addFromURL","bitswap","stat","wantlist","block","get","put","catPullStream","source","files","cp","mkdir","write","lsPullStream","id","pingPullStream","pubsub","peers","publish","subscribe","unsubscribe","swarm","connect","version"],"mappings":"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","sourcesContent":["'use strict'\n\nconst callbackify = require('./lib/callbackify')\nconst { collectify, pullify, concatify } = require('./lib/iterable')\n\nmodule.exports = config => {\n  const add = require('./add')(config)\n  const cat = require('./cat')(config)\n  const ls = require('./ls')(config)\n  const ping = require('./ping')(config)\n\n  return {\n    add: callbackify(collectify(add), { minArgs: 1 }),\n    addPullStream: pullify.transform(add),\n    addFromStream: callbackify(collectify(add), { minArgs: 1 }),\n    addFromURL: callbackify(collectify(require('./add-from-url')(config))),\n    bitswap: {\n      stat: callbackify(require('./bitswap/stat')(config)),\n      wantlist: callbackify(require('./bitswap/wantlist')(config))\n    },\n    block: {\n      get: callbackify(require('./block/get')(config)),\n      put: callbackify(require('./block/put')(config)),\n      stat: callbackify(require('./block/stat')(config))\n    },\n    cat: callbackify(concatify(cat)),\n    catPullStream: pullify.source(cat),\n    files: {\n      cp: callbackify(require('./files/cp')(config)),\n      mkdir: callbackify(require('./files/mkdir')(config)),\n      write: callbackify(require('./files/write')(config))\n    },\n    ls: callbackify(collectify(ls)),\n    lsPullStream: pullify.source(ls),\n    id: callbackify(require('./id')(config)),\n    ping: callbackify(collectify(ping)),\n    pingPullStream: pullify.source(ping),\n    pubsub: {\n      ls: callbackify(require('./pubsub/ls')(config)),\n      peers: callbackify(require('./pubsub/peers')(config)),\n      publish: callbackify(require('./pubsub/publish')(config)),\n      subscribe: callbackify(require('./pubsub/subscribe')(config), { minArgs: 2 }),\n      unsubscribe: callbackify(require('./pubsub/unsubscribe')(config), { minArgs: 2 })\n    },\n    swarm: {\n      connect: callbackify(require('./swarm/connect')(config)),\n      peers: callbackify(require('./swarm/peers')(config))\n    },\n    version: callbackify(require('./version')(config))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}