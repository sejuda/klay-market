{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../caver-utils');\n\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder');\n\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy');\n\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic');\n\nconst AccountKeyFail = require('./accountKey/accountKeyFail');\n\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig');\n\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased');\n\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions');\n\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey');\n\nconst {\n  isMultipleKeysFormat,\n  isRoleBasedKeysFormat\n} = require('../../caver-wallet/src/keyring/keyringHelper');\n\nfunction isAccountKeyInstance(accountKey) {\n  if (!(accountKey instanceof AccountKeyLegacy) && !(accountKey instanceof AccountKeyPublic) && !(accountKey instanceof AccountKeyFail) && !(accountKey instanceof AccountKeyWeightedMultiSig) && !(accountKey instanceof AccountKeyRoleBased)) return false;\n  return true;\n}\n/**\n * Representing an Account which includes information for account update.\n * @class\n */\n\n\nclass Account {\n  /**\n   * creates an Account instance\n   *\n   * `caver.account.create('0x${address in hex}', '0x{public key}')`\n   * `caver.account.create('0x${address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1,1] })`\n   * `caver.account.create('0x${address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1,1] }, {}])`\n   *\n   * @param {string} address The address of Account.\n   * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\n   * @param {WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\n   * @return {Account}\n   */\n  static create(address, accountKey, options) {\n    if (_.isString(accountKey)) {\n      if (utils.isValidPublicKey(accountKey)) {\n        return Account.createWithAccountKeyPublic(address, accountKey);\n      }\n\n      return Account.createFromRLPEncoding(address, accountKey);\n    }\n\n    if (isMultipleKeysFormat(accountKey)) {\n      if (accountKey.length === 0) throw new Error(`Empty accountKey array.`);\n      return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options);\n    }\n\n    if (isRoleBasedKeysFormat(accountKey)) {\n      return Account.createWithAccountKeyRoleBased(address, accountKey, options);\n    }\n\n    throw new Error(`Unsupported accountKey type: ${typeof accountKey}`);\n  }\n  /**\n   * creates an Account instance from RLP-encoded account key\n   *\n   * @param {string} address The address of Account.\n   * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\n   * @return {Account}\n   */\n\n\n  static createFromRLPEncoding(address, rlpEncodedKey) {\n    const accountKey = AccountKeyDecoder.decode(rlpEncodedKey);\n    return new Account(address, accountKey);\n  }\n  /**\n   * creates an Account instance which has AccountKeyLegacy as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyLegacy(address) {\n    return new Account(address, new AccountKeyLegacy());\n  }\n  /**\n   * creates an Account instance which has AccountKeyPublic as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @param {string} publicKey The public key string.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyPublic(address, publicKey) {\n    return new Account(address, new AccountKeyPublic(publicKey));\n  }\n  /**\n   * creates an Account instance which has AccountKeyFail as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyFail(address) {\n    return new Account(address, new AccountKeyFail());\n  }\n  /**\n   * creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @param {Array} publicKeyArray The array that includes multiple public key strings.\n   * @param {Object} [options] The object that includes threshold and weight array.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n    return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options));\n  }\n  /**\n   * creates an Account instance which has AccountKeyRoleBased as an accountKey\n   *\n   * @param {string} address The address of Account.\n   * @param {Array} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\n   * @param {Array} [options] An array that contains objects with threshold and weight array defined for each role.\n   * @return {Account}\n   */\n\n\n  static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n    return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options));\n  }\n  /**\n   * Create an account.\n   * @param {string} address - The address of account.\n   * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} accountKey - The accountKey of account.\n   */\n\n\n  constructor(address, accountKey) {\n    this.address = address;\n    this.accountKey = accountKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get address() {\n    return this._address;\n  }\n\n  set address(addressInput) {\n    if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`);\n    this._address = utils.addHexPrefix(addressInput);\n  }\n  /**\n   * @type {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased}\n   */\n\n\n  get accountKey() {\n    return this._accountKey;\n  }\n\n  set accountKey(accountKey) {\n    if (!isAccountKeyInstance(accountKey)) throw new Error(`Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`);\n    this._accountKey = accountKey;\n  }\n  /**\n   * returns RLP-encoded account key string.\n   *\n   * @return {string}\n   */\n\n\n  getRLPEncodingAccountKey() {\n    return this._accountKey.getRLPEncoding();\n  }\n\n}\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions;\nAccount.accountKey = {\n  decode: AccountKeyDecoder.decode,\n  accountKeyLegacy: AccountKeyLegacy,\n  accountKeyPublic: AccountKeyPublic,\n  accountKeyFail: AccountKeyFail,\n  accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n  accountKeyRoleBased: AccountKeyRoleBased,\n  weightedPublicKey: WeightedPublicKey\n};\nmodule.exports = Account;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-account/src/index.js"],"names":["_","require","utils","AccountKeyDecoder","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","WeightedMultiSigOptions","WeightedPublicKey","isMultipleKeysFormat","isRoleBasedKeysFormat","isAccountKeyInstance","accountKey","Account","create","address","options","isString","isValidPublicKey","createWithAccountKeyPublic","createFromRLPEncoding","length","Error","createWithAccountKeyWeightedMultiSig","createWithAccountKeyRoleBased","rlpEncodedKey","decode","createWithAccountKeyLegacy","publicKey","createWithAccountKeyFail","publicKeyArray","fromPublicKeysAndOptions","roledBasedPublicKeyArray","fromRoleBasedPublicKeysAndOptions","constructor","_address","addressInput","isAddress","addHexPrefix","_accountKey","getRLPEncodingAccountKey","getRLPEncoding","weightedMultiSigOptions","accountKeyLegacy","accountKeyPublic","accountKeyFail","accountKeyWeightedMultiSig","accountKeyRoleBased","weightedPublicKey","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst utils = require('../../caver-utils')\nconst AccountKeyDecoder = require('./accountKey/accountKeyDecoder')\nconst AccountKeyLegacy = require('./accountKey/accountKeyLegacy')\nconst AccountKeyPublic = require('./accountKey/accountKeyPublic')\nconst AccountKeyFail = require('./accountKey/accountKeyFail')\nconst AccountKeyWeightedMultiSig = require('./accountKey/accountKeyWeightedMultiSig')\nconst AccountKeyRoleBased = require('./accountKey/accountKeyRoleBased')\nconst WeightedMultiSigOptions = require('./accountKey/weightedMultiSigOptions')\nconst WeightedPublicKey = require('./accountKey/weightedPublicKey')\nconst { isMultipleKeysFormat, isRoleBasedKeysFormat } = require('../../caver-wallet/src/keyring/keyringHelper')\n\nfunction isAccountKeyInstance(accountKey) {\n    if (\n        !(accountKey instanceof AccountKeyLegacy) &&\n        !(accountKey instanceof AccountKeyPublic) &&\n        !(accountKey instanceof AccountKeyFail) &&\n        !(accountKey instanceof AccountKeyWeightedMultiSig) &&\n        !(accountKey instanceof AccountKeyRoleBased)\n    )\n        return false\n\n    return true\n}\n/**\n * Representing an Account which includes information for account update.\n * @class\n */\nclass Account {\n    /**\n     * creates an Account instance\n     *\n     * `caver.account.create('0x${address in hex}', '0x{public key}')`\n     * `caver.account.create('0x${address in hex}', ['0x{public key}', '0x{public key}'], { threshold: 1, weight: [1,1] })`\n     * `caver.account.create('0x${address in hex}', [['0x{public key}'], ['0x{public key}', '0x{public key}'], ['0x{public key}']], [{}, { threshold: 1, weight: [1,1] }, {}])`\n     *\n     * @param {string} address The address of Account.\n     * @param {string|Array.<string>|Array.<Array.<string>>} accountKey The accountKey value of Account. Depending on this, Account's accountKey will be AccountKeyLegacy / AccountKeyPublic / AccountKeyFail / AccountKeyWeightedMultiSig / AccountKeyRoleBased.\n     * @param {WeightedMultiSigOptions|Array.<WeightedMultiSigOptions>} [options] The options that includes 'threshold' and 'weight'. This is only necessary if AccountKeyWeightedMultiSig or AccountKeyRoleBased.\n     * @return {Account}\n     */\n    static create(address, accountKey, options) {\n        if (_.isString(accountKey)) {\n            if (utils.isValidPublicKey(accountKey)) {\n                return Account.createWithAccountKeyPublic(address, accountKey)\n            }\n            return Account.createFromRLPEncoding(address, accountKey)\n        }\n\n        if (isMultipleKeysFormat(accountKey)) {\n            if (accountKey.length === 0) throw new Error(`Empty accountKey array.`)\n            return Account.createWithAccountKeyWeightedMultiSig(address, accountKey, options)\n        }\n        if (isRoleBasedKeysFormat(accountKey)) {\n            return Account.createWithAccountKeyRoleBased(address, accountKey, options)\n        }\n\n        throw new Error(`Unsupported accountKey type: ${typeof accountKey}`)\n    }\n\n    /**\n     * creates an Account instance from RLP-encoded account key\n     *\n     * @param {string} address The address of Account.\n     * @param {string} rlpEncodedKey The RLP-encoded accountKey string.\n     * @return {Account}\n     */\n    static createFromRLPEncoding(address, rlpEncodedKey) {\n        const accountKey = AccountKeyDecoder.decode(rlpEncodedKey)\n        return new Account(address, accountKey)\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyLegacy as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @return {Account}\n     */\n    static createWithAccountKeyLegacy(address) {\n        return new Account(address, new AccountKeyLegacy())\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyPublic as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {string} publicKey The public key string.\n     * @return {Account}\n     */\n    static createWithAccountKeyPublic(address, publicKey) {\n        return new Account(address, new AccountKeyPublic(publicKey))\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyFail as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @return {Account}\n     */\n    static createWithAccountKeyFail(address) {\n        return new Account(address, new AccountKeyFail())\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyWeightedMultiSig as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {Array} publicKeyArray The array that includes multiple public key strings.\n     * @param {Object} [options] The object that includes threshold and weight array.\n     * @return {Account}\n     */\n    static createWithAccountKeyWeightedMultiSig(address, publicKeyArray, options) {\n        return new Account(address, AccountKeyWeightedMultiSig.fromPublicKeysAndOptions(publicKeyArray, options))\n    }\n\n    /**\n     * creates an Account instance which has AccountKeyRoleBased as an accountKey\n     *\n     * @param {string} address The address of Account.\n     * @param {Array} roledBasedPublicKeyArray A two-dimensional array containing arrays of public key strings for each role.\n     * @param {Array} [options] An array that contains objects with threshold and weight array defined for each role.\n     * @return {Account}\n     */\n    static createWithAccountKeyRoleBased(address, roledBasedPublicKeyArray, options) {\n        return new Account(address, AccountKeyRoleBased.fromRoleBasedPublicKeysAndOptions(roledBasedPublicKeyArray, options))\n    }\n\n    /**\n     * Create an account.\n     * @param {string} address - The address of account.\n     * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased} accountKey - The accountKey of account.\n     */\n    constructor(address, accountKey) {\n        this.address = address\n        this.accountKey = accountKey\n    }\n\n    /**\n     * @type {string}\n     */\n    get address() {\n        return this._address\n    }\n\n    set address(addressInput) {\n        if (!utils.isAddress(addressInput)) throw new Error(`Invalid address : ${addressInput}`)\n\n        this._address = utils.addHexPrefix(addressInput)\n    }\n\n    /**\n     * @type {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased}\n     */\n    get accountKey() {\n        return this._accountKey\n    }\n\n    set accountKey(accountKey) {\n        if (!isAccountKeyInstance(accountKey))\n            throw new Error(\n                `Invalid accountKey. accountKey should be an instance of AccountKeyLegacy, AccountKeyPublic, AccountKeyFail, AccountKeyWeightedMultiSig or AccountKeyRoleBased`\n            )\n\n        this._accountKey = accountKey\n    }\n\n    /**\n     * returns RLP-encoded account key string.\n     *\n     * @return {string}\n     */\n    getRLPEncodingAccountKey() {\n        return this._accountKey.getRLPEncoding()\n    }\n}\n\nAccount.weightedMultiSigOptions = WeightedMultiSigOptions\n\nAccount.accountKey = {\n    decode: AccountKeyDecoder.decode,\n    accountKeyLegacy: AccountKeyLegacy,\n    accountKeyPublic: AccountKeyPublic,\n    accountKeyFail: AccountKeyFail,\n    accountKeyWeightedMultiSig: AccountKeyWeightedMultiSig,\n    accountKeyRoleBased: AccountKeyRoleBased,\n    weightedPublicKey: WeightedPublicKey,\n}\n\nmodule.exports = Account\n"]},"metadata":{},"sourceType":"script"}