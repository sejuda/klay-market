{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth-abi/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\nconst BigNumber = require('bn.js');\n\nconst utils = require('../../src/index.js');\n\nconst leftPad = function (string, bytes) {\n  let result = string;\n\n  while (result.length < bytes * 2) {\n    result = `0${result}`;\n  }\n\n  return result;\n};\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\n\n\nconst iso13616Prepare = function (iban) {\n  const A = 'A'.charCodeAt(0);\n  const Z = 'Z'.charCodeAt(0);\n  iban = iban.toUpperCase();\n  iban = iban.substr(4) + iban.substr(0, 4);\n  return iban.split('').map(function (n) {\n    const code = n.charCodeAt(0);\n\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    }\n\n    return n;\n  }).join('');\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\n\n\nconst mod9710 = function (iban) {\n  let remainder = iban;\n  let block;\n\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n  }\n\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\n\n\nconst Iban = function Iban(iban) {\n  this._iban = iban;\n};\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\n\n\nIban.toAddress = function (ib) {\n  ib = new Iban(ib);\n\n  if (!ib.isDirect()) {\n    throw new Error(\"IBAN is indirect and can't be converted\");\n  }\n\n  return ib.toAddress();\n};\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\n\n\nIban.toIban = function (address) {\n  return Iban.fromAddress(address).toString();\n};\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\n\n\nIban.fromAddress = function (address) {\n  if (!utils.isAddress(address)) {\n    throw new Error(`Provided address is not a valid address: ${address}`);\n  }\n\n  address = address.replace('0x', '').replace('0X', '');\n  const asBn = new BigNumber(address, 16);\n  const base36 = asBn.toString(36);\n  const padded = leftPad(base36, 15);\n  return Iban.fromBban(padded.toUpperCase());\n};\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\n\n\nIban.fromBban = function (bban) {\n  const countryCode = 'XE';\n  const remainder = mod9710(iso13616Prepare(`${countryCode}00${bban}`));\n  const checkDigit = `0${98 - remainder}`.slice(-2);\n  return new Iban(countryCode + checkDigit + bban);\n};\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\n\n\nIban.createIndirect = function (options) {\n  return Iban.fromBban(`ETH${options.institution}${options.identifier}`);\n};\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\n\n\nIban.isValid = function (iban) {\n  const i = new Iban(iban);\n  return i.isValid();\n};\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isValid = function () {\n  return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;\n};\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isDirect = function () {\n  return this._iban.length === 34 || this._iban.length === 35;\n};\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\n\n\nIban.prototype.isIndirect = function () {\n  return this._iban.length === 20;\n};\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\n\n\nIban.prototype.checksum = function () {\n  return this._iban.substr(2, 2);\n};\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\n\n\nIban.prototype.institution = function () {\n  return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\n\n\nIban.prototype.client = function () {\n  return this.isIndirect() ? this._iban.substr(11) : '';\n};\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\n\n\nIban.prototype.toAddress = function () {\n  if (this.isDirect()) {\n    const base36 = this._iban.substr(4);\n\n    const asBn = new BigNumber(base36, 36);\n    return utils.toChecksumAddress(asBn.toString(16, 20));\n  }\n\n  return '';\n};\n\nIban.prototype.toString = function () {\n  return this._iban;\n};\n\nmodule.exports = Iban;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-utils/iban/src/index.js"],"names":["BigNumber","require","utils","leftPad","string","bytes","result","length","iso13616Prepare","iban","A","charCodeAt","Z","toUpperCase","substr","split","map","n","code","join","mod9710","remainder","block","slice","parseInt","Iban","_iban","toAddress","ib","isDirect","Error","toIban","address","fromAddress","toString","isAddress","replace","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","options","institution","identifier","isValid","i","prototype","test","isIndirect","checksum","client","toChecksumAddress","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,OAAD,CAAzB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,oBAAD,CAArB;;AAEA,MAAME,OAAO,GAAG,UAASC,MAAT,EAAiBC,KAAjB,EAAwB;AACpC,MAAIC,MAAM,GAAGF,MAAb;;AACA,SAAOE,MAAM,CAACC,MAAP,GAAgBF,KAAK,GAAG,CAA/B,EAAkC;AAC9BC,IAAAA,MAAM,GAAI,IAAGA,MAAO,EAApB;AACH;;AACD,SAAOA,MAAP;AACH,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,eAAe,GAAG,UAASC,IAAT,EAAe;AACnC,QAAMC,CAAC,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAV;AACA,QAAMC,CAAC,GAAG,IAAID,UAAJ,CAAe,CAAf,CAAV;AAEAF,EAAAA,IAAI,GAAGA,IAAI,CAACI,WAAL,EAAP;AACAJ,EAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAY,CAAZ,IAAiBL,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAe,CAAf,CAAxB;AAEA,SAAOL,IAAI,CACNM,KADE,CACI,EADJ,EAEFC,GAFE,CAEE,UAASC,CAAT,EAAY;AACb,UAAMC,IAAI,GAAGD,CAAC,CAACN,UAAF,CAAa,CAAb,CAAb;;AACA,QAAIO,IAAI,IAAIR,CAAR,IAAaQ,IAAI,IAAIN,CAAzB,EAA4B;AACxB;AACA,aAAOM,IAAI,GAAGR,CAAP,GAAW,EAAlB;AACH;;AACD,WAAOO,CAAP;AACH,GATE,EAUFE,IAVE,CAUG,EAVH,CAAP;AAWH,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAG,UAASX,IAAT,EAAe;AAC3B,MAAIY,SAAS,GAAGZ,IAAhB;AACA,MAAIa,KAAJ;;AAEA,SAAOD,SAAS,CAACd,MAAV,GAAmB,CAA1B,EAA6B;AACzBe,IAAAA,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgB,CAAhB,EAAmB,CAAnB,CAAR;AACAF,IAAAA,SAAS,GAAIG,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAR,GAAsB,EAAvB,GAA6BD,SAAS,CAACE,KAAV,CAAgBD,KAAK,CAACf,MAAtB,CAAzC;AACH;;AAED,SAAOiB,QAAQ,CAACH,SAAD,EAAY,EAAZ,CAAR,GAA0B,EAAjC;AACH,CAVD;AAYA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,IAAI,GAAG,SAASA,IAAT,CAAchB,IAAd,EAAoB;AAC7B,OAAKiB,KAAL,GAAajB,IAAb;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAgB,IAAI,CAACE,SAAL,GAAiB,UAASC,EAAT,EAAa;AAC1BA,EAAAA,EAAE,GAAG,IAAIH,IAAJ,CAASG,EAAT,CAAL;;AAEA,MAAI,CAACA,EAAE,CAACC,QAAH,EAAL,EAAoB;AAChB,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,SAAOF,EAAE,CAACD,SAAH,EAAP;AACH,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAF,IAAI,CAACM,MAAL,GAAc,UAASC,OAAT,EAAkB;AAC5B,SAAOP,IAAI,CAACQ,WAAL,CAAiBD,OAAjB,EAA0BE,QAA1B,EAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,IAAI,CAACQ,WAAL,GAAmB,UAASD,OAAT,EAAkB;AACjC,MAAI,CAAC9B,KAAK,CAACiC,SAAN,CAAgBH,OAAhB,CAAL,EAA+B;AAC3B,UAAM,IAAIF,KAAJ,CAAW,4CAA2CE,OAAQ,EAA9D,CAAN;AACH;;AAEDA,EAAAA,OAAO,GAAGA,OAAO,CAACI,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,EAA0BA,OAA1B,CAAkC,IAAlC,EAAwC,EAAxC,CAAV;AAEA,QAAMC,IAAI,GAAG,IAAIrC,SAAJ,CAAcgC,OAAd,EAAuB,EAAvB,CAAb;AACA,QAAMM,MAAM,GAAGD,IAAI,CAACH,QAAL,CAAc,EAAd,CAAf;AACA,QAAMK,MAAM,GAAGpC,OAAO,CAACmC,MAAD,EAAS,EAAT,CAAtB;AACA,SAAOb,IAAI,CAACe,QAAL,CAAcD,MAAM,CAAC1B,WAAP,EAAd,CAAP;AACH,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAY,IAAI,CAACe,QAAL,GAAgB,UAASC,IAAT,EAAe;AAC3B,QAAMC,WAAW,GAAG,IAApB;AAEA,QAAMrB,SAAS,GAAGD,OAAO,CAACZ,eAAe,CAAE,GAAEkC,WAAY,KAAID,IAAK,EAAzB,CAAhB,CAAzB;AACA,QAAME,UAAU,GAAI,IAAG,KAAKtB,SAAU,EAAnB,CAAqBE,KAArB,CAA2B,CAAC,CAA5B,CAAnB;AAEA,SAAO,IAAIE,IAAJ,CAASiB,WAAW,GAAGC,UAAd,GAA2BF,IAApC,CAAP;AACH,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,IAAI,CAACmB,cAAL,GAAsB,UAASC,OAAT,EAAkB;AACpC,SAAOpB,IAAI,CAACe,QAAL,CAAe,MAAKK,OAAO,CAACC,WAAY,GAAED,OAAO,CAACE,UAAW,EAA7D,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,IAAI,CAACuB,OAAL,GAAe,UAASvC,IAAT,EAAe;AAC1B,QAAMwC,CAAC,GAAG,IAAIxB,IAAJ,CAAShB,IAAT,CAAV;AACA,SAAOwC,CAAC,CAACD,OAAF,EAAP;AACH,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAvB,IAAI,CAACyB,SAAL,CAAeF,OAAf,GAAyB,YAAW;AAChC,SAAO,gDAAgDG,IAAhD,CAAqD,KAAKzB,KAA1D,KAAoEN,OAAO,CAACZ,eAAe,CAAC,KAAKkB,KAAN,CAAhB,CAAP,KAAyC,CAApH;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAD,IAAI,CAACyB,SAAL,CAAerB,QAAf,GAA0B,YAAW;AACjC,SAAO,KAAKH,KAAL,CAAWnB,MAAX,KAAsB,EAAtB,IAA4B,KAAKmB,KAAL,CAAWnB,MAAX,KAAsB,EAAzD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAkB,IAAI,CAACyB,SAAL,CAAeE,UAAf,GAA4B,YAAW;AACnC,SAAO,KAAK1B,KAAL,CAAWnB,MAAX,KAAsB,EAA7B;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAkB,IAAI,CAACyB,SAAL,CAAeG,QAAf,GAA0B,YAAW;AACjC,SAAO,KAAK3B,KAAL,CAAWZ,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAAP;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAW,IAAI,CAACyB,SAAL,CAAeJ,WAAf,GAA6B,YAAW;AACpC,SAAO,KAAKM,UAAL,KAAoB,KAAK1B,KAAL,CAAWZ,MAAX,CAAkB,CAAlB,EAAqB,CAArB,CAApB,GAA8C,EAArD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAW,IAAI,CAACyB,SAAL,CAAeI,MAAf,GAAwB,YAAW;AAC/B,SAAO,KAAKF,UAAL,KAAoB,KAAK1B,KAAL,CAAWZ,MAAX,CAAkB,EAAlB,CAApB,GAA4C,EAAnD;AACH,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAW,IAAI,CAACyB,SAAL,CAAevB,SAAf,GAA2B,YAAW;AAClC,MAAI,KAAKE,QAAL,EAAJ,EAAqB;AACjB,UAAMS,MAAM,GAAG,KAAKZ,KAAL,CAAWZ,MAAX,CAAkB,CAAlB,CAAf;;AACA,UAAMuB,IAAI,GAAG,IAAIrC,SAAJ,CAAcsC,MAAd,EAAsB,EAAtB,CAAb;AACA,WAAOpC,KAAK,CAACqD,iBAAN,CAAwBlB,IAAI,CAACH,QAAL,CAAc,EAAd,EAAkB,EAAlB,CAAxB,CAAP;AACH;;AAED,SAAO,EAAP;AACH,CARD;;AAUAT,IAAI,CAACyB,SAAL,CAAehB,QAAf,GAA0B,YAAW;AACjC,SAAO,KAAKR,KAAZ;AACH,CAFD;;AAIA8B,MAAM,CAACC,OAAP,GAAiBhC,IAAjB","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth-abi/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file iban.js\n *\n * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol\n *\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2015\n */\n\nconst BigNumber = require('bn.js')\nconst utils = require('../../src/index.js')\n\nconst leftPad = function(string, bytes) {\n    let result = string\n    while (result.length < bytes * 2) {\n        result = `0${result}`\n    }\n    return result\n}\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nconst iso13616Prepare = function(iban) {\n    const A = 'A'.charCodeAt(0)\n    const Z = 'Z'.charCodeAt(0)\n\n    iban = iban.toUpperCase()\n    iban = iban.substr(4) + iban.substr(0, 4)\n\n    return iban\n        .split('')\n        .map(function(n) {\n            const code = n.charCodeAt(0)\n            if (code >= A && code <= Z) {\n                // A = 10, B = 11, ... Z = 35\n                return code - A + 10\n            }\n            return n\n        })\n        .join('')\n}\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nconst mod9710 = function(iban) {\n    let remainder = iban\n    let block\n\n    while (remainder.length > 2) {\n        block = remainder.slice(0, 9)\n        remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length)\n    }\n\n    return parseInt(remainder, 10) % 97\n}\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nconst Iban = function Iban(iban) {\n    this._iban = iban\n}\n\n/**\n * This method should be used to create an ethereum address from a direct iban address\n *\n * @method toAddress\n * @param {String} iban address\n * @return {String} the ethereum address\n */\nIban.toAddress = function(ib) {\n    ib = new Iban(ib)\n\n    if (!ib.isDirect()) {\n        throw new Error(\"IBAN is indirect and can't be converted\")\n    }\n\n    return ib.toAddress()\n}\n\n/**\n * This method should be used to create iban address from an ethereum address\n *\n * @method toIban\n * @param {String} address\n * @return {String} the IBAN address\n */\nIban.toIban = function(address) {\n    return Iban.fromAddress(address).toString()\n}\n\n/**\n * This method should be used to create iban object from an ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function(address) {\n    if (!utils.isAddress(address)) {\n        throw new Error(`Provided address is not a valid address: ${address}`)\n    }\n\n    address = address.replace('0x', '').replace('0X', '')\n\n    const asBn = new BigNumber(address, 16)\n    const base36 = asBn.toString(36)\n    const padded = leftPad(base36, 15)\n    return Iban.fromBban(padded.toUpperCase())\n}\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function(bban) {\n    const countryCode = 'XE'\n\n    const remainder = mod9710(iso13616Prepare(`${countryCode}00${bban}`))\n    const checkDigit = `0${98 - remainder}`.slice(-2)\n\n    return new Iban(countryCode + checkDigit + bban)\n}\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function(options) {\n    return Iban.fromBban(`ETH${options.institution}${options.identifier}`)\n}\n\n/**\n * This method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function(iban) {\n    const i = new Iban(iban)\n    return i.isValid()\n}\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function() {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1\n}\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function() {\n    return this._iban.length === 34 || this._iban.length === 35\n}\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function() {\n    return this._iban.length === 20\n}\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function() {\n    return this._iban.substr(2, 2)\n}\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function() {\n    return this.isIndirect() ? this._iban.substr(7, 4) : ''\n}\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function() {\n    return this.isIndirect() ? this._iban.substr(11) : ''\n}\n\n/**\n * Should be called to get client direct address\n *\n * @method toAddress\n * @returns {String} ethereum address\n */\nIban.prototype.toAddress = function() {\n    if (this.isDirect()) {\n        const base36 = this._iban.substr(4)\n        const asBn = new BigNumber(base36, 36)\n        return utils.toChecksumAddress(asBn.toString(16, 20))\n    }\n\n    return ''\n}\n\nIban.prototype.toString = function() {\n    return this._iban\n}\n\nmodule.exports = Iban\n"]},"metadata":{},"sourceType":"script"}