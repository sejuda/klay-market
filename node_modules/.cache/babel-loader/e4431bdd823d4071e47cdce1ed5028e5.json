{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo)) throw new Error(`Cannot decode to FeeDelegatedValueTransferMemo. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    input,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated value transfer memo transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfermemo to see more detail.\n * @class\n */\n\n\nclass FeeDelegatedValueTransferMemo extends AbstractFeeDelegatedTransaction {\n  /**\n   * Creates a fee delegated value transfer memo transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @return {FeeDelegatedValueTransferMemo}\n   */\n  static create(createTxObj) {\n    return new FeeDelegatedValueTransferMemo(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedValueTransferMemo transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer memo transaction.\n   * @return {FeeDelegatedValueTransferMemo}\n   */\n\n\n  static decode(rlpEncoded) {\n    return new FeeDelegatedValueTransferMemo(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a fee delegated value transfer memo transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo, createTxObj);\n    this.to = createTxObj.to;\n    this.value = createTxObj.value;\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input]);\n  }\n\n}\n\nmodule.exports = FeeDelegatedValueTransferMemo;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedValueTransferMemo","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","input","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedValueTransferMemo","create","createTxObj","constructor","isString","data","_to","address","isAddress","toLowerCase","_value","val","numberToHex","_input","isHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo))\n        throw new Error(\n            `Cannot decode to FeeDelegatedValueTransferMemo. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        input,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated value transfer memo transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfermemo to see more detail.\n * @class\n */\nclass FeeDelegatedValueTransferMemo extends AbstractFeeDelegatedTransaction {\n    /**\n     * Creates a fee delegated value transfer memo transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @return {FeeDelegatedValueTransferMemo}\n     */\n    static create(createTxObj) {\n        return new FeeDelegatedValueTransferMemo(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedValueTransferMemo transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer memo transaction.\n     * @return {FeeDelegatedValueTransferMemo}\n     */\n    static decode(rlpEncoded) {\n        return new FeeDelegatedValueTransferMemo(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a fee delegated value transfer memo transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo, createTxObj)\n        this.to = createTxObj.to\n        this.value = createTxObj.value\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * @type {string}\n     */\n    get data() {\n        return this._input\n    }\n\n    set data(data) {\n        this._input = data\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                this.input,\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n            this.input,\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedValueTransferMemo\n"]},"metadata":{},"sourceType":"script"}