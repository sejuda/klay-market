{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  CODE_FORMAT,\n  getCodeFormatTag\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeSmartContractDeploy)) throw new Error(`Cannot decode to SmartContractDeploy. The prefix must be ${TX_TYPE_TAG.TxTypeSmartContractDeploy}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, signatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    input,\n    humanReadable: humanReadable === '0x1',\n    codeFormat: getCodeFormatTag(codeFormat),\n    signatures\n  };\n}\n/**\n * Represents a smart contract deploy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypesmartcontractdeploy to see more detail.\n * @class\n */\n\n\nclass SmartContractDeploy extends AbstractTransaction {\n  /**\n   * Creates a smart contract deploy transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\n   *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\n   *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   * @return {SmartContractDeploy}\n   */\n  static create(createTxObj) {\n    return new SmartContractDeploy(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a SmartContractDeploy transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded smart contract deploy transaction.\n   * @return {SmartContractDeploy}\n   */\n\n\n  static decode(rlpEncoded) {\n    return new SmartContractDeploy(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a smart contract deploy transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\n   *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\n   *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeSmartContractDeploy, createTxObj);\n    this.to = createTxObj.to || '0x';\n    this.value = createTxObj.value || '0x0';\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n    this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false;\n    this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (address !== '0x') throw new Error(`Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  get humanReadable() {\n    return this._humanReadable;\n  }\n\n  set humanReadable(hr) {\n    if (!_.isBoolean(hr)) throw new Error(`Invalid humanReadable ${hr}`);\n    this._humanReadable = hr;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get codeFormat() {\n    return this._codeFormat;\n  }\n\n  set codeFormat(cf) {\n    this._codeFormat = getCodeFormatTag(cf);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeSmartContractDeploy + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat), signatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeSmartContractDeploy, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'), Bytes.fromNat(this.codeFormat)]);\n  }\n\n}\n\nmodule.exports = SmartContractDeploy;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/smartContractDeploy/smartContractDeploy.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","CODE_FORMAT","getCodeFormatTag","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeSmartContractDeploy","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","input","humanReadable","codeFormat","signatures","decode","trimLeadingZero","SmartContractDeploy","create","createTxObj","constructor","isString","data","undefined","EVM","_to","address","toLowerCase","_value","val","numberToHex","_input","isHex","_humanReadable","hr","isBoolean","_codeFormat","cf","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, CODE_FORMAT, getCodeFormatTag } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeSmartContractDeploy))\n        throw new Error(`Cannot decode to SmartContractDeploy. The prefix must be ${TX_TYPE_TAG.TxTypeSmartContractDeploy}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, input, humanReadable, codeFormat, signatures] = RLP.decode(typeDettached)\n\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        input,\n        humanReadable: humanReadable === '0x1',\n        codeFormat: getCodeFormatTag(codeFormat),\n        signatures,\n    }\n}\n\n/**\n * Represents a smart contract deploy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypesmartcontractdeploy to see more detail.\n * @class\n */\nclass SmartContractDeploy extends AbstractTransaction {\n    /**\n     * Creates a smart contract deploy transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     * @return {SmartContractDeploy}\n     */\n    static create(createTxObj) {\n        return new SmartContractDeploy(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a SmartContractDeploy transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded smart contract deploy transaction.\n     * @return {SmartContractDeploy}\n     */\n    static decode(rlpEncoded) {\n        return new SmartContractDeploy(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a smart contract deploy transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a SmartContractDeploy transaction.\n     *                                      This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `humanReadable`,\n     *                                      `codeFormat`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeSmartContractDeploy, createTxObj)\n        this.to = createTxObj.to || '0x'\n        this.value = createTxObj.value || '0x0'\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n\n        this.humanReadable = createTxObj.humanReadable !== undefined ? createTxObj.humanReadable : false\n        this.codeFormat = createTxObj.codeFormat !== undefined ? createTxObj.codeFormat : CODE_FORMAT.EVM\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (address !== '0x') throw new Error(`Invalid address of to: 'to' should be '0x' with smart contract deploy transaction.`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * @type {string}\n     */\n    get data() {\n        return this._input\n    }\n\n    set data(data) {\n        this._input = data\n    }\n\n    /**\n     * @type {boolean}\n     */\n    get humanReadable() {\n        return this._humanReadable\n    }\n\n    set humanReadable(hr) {\n        if (!_.isBoolean(hr)) throw new Error(`Invalid humanReadable ${hr}`)\n        this._humanReadable = hr\n    }\n\n    /**\n     * @type {string}\n     */\n    get codeFormat() {\n        return this._codeFormat\n    }\n\n    set codeFormat(cf) {\n        this._codeFormat = getCodeFormatTag(cf)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeSmartContractDeploy +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                this.input,\n                Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\n                Bytes.fromNat(this.codeFormat),\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeSmartContractDeploy,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n            this.input,\n            Bytes.fromNat(this.humanReadable === true ? '0x1' : '0x0'),\n            Bytes.fromNat(this.codeFormat),\n        ])\n    }\n}\n\nmodule.exports = SmartContractDeploy\n"]},"metadata":{},"sourceType":"script"}