{"ast":null,"code":"/*\n    Copyright 2021 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst Contract = require('../../caver-contract');\n\nconst {\n  kip13JsonInterface,\n  interfaceIds\n} = require('./kctHelper');\n\nconst {\n  isAddress\n} = require('../../caver-utils');\n\nclass KIP13 extends Contract {\n  /**\n   * isImplementedKIP13Interface checks if the contract implements KIP-13.\n   *\n   * @method isImplementedKIP13Interface\n   * @param {string} contractAddress The address of the contract to check.\n   * @return {boolean}\n   */\n  static async isImplementedKIP13Interface(contractAddress) {\n    const kip13 = new KIP13(contractAddress);\n    const isTrue = await kip13.sendQuery(interfaceIds.preCondition.true);\n    const isFalse = await kip13.sendQuery(interfaceIds.preCondition.false);\n    return isTrue && !isFalse;\n  }\n\n  constructor(contractAddress, abi = kip13JsonInterface) {\n    if (contractAddress) {\n      if (_.isString(contractAddress)) {\n        if (!isAddress(contractAddress)) throw new Error(`Invalid contract address ${contractAddress}`);\n      } else {\n        abi = contractAddress;\n        contractAddress = undefined;\n      }\n    }\n\n    super(abi, contractAddress);\n  }\n  /**\n   * sendQuery sends query to check whether interface is supported or not.\n   *\n   * @method sendQuery\n   * @param {string} interfaceId The interface id to check.\n   * @return {boolean}\n   */\n\n\n  async sendQuery(interfaceId) {\n    const supported = await this.methods.supportsInterface(interfaceId).call();\n    return supported;\n  }\n\n}\n\nmodule.exports = KIP13;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-kct/src/kip13.js"],"names":["_","require","Contract","kip13JsonInterface","interfaceIds","isAddress","KIP13","isImplementedKIP13Interface","contractAddress","kip13","isTrue","sendQuery","preCondition","true","isFalse","false","constructor","abi","isString","Error","undefined","interfaceId","supported","methods","supportsInterface","call","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AAEA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA,kBAAF;AAAsBC,EAAAA;AAAtB,IAAuCH,OAAO,CAAC,aAAD,CAApD;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAgBJ,OAAO,CAAC,mBAAD,CAA7B;;AAEA,MAAMK,KAAN,SAAoBJ,QAApB,CAA6B;AACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AAC4C,eAA3BK,2BAA2B,CAACC,eAAD,EAAkB;AACtD,UAAMC,KAAK,GAAG,IAAIH,KAAJ,CAAUE,eAAV,CAAd;AACA,UAAME,MAAM,GAAG,MAAMD,KAAK,CAACE,SAAN,CAAgBP,YAAY,CAACQ,YAAb,CAA0BC,IAA1C,CAArB;AACA,UAAMC,OAAO,GAAG,MAAML,KAAK,CAACE,SAAN,CAAgBP,YAAY,CAACQ,YAAb,CAA0BG,KAA1C,CAAtB;AACA,WAAOL,MAAM,IAAI,CAACI,OAAlB;AACH;;AAEDE,EAAAA,WAAW,CAACR,eAAD,EAAkBS,GAAG,GAAGd,kBAAxB,EAA4C;AACnD,QAAIK,eAAJ,EAAqB;AACjB,UAAIR,CAAC,CAACkB,QAAF,CAAWV,eAAX,CAAJ,EAAiC;AAC7B,YAAI,CAACH,SAAS,CAACG,eAAD,CAAd,EAAiC,MAAM,IAAIW,KAAJ,CAAW,4BAA2BX,eAAgB,EAAtD,CAAN;AACpC,OAFD,MAEO;AACHS,QAAAA,GAAG,GAAGT,eAAN;AACAA,QAAAA,eAAe,GAAGY,SAAlB;AACH;AACJ;;AAED,UAAMH,GAAN,EAAWT,eAAX;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACmB,QAATG,SAAS,CAACU,WAAD,EAAc;AACzB,UAAMC,SAAS,GAAG,MAAM,KAAKC,OAAL,CAAaC,iBAAb,CAA+BH,WAA/B,EAA4CI,IAA5C,EAAxB;AACA,WAAOH,SAAP;AACH;;AAtCwB;;AAyC7BI,MAAM,CAACC,OAAP,GAAiBrB,KAAjB","sourcesContent":["/*\n    Copyright 2021 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\n\nconst Contract = require('../../caver-contract')\nconst { kip13JsonInterface, interfaceIds } = require('./kctHelper')\nconst { isAddress } = require('../../caver-utils')\n\nclass KIP13 extends Contract {\n    /**\n     * isImplementedKIP13Interface checks if the contract implements KIP-13.\n     *\n     * @method isImplementedKIP13Interface\n     * @param {string} contractAddress The address of the contract to check.\n     * @return {boolean}\n     */\n    static async isImplementedKIP13Interface(contractAddress) {\n        const kip13 = new KIP13(contractAddress)\n        const isTrue = await kip13.sendQuery(interfaceIds.preCondition.true)\n        const isFalse = await kip13.sendQuery(interfaceIds.preCondition.false)\n        return isTrue && !isFalse\n    }\n\n    constructor(contractAddress, abi = kip13JsonInterface) {\n        if (contractAddress) {\n            if (_.isString(contractAddress)) {\n                if (!isAddress(contractAddress)) throw new Error(`Invalid contract address ${contractAddress}`)\n            } else {\n                abi = contractAddress\n                contractAddress = undefined\n            }\n        }\n\n        super(abi, contractAddress)\n    }\n\n    /**\n     * sendQuery sends query to check whether interface is supported or not.\n     *\n     * @method sendQuery\n     * @param {string} interfaceId The interface id to check.\n     * @return {boolean}\n     */\n    async sendQuery(interfaceId) {\n        const supported = await this.methods.supportsInterface(interfaceId).call()\n        return supported\n    }\n}\n\nmodule.exports = KIP13\n"]},"metadata":{},"sourceType":"script"}