{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst utils = require('../../../caver-utils');\n\nconst {\n  ACCOUNT_KEY_TAG\n} = require('./accountKeyHelper');\n/**\n * Representing an AccountKeyPublic.\n * @class\n */\n\n\nclass AccountKeyPublic {\n  /**\n   * Decodes an RLP-encoded AccountKeyPublic string.\n   * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\n   * @return {AccountKeyPublic}\n   */\n  static decode(rlpEncodedKey) {\n    rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey);\n    if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG)) throw new Error(`Cannot decode to AccountKeyPublic. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG}: ${rlpEncodedKey}`);\n    const publicKey = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)}`);\n    return new AccountKeyPublic(publicKey);\n  }\n  /**\n   * Creates AccountKeyPublic instance from x, y point\n   * @param {string} x - The x point.\n   * @param {string} y - The y point.\n   * @return {AccountKeyPublic}\n   */\n\n\n  static fromXYPoint(x, y) {\n    const xPoint = utils.leftPad(utils.stripHexPrefix(x), 64);\n    const yPoint = utils.leftPad(utils.stripHexPrefix(y), 64);\n    const pubKey = `0x${xPoint + yPoint}`;\n    return new AccountKeyPublic(pubKey);\n  }\n  /**\n   * Creates AccountKeyPublic instance from public key string\n   * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\n   * @return {AccountKeyPublic}\n   */\n\n\n  static fromPublicKey(pubKey) {\n    return new AccountKeyPublic(pubKey);\n  }\n  /**\n   * Creates an instance of AccountKeyPublic.\n   * @param {string} publicKey - a public key\n   */\n\n\n  constructor(publicKey) {\n    this.publicKey = publicKey;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  set publicKey(p) {\n    if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`);\n    this._publicKey = utils.addHexPrefix(p);\n  }\n  /**\n   * Returns an RLP-encoded AccountKeyPublic string.\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    const compressedPublicKey = utils.compressPublicKey(this.publicKey);\n    return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n  }\n  /**\n   * Returns the x and y coordinates of publicKey.\n   * @return {Array.<string>}\n   */\n\n\n  getXYPoint() {\n    return utils.xyPointFromPublicKey(this.publicKey);\n  }\n\n}\n\nmodule.exports = AccountKeyPublic;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyPublic.js"],"names":["RLP","require","utils","ACCOUNT_KEY_TAG","AccountKeyPublic","decode","rlpEncodedKey","addHexPrefix","startsWith","ACCOUNT_KEY_PUBLIC_TAG","Error","publicKey","slice","length","fromXYPoint","x","y","xPoint","leftPad","stripHexPrefix","yPoint","pubKey","fromPublicKey","constructor","_publicKey","p","isValidPublicKey","getRLPEncoding","compressedPublicKey","compressPublicKey","encode","getXYPoint","xyPointFromPublicKey","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAnB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAsBF,OAAO,CAAC,oBAAD,CAAnC;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,gBAAN,CAAuB;AACnB;AACJ;AACA;AACA;AACA;AACiB,SAANC,MAAM,CAACC,aAAD,EAAgB;AACzBA,IAAAA,aAAa,GAAGJ,KAAK,CAACK,YAAN,CAAmBD,aAAnB,CAAhB;AACA,QAAI,CAACA,aAAa,CAACE,UAAd,CAAyBL,eAAe,CAACM,sBAAzC,CAAL,EACI,MAAM,IAAIC,KAAJ,CACD,yDAAwDP,eAAe,CAACM,sBAAuB,KAAIH,aAAc,EADhH,CAAN;AAIJ,UAAMK,SAAS,GAAGX,GAAG,CAACK,MAAJ,CAAY,KAAIC,aAAa,CAACM,KAAd,CAAoBT,eAAe,CAACM,sBAAhB,CAAuCI,MAA3D,CAAmE,EAAnF,CAAlB;AACA,WAAO,IAAIT,gBAAJ,CAAqBO,SAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACsB,SAAXG,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACrB,UAAMC,MAAM,GAAGf,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACiB,cAAN,CAAqBJ,CAArB,CAAd,EAAuC,EAAvC,CAAf;AACA,UAAMK,MAAM,GAAGlB,KAAK,CAACgB,OAAN,CAAchB,KAAK,CAACiB,cAAN,CAAqBH,CAArB,CAAd,EAAuC,EAAvC,CAAf;AACA,UAAMK,MAAM,GAAI,KAAIJ,MAAM,GAAGG,MAAO,EAApC;AACA,WAAO,IAAIhB,gBAAJ,CAAqBiB,MAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,SAAbC,aAAa,CAACD,MAAD,EAAS;AACzB,WAAO,IAAIjB,gBAAJ,CAAqBiB,MAArB,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIE,EAAAA,WAAW,CAACZ,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;AAED;AACJ;AACA;;;AACiB,MAATA,SAAS,GAAG;AACZ,WAAO,KAAKa,UAAZ;AACH;;AAEY,MAATb,SAAS,CAACc,CAAD,EAAI;AACb,QAAI,CAACvB,KAAK,CAACwB,gBAAN,CAAuBD,CAAvB,CAAL,EAAgC,MAAM,IAAIf,KAAJ,CAAW,uBAAsBe,CAAE,EAAnC,CAAN;AAChC,SAAKD,UAAL,GAAkBtB,KAAK,CAACK,YAAN,CAAmBkB,CAAnB,CAAlB;AACH;AAED;AACJ;AACA;AACA;;;AACIE,EAAAA,cAAc,GAAG;AACb,UAAMC,mBAAmB,GAAG1B,KAAK,CAAC2B,iBAAN,CAAwB,KAAKlB,SAA7B,CAA5B;AACA,WAAOR,eAAe,CAACM,sBAAhB,GAAyCT,GAAG,CAAC8B,MAAJ,CAAWF,mBAAX,EAAgChB,KAAhC,CAAsC,CAAtC,CAAhD;AACH;AAED;AACJ;AACA;AACA;;;AACImB,EAAAA,UAAU,GAAG;AACT,WAAO7B,KAAK,CAAC8B,oBAAN,CAA2B,KAAKrB,SAAhC,CAAP;AACH;;AA1EkB;;AA6EvBsB,MAAM,CAACC,OAAP,GAAiB9B,gBAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst utils = require('../../../caver-utils')\nconst { ACCOUNT_KEY_TAG } = require('./accountKeyHelper')\n\n/**\n * Representing an AccountKeyPublic.\n * @class\n */\nclass AccountKeyPublic {\n    /**\n     * Decodes an RLP-encoded AccountKeyPublic string.\n     * @param {string} rlpEncodedKey - An RLP-encoded AccountKeyPublic string.\n     * @return {AccountKeyPublic}\n     */\n    static decode(rlpEncodedKey) {\n        rlpEncodedKey = utils.addHexPrefix(rlpEncodedKey)\n        if (!rlpEncodedKey.startsWith(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG))\n            throw new Error(\n                `Cannot decode to AccountKeyPublic. The prefix must be ${ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG}: ${rlpEncodedKey}`\n            )\n\n        const publicKey = RLP.decode(`0x${rlpEncodedKey.slice(ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG.length)}`)\n        return new AccountKeyPublic(publicKey)\n    }\n\n    /**\n     * Creates AccountKeyPublic instance from x, y point\n     * @param {string} x - The x point.\n     * @param {string} y - The y point.\n     * @return {AccountKeyPublic}\n     */\n    static fromXYPoint(x, y) {\n        const xPoint = utils.leftPad(utils.stripHexPrefix(x), 64)\n        const yPoint = utils.leftPad(utils.stripHexPrefix(y), 64)\n        const pubKey = `0x${xPoint + yPoint}`\n        return new AccountKeyPublic(pubKey)\n    }\n\n    /**\n     * Creates AccountKeyPublic instance from public key string\n     * @param {string} pubKey - The public key string. This can be in format of compressed or uncompressed.\n     * @return {AccountKeyPublic}\n     */\n    static fromPublicKey(pubKey) {\n        return new AccountKeyPublic(pubKey)\n    }\n\n    /**\n     * Creates an instance of AccountKeyPublic.\n     * @param {string} publicKey - a public key\n     */\n    constructor(publicKey) {\n        this.publicKey = publicKey\n    }\n\n    /**\n     * @type {string}\n     */\n    get publicKey() {\n        return this._publicKey\n    }\n\n    set publicKey(p) {\n        if (!utils.isValidPublicKey(p)) throw new Error(`Invalid public key: ${p}`)\n        this._publicKey = utils.addHexPrefix(p)\n    }\n\n    /**\n     * Returns an RLP-encoded AccountKeyPublic string.\n     * @return {string}\n     */\n    getRLPEncoding() {\n        const compressedPublicKey = utils.compressPublicKey(this.publicKey)\n        return ACCOUNT_KEY_TAG.ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\n    }\n\n    /**\n     * Returns the x and y coordinates of publicKey.\n     * @return {Array.<string>}\n     */\n    getXYPoint() {\n        return utils.xyPointFromPublicKey(this.publicKey)\n    }\n}\n\nmodule.exports = AccountKeyPublic\n"]},"metadata":{},"sourceType":"script"}