{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst utils = require('../../../caver-utils');\n\nconst emptySigArray = ['0x01', '0x', '0x'];\n/**\n * Representing a SignatureData class that includes ECDSA signature data string.\n * @class\n */\n\nclass SignatureData {\n  /**\n   * creates a SignatureData.\n   * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\n   */\n  constructor(signature) {\n    if (!signature) signature = emptySigArray;\n\n    if (signature instanceof SignatureData) {\n      this.v = signature.v;\n      this.r = signature.r;\n      this.s = signature.s;\n    }\n\n    if (!_.isArray(signature)) signature = utils.resolveSignature(signature);\n    const [v, r, s] = signature;\n    this.v = v;\n    this.r = r;\n    this.s = s;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get v() {\n    return this._v;\n  }\n\n  set v(v) {\n    this._v = utils.makeEven(v);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get V() {\n    return this.v;\n  }\n\n  set V(v) {\n    this.v = v;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get r() {\n    return this._r;\n  }\n\n  set r(r) {\n    this._r = utils.makeEven(r);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get R() {\n    return this.r;\n  }\n\n  set R(r) {\n    this.r = r;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get s() {\n    return this._s;\n  }\n\n  set s(s) {\n    this._s = utils.makeEven(s);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get S() {\n    return this.s;\n  }\n\n  set S(s) {\n    this.s = s;\n  }\n  /**\n   * Return `true` if signature is same with emptySig.\n   *\n   * @return {boolean}\n   */\n\n\n  isEmpty() {\n    if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true;\n    return false;\n  }\n  /**\n   * Convert to array and return\n   *\n   * @return {Array.<string>}\n   */\n\n\n  encode() {\n    return [this.v, this.r, this.s];\n  }\n  /**\n   * Convert to string\n   *\n   * @return {string}\n   */\n\n\n  toString() {\n    return this.v + this.r + this.s;\n  }\n\n}\n\nSignatureData.emtpySig = new SignatureData(emptySigArray);\nmodule.exports = SignatureData;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-wallet/src/keyring/signatureData.js"],"names":["_","require","utils","emptySigArray","SignatureData","constructor","signature","v","r","s","isArray","resolveSignature","_v","makeEven","V","_r","R","_s","S","isEmpty","encode","toString","emtpySig","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst utils = require('../../../caver-utils')\n\nconst emptySigArray = ['0x01', '0x', '0x']\n\n/**\n * Representing a SignatureData class that includes ECDSA signature data string.\n * @class\n */\nclass SignatureData {\n    /**\n     * creates a SignatureData.\n     * @param {Array.<string>|SignatureData} key - The ECDSA signatureData\n     */\n    constructor(signature) {\n        if (!signature) signature = emptySigArray\n        if (signature instanceof SignatureData) {\n            this.v = signature.v\n            this.r = signature.r\n            this.s = signature.s\n        }\n        if (!_.isArray(signature)) signature = utils.resolveSignature(signature)\n\n        const [v, r, s] = signature\n        this.v = v\n        this.r = r\n        this.s = s\n    }\n\n    /**\n     * @type {string}\n     */\n    get v() {\n        return this._v\n    }\n\n    set v(v) {\n        this._v = utils.makeEven(v)\n    }\n\n    /**\n     * @type {string}\n     */\n    get V() {\n        return this.v\n    }\n\n    set V(v) {\n        this.v = v\n    }\n\n    /**\n     * @type {string}\n     */\n    get r() {\n        return this._r\n    }\n\n    set r(r) {\n        this._r = utils.makeEven(r)\n    }\n\n    /**\n     * @type {string}\n     */\n    get R() {\n        return this.r\n    }\n\n    set R(r) {\n        this.r = r\n    }\n\n    /**\n     * @type {string}\n     */\n    get s() {\n        return this._s\n    }\n\n    set s(s) {\n        this._s = utils.makeEven(s)\n    }\n\n    /**\n     * @type {string}\n     */\n    get S() {\n        return this.s\n    }\n\n    set S(s) {\n        this.s = s\n    }\n\n    /**\n     * Return `true` if signature is same with emptySig.\n     *\n     * @return {boolean}\n     */\n    isEmpty() {\n        if (this.v === '0x01' && this.r === '0x' && this.s === '0x') return true\n        return false\n    }\n\n    /**\n     * Convert to array and return\n     *\n     * @return {Array.<string>}\n     */\n    encode() {\n        return [this.v, this.r, this.s]\n    }\n\n    /**\n     * Convert to string\n     *\n     * @return {string}\n     */\n    toString() {\n        return this.v + this.r + this.s\n    }\n}\n\nSignatureData.emtpySig = new SignatureData(emptySigArray)\n\nmodule.exports = SignatureData\n"]},"metadata":{},"sourceType":"script"}