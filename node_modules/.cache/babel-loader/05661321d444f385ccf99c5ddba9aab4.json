{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BaseKIP7 = require('./kip7');\n\nconst BaseKIP17 = require('./kip17');\n\nconst KIP37 = require('./kip37');\n\nconst KIP13 = require('./kip13');\n\nconst core = require('../../caver-core');\n\nconst {\n  validateDeployParameterForKIP7,\n  validateDeployParameterForKIP17,\n  kip7ByteCode,\n  kip17ByteCode\n} = require('./kctHelper');\n\nclass KCT {\n  constructor(...args) {\n    const _this = this; // sets _requestmanager\n\n\n    core.packageInit(this, args); // overwrite package setRequestManager\n\n    const setRequestManager = this.setRequestManager;\n\n    this.setRequestManager = function (manager) {\n      setRequestManager(manager);\n      _this.kip7._requestManager = _this._requestManager;\n      _this.kip7.currentProvider = _this._provider;\n      _this.kip17._requestManager = _this._requestManager;\n      _this.kip17.currentProvider = _this._provider;\n      _this.kip37._requestManager = _this._requestManager;\n      _this.kip37.currentProvider = _this._provider;\n      return true;\n    }; // overwrite setProvider\n\n\n    const setProvider = this.setProvider;\n\n    this.setProvider = function () {\n      setProvider.apply(_this, arguments);\n\n      _this.setRequestManager(_this._requestManager);\n    }; // Define KIP7 class for caver-kct\n    // In this class, keyrings will be used instead of accounts\n\n\n    class KIP7 extends BaseKIP7 {\n      /**\n       * Creates an instance of KIP7.\n       * @method create\n       * @param {string} tokenAddress - The KIP-7 token contract address.\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n       * @return {object}\n       */\n      static create(tokenAddress, abi) {\n        return new KIP7(tokenAddress, abi);\n      }\n      /**\n       * deploy deploys a KIP-7 token contract to Klaytn network.\n       * The KIP7 instance deployed and returned through this function uses the keyringContainer instead of accounts.\n       * @method deploy\n       * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n       * @param {Object|String} sendOptions The address of the account to deploy the KIP-7 token contract or an object holding parameters that are required for sending a transaction.\n       * @param {IWallet} wallet The wallet instance to sign and send a transaction.\n       * @return {object}\n       */\n\n\n      static deploy(tokenInfo, sendOptions, wallet) {\n        validateDeployParameterForKIP7(tokenInfo);\n        const {\n          name,\n          symbol,\n          decimals,\n          initialSupply\n        } = tokenInfo;\n        const kip7 = new KIP7();\n        if (wallet !== undefined) kip7.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n        if (_.isString(sendOptions)) sendOptions = {\n          from: sendOptions,\n          gas: 4000000,\n          value: 0\n        };\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000;\n        return kip7.deploy({\n          data: kip7ByteCode,\n          arguments: [name, symbol, decimals, initialSupply]\n        }).send(sendOptions);\n      }\n      /**\n       * Wrapping class of the KIP7.\n       * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n       *\n       * @constructor\n       * @param {string} tokenAddress - The KIP-7 token contract address.\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n       */\n\n\n      constructor(tokenAddress, abi) {\n        super(tokenAddress, abi);\n        const self = this; // eslint-disable-line no-shadow\n\n        const setRequestManager = _this.setRequestManager; // eslint-disable-line no-shadow\n\n        _this.setRequestManager = function () {\n          setRequestManager.apply(_this, arguments);\n          core.packageInit(self, [_this]);\n        };\n\n        this.setWallet(args[0].wallet);\n      }\n\n    }\n\n    this.kip7 = KIP7; // Define KIP17 class for caver-kct\n    // In this class, keyrings will be used instead of accounts\n\n    class KIP17 extends BaseKIP17 {\n      /**\n       * Creates an instance of KIP17.\n       * @method create\n       * @param {string} tokenAddress - The KIP-17 token contract address.\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n       * @return {object}\n       */\n      static create(tokenAddress, abi) {\n        return new KIP17(tokenAddress, abi);\n      }\n      /**\n       * deploy deploys a KIP-17 token contract to Klaytn network.\n       * The KIP17 instance deployed and returned through this function uses the keyringContainer instead of accounts.\n       * @method deploy\n       * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n       * @param {Object|String} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\n       * @param {IWallet} wallet The wallet instance to sign and send a transaction.\n       * @return {object}\n       */\n\n\n      static deploy(tokenInfo, sendOptions, wallet) {\n        validateDeployParameterForKIP17(tokenInfo);\n        const {\n          name,\n          symbol\n        } = tokenInfo;\n        const kip17 = new KIP17();\n        if (wallet !== undefined) kip17.setWallet(wallet); // If sendOptions is string type, sendOptions means deployer's address\n\n        if (_.isString(sendOptions)) sendOptions = {\n          from: sendOptions,\n          gas: 6600000,\n          value: 0\n        };\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000;\n        return kip17.deploy({\n          data: kip17ByteCode,\n          arguments: [name, symbol]\n        }).send(sendOptions);\n      }\n      /**\n       * Wrapping class of the KIP17.\n       * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n       *\n       * @constructor\n       * @param {string} tokenAddress - The KIP-17 token contract address.\n       * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n       */\n\n\n      constructor(tokenAddress, abi) {\n        super(tokenAddress, abi);\n        const self = this; // eslint-disable-line no-shadow\n\n        const setRequestManager = _this.setRequestManager; // eslint-disable-line no-shadow\n\n        _this.setRequestManager = function () {\n          setRequestManager.apply(_this, arguments);\n          core.packageInit(self, [_this]);\n        };\n\n        this.setWallet(args[0].wallet);\n      }\n\n    }\n\n    this.kip17 = KIP17;\n    this.kip37 = KIP37;\n    this.kip37.wallet = args[0].wallet;\n    this.kip37._requestManager = this._requestManager;\n    this.kip37.currentProvider = this._requestManager.provider;\n    this.kip13 = KIP13;\n    this.kip13._requestManager = this._requestManager;\n    this.kip13.currentProvider = this._requestManager.provider;\n  }\n\n}\n\nmodule.exports = KCT;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-kct/src/index.js"],"names":["_","require","BaseKIP7","BaseKIP17","KIP37","KIP13","core","validateDeployParameterForKIP7","validateDeployParameterForKIP17","kip7ByteCode","kip17ByteCode","KCT","constructor","args","_this","packageInit","setRequestManager","manager","kip7","_requestManager","currentProvider","_provider","kip17","kip37","setProvider","apply","arguments","KIP7","create","tokenAddress","abi","deploy","tokenInfo","sendOptions","wallet","name","symbol","decimals","initialSupply","undefined","setWallet","isString","from","gas","value","data","send","self","KIP17","provider","kip13","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BaseKIP7 = require('./kip7')\nconst BaseKIP17 = require('./kip17')\nconst KIP37 = require('./kip37')\nconst KIP13 = require('./kip13')\nconst core = require('../../caver-core')\nconst { validateDeployParameterForKIP7, validateDeployParameterForKIP17, kip7ByteCode, kip17ByteCode } = require('./kctHelper')\n\nclass KCT {\n    constructor(...args) {\n        const _this = this\n\n        // sets _requestmanager\n        core.packageInit(this, args)\n\n        // overwrite package setRequestManager\n        const setRequestManager = this.setRequestManager\n        this.setRequestManager = function(manager) {\n            setRequestManager(manager)\n\n            _this.kip7._requestManager = _this._requestManager\n            _this.kip7.currentProvider = _this._provider\n            _this.kip17._requestManager = _this._requestManager\n            _this.kip17.currentProvider = _this._provider\n            _this.kip37._requestManager = _this._requestManager\n            _this.kip37.currentProvider = _this._provider\n\n            return true\n        }\n\n        // overwrite setProvider\n        const setProvider = this.setProvider\n        this.setProvider = function() {\n            setProvider.apply(_this, arguments)\n            _this.setRequestManager(_this._requestManager)\n        }\n\n        // Define KIP7 class for caver-kct\n        // In this class, keyrings will be used instead of accounts\n        class KIP7 extends BaseKIP7 {\n            /**\n             * Creates an instance of KIP7.\n             * @method create\n             * @param {string} tokenAddress - The KIP-7 token contract address.\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n             * @return {object}\n             */\n            static create(tokenAddress, abi) {\n                return new KIP7(tokenAddress, abi)\n            }\n\n            /**\n             * deploy deploys a KIP-7 token contract to Klaytn network.\n             * The KIP7 instance deployed and returned through this function uses the keyringContainer instead of accounts.\n             * @method deploy\n             * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n             * @param {Object|String} sendOptions The address of the account to deploy the KIP-7 token contract or an object holding parameters that are required for sending a transaction.\n             * @param {IWallet} wallet The wallet instance to sign and send a transaction.\n             * @return {object}\n             */\n            static deploy(tokenInfo, sendOptions, wallet) {\n                validateDeployParameterForKIP7(tokenInfo)\n\n                const { name, symbol, decimals, initialSupply } = tokenInfo\n                const kip7 = new KIP7()\n                if (wallet !== undefined) kip7.setWallet(wallet)\n\n                // If sendOptions is string type, sendOptions means deployer's address\n                if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 4000000, value: 0 }\n                sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000\n\n                return kip7\n                    .deploy({\n                        data: kip7ByteCode,\n                        arguments: [name, symbol, decimals, initialSupply],\n                    })\n                    .send(sendOptions)\n            }\n\n            /**\n             * Wrapping class of the KIP7.\n             * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n             *\n             * @constructor\n             * @param {string} tokenAddress - The KIP-7 token contract address.\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n             */\n            constructor(tokenAddress, abi) {\n                super(tokenAddress, abi)\n                const self = this // eslint-disable-line no-shadow\n                const setRequestManager = _this.setRequestManager // eslint-disable-line no-shadow\n                _this.setRequestManager = function() {\n                    setRequestManager.apply(_this, arguments)\n                    core.packageInit(self, [_this])\n                }\n\n                this.setWallet(args[0].wallet)\n            }\n        }\n\n        this.kip7 = KIP7\n\n        // Define KIP17 class for caver-kct\n        // In this class, keyrings will be used instead of accounts\n        class KIP17 extends BaseKIP17 {\n            /**\n             * Creates an instance of KIP17.\n             * @method create\n             * @param {string} tokenAddress - The KIP-17 token contract address.\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n             * @return {object}\n             */\n            static create(tokenAddress, abi) {\n                return new KIP17(tokenAddress, abi)\n            }\n\n            /**\n             * deploy deploys a KIP-17 token contract to Klaytn network.\n             * The KIP17 instance deployed and returned through this function uses the keyringContainer instead of accounts.\n             * @method deploy\n             * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n             * @param {Object|String} sendOptions The address of the account to deploy the KIP-17 token contract or an object holding parameters that are required for sending a transaction.\n             * @param {IWallet} wallet The wallet instance to sign and send a transaction.\n             * @return {object}\n             */\n            static deploy(tokenInfo, sendOptions, wallet) {\n                validateDeployParameterForKIP17(tokenInfo)\n\n                const { name, symbol } = tokenInfo\n                const kip17 = new KIP17()\n                if (wallet !== undefined) kip17.setWallet(wallet)\n\n                // If sendOptions is string type, sendOptions means deployer's address\n                if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 6600000, value: 0 }\n                sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 6600000\n\n                return kip17\n                    .deploy({\n                        data: kip17ByteCode,\n                        arguments: [name, symbol],\n                    })\n                    .send(sendOptions)\n            }\n\n            /**\n             * Wrapping class of the KIP17.\n             * In this constructor, call `setWallet` with keyringContainer to use keyringContainer instead of accounts.\n             *\n             * @constructor\n             * @param {string} tokenAddress - The KIP-17 token contract address.\n             * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-17.\n             */\n            constructor(tokenAddress, abi) {\n                super(tokenAddress, abi)\n                const self = this // eslint-disable-line no-shadow\n                const setRequestManager = _this.setRequestManager // eslint-disable-line no-shadow\n                _this.setRequestManager = function() {\n                    setRequestManager.apply(_this, arguments)\n                    core.packageInit(self, [_this])\n                }\n\n                this.setWallet(args[0].wallet)\n            }\n        }\n\n        this.kip17 = KIP17\n\n        this.kip37 = KIP37\n        this.kip37.wallet = args[0].wallet\n        this.kip37._requestManager = this._requestManager\n        this.kip37.currentProvider = this._requestManager.provider\n\n        this.kip13 = KIP13\n        this.kip13._requestManager = this._requestManager\n        this.kip13.currentProvider = this._requestManager.provider\n    }\n}\n\nmodule.exports = KCT\n"]},"metadata":{},"sourceType":"script"}