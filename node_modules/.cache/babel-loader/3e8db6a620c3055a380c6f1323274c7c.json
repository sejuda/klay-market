{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst toIterator = require('pull-stream-to-async-iterator');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst blobToAsyncIterable = require('../lib/blob-to-async-iterable');\n/*\nTransform one of:\n\nBuffer|ArrayBuffer|TypedArray\nBlob|File\nIterable<Number>\nAsyncIterable<Buffer>\nPullStream<Buffer>\n\nInto:\n\nAsyncIterable<Buffer>\n*/\n\n\nmodule.exports = function toAsyncIterable(input) {\n  // Buffer|ArrayBuffer|TypedArray|array of bytes\n  if (input[Symbol.iterator]) {\n    const buf = Buffer.from(input);\n    return Object.assign(async function* () {\n      yield buf;\n    }(), // eslint-disable-line require-await\n    {\n      length: buf.length\n    });\n  } // Blob|File\n\n\n  if (typeof Blob !== 'undefined' && input instanceof Blob) {\n    return Object.assign(blobToAsyncIterable(input), {\n      length: input.size\n    });\n  } // AsyncIterable<Buffer>\n\n\n  if (input[Symbol.asyncIterator]) {\n    return async function* () {\n      for await (const chunk of input) {\n        yield Buffer.from(chunk);\n      }\n    }();\n  } // PullStream\n\n\n  if (typeof input === 'function') {\n    return toIterator(input);\n  }\n\n  throw new Error('Unexpected input: ' + typeof input);\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/ipfs-http-client-lite/src/lib/file-data-to-async-iterable.js"],"names":["toIterator","require","Buffer","blobToAsyncIterable","module","exports","toAsyncIterable","input","Symbol","iterator","buf","from","Object","assign","length","Blob","size","asyncIterator","chunk","Error"],"mappings":"AAAA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,+BAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAME,mBAAmB,GAAGF,OAAO,CAAC,+BAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAChD;AACA,MAAIA,KAAK,CAACC,MAAM,CAACC,QAAR,CAAT,EAA4B;AAC1B,UAAMC,GAAG,GAAGR,MAAM,CAACS,IAAP,CAAYJ,KAAZ,CAAZ;AACA,WAAOK,MAAM,CAACC,MAAP,CACJ,mBAAoB;AAAE,YAAMH,GAAN;AAAW,KAAlC,EADK,EACkC;AACvC;AAAEI,MAAAA,MAAM,EAAEJ,GAAG,CAACI;AAAd,KAFK,CAAP;AAID,GAR+C,CAUhD;;;AACA,MAAI,OAAOC,IAAP,KAAgB,WAAhB,IAA+BR,KAAK,YAAYQ,IAApD,EAA0D;AACxD,WAAOH,MAAM,CAACC,MAAP,CACLV,mBAAmB,CAACI,KAAD,CADd,EAEL;AAAEO,MAAAA,MAAM,EAAEP,KAAK,CAACS;AAAhB,KAFK,CAAP;AAID,GAhB+C,CAkBhD;;;AACA,MAAIT,KAAK,CAACC,MAAM,CAACS,aAAR,CAAT,EAAiC;AAC/B,WAAQ,mBAAoB;AAC1B,iBAAW,MAAMC,KAAjB,IAA0BX,KAA1B,EAAiC;AAC/B,cAAML,MAAM,CAACS,IAAP,CAAYO,KAAZ,CAAN;AACD;AACF,KAJM,EAAP;AAKD,GAzB+C,CA2BhD;;;AACA,MAAI,OAAOX,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAOP,UAAU,CAACO,KAAD,CAAjB;AACD;;AAED,QAAM,IAAIY,KAAJ,CAAU,uBAAuB,OAAOZ,KAAxC,CAAN;AACD,CAjCD","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst toIterator = require('pull-stream-to-async-iterator')\nconst { Buffer } = require('buffer')\nconst blobToAsyncIterable = require('../lib/blob-to-async-iterable')\n\n/*\nTransform one of:\n\nBuffer|ArrayBuffer|TypedArray\nBlob|File\nIterable<Number>\nAsyncIterable<Buffer>\nPullStream<Buffer>\n\nInto:\n\nAsyncIterable<Buffer>\n*/\nmodule.exports = function toAsyncIterable (input) {\n  // Buffer|ArrayBuffer|TypedArray|array of bytes\n  if (input[Symbol.iterator]) {\n    const buf = Buffer.from(input)\n    return Object.assign(\n      (async function * () { yield buf })(), // eslint-disable-line require-await\n      { length: buf.length }\n    )\n  }\n\n  // Blob|File\n  if (typeof Blob !== 'undefined' && input instanceof Blob) {\n    return Object.assign(\n      blobToAsyncIterable(input),\n      { length: input.size }\n    )\n  }\n\n  // AsyncIterable<Buffer>\n  if (input[Symbol.asyncIterator]) {\n    return (async function * () {\n      for await (const chunk of input) {\n        yield Buffer.from(chunk)\n      }\n    })()\n  }\n\n  // PullStream\n  if (typeof input === 'function') {\n    return toIterator(input)\n  }\n\n  throw new Error('Unexpected input: ' + typeof input)\n}\n"]},"metadata":{},"sourceType":"script"}