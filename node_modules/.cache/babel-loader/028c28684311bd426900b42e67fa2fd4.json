{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst BigNumber = require('bignumber.js');\n\nconst Contract = require('../../caver-contract');\n\nconst {\n  validateDeployParameterForKIP7,\n  determineSendParams,\n  kip7JsonInterface,\n  kip7ByteCode,\n  formatParamForUint256,\n  interfaceIds\n} = require('./kctHelper');\n\nconst {\n  isAddress,\n  toBuffer,\n  isHexStrict,\n  toHex\n} = require('../../caver-utils');\n\nconst KIP13 = require('../src/kip13');\n\nclass KIP7 extends Contract {\n  /**\n   * deploy deploys a KIP-7 token contract to Klaytn network.\n   * `const deployedContract = await caver.kct.kip7.deploy({\n   *      name: 'TokenName',\n   *      symbol: 'TKN',\n   *      decimals: 18,\n   *      initialSupply: new BigNumber(1000000000000000000),\n   *  }, '0x{address in hex}')`\n   *\n   * @method deploy\n   * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n   * @param {Object|String} sendOptions The address of the account to deploy the KIP-7 token contract or an object holding parameters that are required for sending a transaction.\n   * @return {Object}\n   */\n  static deploy(tokenInfo, sendOptions) {\n    validateDeployParameterForKIP7(tokenInfo);\n    const {\n      name,\n      symbol,\n      decimals,\n      initialSupply\n    } = tokenInfo;\n    const kip7 = new KIP7(); // If sendOptions is string type, sendOptions means deployer's address\n\n    if (_.isString(sendOptions)) sendOptions = {\n      from: sendOptions,\n      gas: 4000000,\n      value: 0\n    };\n    sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000;\n    return kip7.deploy({\n      data: kip7ByteCode,\n      arguments: [name, symbol, decimals, initialSupply]\n    }).send(sendOptions);\n  }\n  /**\n   * detectInterface detects which interface the KIP-7 token contract supports.\n   *\n   * @method detectInterface\n   * @param {string} contractAddress The address of the KIP-7 token contract to detect.\n   * @return {object}\n   */\n\n\n  static detectInterface(contractAddress) {\n    const kip7 = new KIP7(contractAddress);\n    return kip7.detectInterface();\n  }\n  /**\n   * KIP7 class represents the KIP-7 token contract.\n   *\n   * @constructor\n   * @param {string} tokenAddress - The KIP-7 token contract address.\n   * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n   */\n\n\n  constructor(tokenAddress, abi = kip7JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`);\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n  /**\n   * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n   *\n   * @method clone\n   * @param {String} tokenAddress The address of the token contract.\n   * @return {Object}\n   */\n\n\n  clone(tokenAddress = this.options.address) {\n    const cloned = new this.constructor(tokenAddress, this.options.jsonInterface);\n    cloned.setWallet(this._wallet);\n    return cloned;\n  }\n  /**\n   * detectInterface detects which interface the KIP-7 token contract supports.\n   *\n   * @method detectInterface\n   * @return {object}\n   */\n\n\n  async detectInterface() {\n    const detected = {\n      IKIP7: false,\n      IKIP7Metadata: false,\n      IKIP7Mintable: false,\n      IKIP7Burnable: false,\n      IKIP7Pausable: false\n    };\n    const notSupportedMsg = `This contract does not support KIP-13.`;\n    const contractAddress = this._address;\n\n    try {\n      const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress);\n      if (isSupported !== true) throw new Error(notSupportedMsg); // Since there is an extension that has the same interface id even though it is a different KCT,\n      // it must be checked first whether the contract is a KIP-7 contract.\n\n      detected.IKIP7 = await this.supportsInterface(interfaceIds.kip7.IKIP7);\n      if (detected.IKIP7 === false) return detected;\n      await Promise.all(Object.keys(interfaceIds.kip7).map(async interfaceName => {\n        if (interfaceIds.kip7[interfaceName] !== interfaceIds.kip7.IKIP7) detected[interfaceName] = await this.supportsInterface(interfaceIds.kip7[interfaceName]);\n      }));\n      return detected;\n    } catch (e) {\n      throw new Error(notSupportedMsg);\n    }\n  }\n  /**\n   * supportsInterface checks whether interface is supported or not.\n   *\n   * @method supportsInterface\n   * @param {string} interfaceId The interface id to check.\n   * @return {boolean}\n   */\n\n\n  async supportsInterface(interfaceId) {\n    const supported = await this.methods.supportsInterface(interfaceId).call();\n    return supported;\n  }\n  /**\n   * name returns the name of the token.\n   *\n   * @method name\n   * @return {String}\n   */\n\n\n  async name() {\n    const name = await this.methods.name().call();\n    return name;\n  }\n  /**\n   * symbol returns the symbol of the token.\n   *\n   * @method symbol\n   * @return {String}\n   */\n\n\n  async symbol() {\n    const symbol = await this.methods.symbol().call();\n    return symbol;\n  }\n  /**\n   * decimals returns the decimals of the token.\n   *\n   * @method symbol\n   * @return {Number}\n   */\n\n\n  async decimals() {\n    const decimals = await this.methods.decimals().call();\n    return Number(decimals);\n  }\n  /**\n   * totalSupply returns the total supply of the token.\n   *\n   * @method totalSupply\n   * @return {BigNumber}\n   */\n\n\n  async totalSupply() {\n    const totalSupply = await this.methods.totalSupply().call();\n    return new BigNumber(totalSupply);\n  }\n  /**\n   * balanceOf returns the balance of the account.\n   *\n   * @method balanceOf\n   * @param {String} account The address of the account for which you want to see balance.\n   * @return {BigNumber}\n   */\n\n\n  async balanceOf(account) {\n    const balance = await this.methods.balanceOf(account).call();\n    return new BigNumber(balance);\n  }\n  /**\n   * allowance returns the amount the spender is allowed to use on behalf of the owner.\n   *\n   * @method allowance\n   * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n   * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n   * @return {BigNumber}\n   */\n\n\n  async allowance(owner, spender) {\n    const allowance = await this.methods.allowance(owner, spender).call();\n    return new BigNumber(allowance);\n  }\n  /**\n   * isMinter returns whether the account is minter or not.\n   *\n   * @method isMinter\n   * @param {String} account The address of the account you want to check minter or not.\n   * @return {Boolean}\n   */\n\n\n  async isMinter(account) {\n    const isMinter = await this.methods.isMinter(account).call();\n    return isMinter;\n  }\n  /**\n   * isPauser returns whether the account is pauser or not.\n   *\n   * @method isPauser\n   * @param {String} account The address of the account you want to check pauser or not.\n   * @return {Boolean}\n   */\n\n\n  async isPauser(account) {\n    const isPauser = await this.methods.isPauser(account).call();\n    return isPauser;\n  }\n  /**\n   * paused returns whether or not the token contract's transaction is paused.\n   *\n   * @method paused\n   * @return {Boolean}\n   */\n\n\n  async paused() {\n    const isPaused = await this.methods.paused().call();\n    return isPaused;\n  }\n  /**\n   * approve sets amount as the allowance of spender over the caller’s tokens.\n   *\n   * @method approve\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async approve(spender, amount, sendParam = {}) {\n    const executableObj = this.methods.approve(spender, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * transfer moves amount tokens from the caller’s account to recipient.\n   *\n   * @method transfer\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async transfer(recipient, amount, sendParam = {}) {\n    const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n   * amount is then deducted from the caller’s allowance.\n   *\n   * @method transferFrom\n   * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async transferFrom(sender, recipient, amount, sendParam = {}) {\n    const executableObj = this.methods.transferFrom(sender, recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * safeTransfer safely transfers tokens to another address.\n   *\n   * @method safeTransfer\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|String|Number} [data] The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async safeTransfer(recipient, amount, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`);\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data) : this.methods.safeTransfer(recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * safeTransferFrom safely transfers tokens to another address.\n   *\n   * @method safeTransferFrom\n   * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async safeTransferFrom(sender, recipient, amount, data, sendParam = {}) {\n    if (data && _.isObject(data)) {\n      if (data.gas !== undefined || data.from !== undefined) {\n        if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`);\n        sendParam = data;\n        data = undefined;\n      }\n    }\n\n    if (data && !_.isBuffer(data)) {\n      if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n      data = toBuffer(data);\n    }\n\n    const executableObj = data ? this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data) : this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * mint creates amount tokens and assigns them to account, increasing the total supply.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method mint\n   * @param {String} account The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async mint(account, amount, sendParam = {}) {\n    const executableObj = this.methods.mint(account, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method addMinter\n   * @param {String} account The address of account to add as minter.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async addMinter(account, sendParam = {}) {\n    const executableObj = this.methods.addMinter(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renounceMinter renounces privilege of MinterRole.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @method renounceMinter\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async renounceMinter(sendParam = {}) {\n    const executableObj = this.methods.renounceMinter();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * burn destroys amount tokens from the caller.\n   *\n   * @method burn\n   * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burn(amount, sendParam = {}) {\n    const executableObj = this.methods.burn(formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n   *\n   * @method burnFrom\n   * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n   * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async burnFrom(account, amount, sendParam = {}) {\n    const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount));\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @method addPauser\n   * @param {String} account The address of account to add as pauser.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async addPauser(account, sendParam = {}) {\n    const executableObj = this.methods.addPauser(account);\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * pause triggers stopped state that stops sending tokens in emergency situation.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @method pause\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async pause(sendParam = {}) {\n    const executableObj = this.methods.pause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * unpause sets amount as the allowance of spender over the caller’s tokens.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @method unpause\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async unpause(sendParam = {}) {\n    const executableObj = this.methods.unpause();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n  /**\n   * renouncePauser renounces privilege of PauserRole.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @method renouncePauser\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  async renouncePauser(sendParam = {}) {\n    const executableObj = this.methods.renouncePauser();\n    sendParam = await determineSendParams(executableObj, sendParam, this.options);\n    return executableObj.send(sendParam);\n  }\n\n}\n\nKIP7.byteCode = kip7ByteCode;\nmodule.exports = KIP7;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-kct/src/kip7.js"],"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP7","determineSendParams","kip7JsonInterface","kip7ByteCode","formatParamForUint256","interfaceIds","isAddress","toBuffer","isHexStrict","toHex","KIP13","KIP7","deploy","tokenInfo","sendOptions","name","symbol","decimals","initialSupply","kip7","isString","from","gas","value","undefined","data","arguments","send","detectInterface","contractAddress","constructor","tokenAddress","abi","Error","clone","options","address","cloned","jsonInterface","setWallet","_wallet","detected","IKIP7","IKIP7Metadata","IKIP7Mintable","IKIP7Burnable","IKIP7Pausable","notSupportedMsg","_address","isSupported","isImplementedKIP13Interface","supportsInterface","Promise","all","Object","keys","map","interfaceName","e","interfaceId","supported","methods","call","Number","totalSupply","balanceOf","account","balance","allowance","owner","spender","isMinter","isPauser","paused","isPaused","approve","amount","sendParam","executableObj","transfer","recipient","transferFrom","sender","safeTransfer","isObject","length","isBuffer","safeTransferFrom","mint","addMinter","renounceMinter","burn","burnFrom","addPauser","pause","unpause","renouncePauser","byteCode","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BigNumber = require('bignumber.js')\n\nconst Contract = require('../../caver-contract')\nconst {\n    validateDeployParameterForKIP7,\n    determineSendParams,\n    kip7JsonInterface,\n    kip7ByteCode,\n    formatParamForUint256,\n    interfaceIds,\n} = require('./kctHelper')\nconst { isAddress, toBuffer, isHexStrict, toHex } = require('../../caver-utils')\nconst KIP13 = require('../src/kip13')\n\nclass KIP7 extends Contract {\n    /**\n     * deploy deploys a KIP-7 token contract to Klaytn network.\n     * `const deployedContract = await caver.kct.kip7.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *      decimals: 18,\n     *      initialSupply: new BigNumber(1000000000000000000),\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n     * @param {Object|String} sendOptions The address of the account to deploy the KIP-7 token contract or an object holding parameters that are required for sending a transaction.\n     * @return {Object}\n     */\n    static deploy(tokenInfo, sendOptions) {\n        validateDeployParameterForKIP7(tokenInfo)\n\n        const { name, symbol, decimals, initialSupply } = tokenInfo\n        const kip7 = new KIP7()\n\n        // If sendOptions is string type, sendOptions means deployer's address\n        if (_.isString(sendOptions)) sendOptions = { from: sendOptions, gas: 4000000, value: 0 }\n        sendOptions.gas = sendOptions.gas !== undefined ? sendOptions.gas : 4000000\n\n        return kip7\n            .deploy({\n                data: kip7ByteCode,\n                arguments: [name, symbol, decimals, initialSupply],\n            })\n            .send(sendOptions)\n    }\n\n    /**\n     * detectInterface detects which interface the KIP-7 token contract supports.\n     *\n     * @method detectInterface\n     * @param {string} contractAddress The address of the KIP-7 token contract to detect.\n     * @return {object}\n     */\n    static detectInterface(contractAddress) {\n        const kip7 = new KIP7(contractAddress)\n        return kip7.detectInterface()\n    }\n\n    /**\n     * KIP7 class represents the KIP-7 token contract.\n     *\n     * @constructor\n     * @param {string} tokenAddress - The KIP-7 token contract address.\n     * @param {Array} [abi] - The Contract Application Binary Interface (ABI) of the KIP-7.\n     */\n    constructor(tokenAddress, abi = kip7JsonInterface) {\n        if (tokenAddress) {\n            if (_.isString(tokenAddress)) {\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\n            } else {\n                abi = tokenAddress\n                tokenAddress = undefined\n            }\n        }\n\n        super(abi, tokenAddress)\n    }\n\n    /**\n     * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n     *\n     * @method clone\n     * @param {String} tokenAddress The address of the token contract.\n     * @return {Object}\n     */\n    clone(tokenAddress = this.options.address) {\n        const cloned = new this.constructor(tokenAddress, this.options.jsonInterface)\n        cloned.setWallet(this._wallet)\n        return cloned\n    }\n\n    /**\n     * detectInterface detects which interface the KIP-7 token contract supports.\n     *\n     * @method detectInterface\n     * @return {object}\n     */\n    async detectInterface() {\n        const detected = {\n            IKIP7: false,\n            IKIP7Metadata: false,\n            IKIP7Mintable: false,\n            IKIP7Burnable: false,\n            IKIP7Pausable: false,\n        }\n\n        const notSupportedMsg = `This contract does not support KIP-13.`\n        const contractAddress = this._address\n\n        try {\n            const isSupported = await KIP13.isImplementedKIP13Interface(contractAddress)\n            if (isSupported !== true) throw new Error(notSupportedMsg)\n\n            // Since there is an extension that has the same interface id even though it is a different KCT,\n            // it must be checked first whether the contract is a KIP-7 contract.\n            detected.IKIP7 = await this.supportsInterface(interfaceIds.kip7.IKIP7)\n            if (detected.IKIP7 === false) return detected\n\n            await Promise.all(\n                Object.keys(interfaceIds.kip7).map(async interfaceName => {\n                    if (interfaceIds.kip7[interfaceName] !== interfaceIds.kip7.IKIP7)\n                        detected[interfaceName] = await this.supportsInterface(interfaceIds.kip7[interfaceName])\n                })\n            )\n            return detected\n        } catch (e) {\n            throw new Error(notSupportedMsg)\n        }\n    }\n\n    /**\n     * supportsInterface checks whether interface is supported or not.\n     *\n     * @method supportsInterface\n     * @param {string} interfaceId The interface id to check.\n     * @return {boolean}\n     */\n    async supportsInterface(interfaceId) {\n        const supported = await this.methods.supportsInterface(interfaceId).call()\n        return supported\n    }\n\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n    async name() {\n        const name = await this.methods.name().call()\n        return name\n    }\n\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n    async symbol() {\n        const symbol = await this.methods.symbol().call()\n        return symbol\n    }\n\n    /**\n     * decimals returns the decimals of the token.\n     *\n     * @method symbol\n     * @return {Number}\n     */\n    async decimals() {\n        const decimals = await this.methods.decimals().call()\n        return Number(decimals)\n    }\n\n    /**\n     * totalSupply returns the total supply of the token.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n    async totalSupply() {\n        const totalSupply = await this.methods.totalSupply().call()\n        return new BigNumber(totalSupply)\n    }\n\n    /**\n     * balanceOf returns the balance of the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account for which you want to see balance.\n     * @return {BigNumber}\n     */\n    async balanceOf(account) {\n        const balance = await this.methods.balanceOf(account).call()\n        return new BigNumber(balance)\n    }\n\n    /**\n     * allowance returns the amount the spender is allowed to use on behalf of the owner.\n     *\n     * @method allowance\n     * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n     * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n     * @return {BigNumber}\n     */\n    async allowance(owner, spender) {\n        const allowance = await this.methods.allowance(owner, spender).call()\n        return new BigNumber(allowance)\n    }\n\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n    async isMinter(account) {\n        const isMinter = await this.methods.isMinter(account).call()\n        return isMinter\n    }\n\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n    async isPauser(account) {\n        const isPauser = await this.methods.isPauser(account).call()\n        return isPauser\n    }\n\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n    async paused() {\n        const isPaused = await this.methods.paused().call()\n        return isPaused\n    }\n\n    /**\n     * approve sets amount as the allowance of spender over the caller’s tokens.\n     *\n     * @method approve\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async approve(spender, amount, sendParam = {}) {\n        const executableObj = this.methods.approve(spender, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transfer moves amount tokens from the caller’s account to recipient.\n     *\n     * @method transfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transfer(recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n     * amount is then deducted from the caller’s allowance.\n     *\n     * @method transferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transferFrom(sender, recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transferFrom(sender, recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransfer safely transfers tokens to another address.\n     *\n     * @method safeTransfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} [data] The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransfer(recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransfer(recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransferFrom safely transfers tokens to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransferFrom(sender, recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mint creates amount tokens and assigns them to account, increasing the total supply.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method mint\n     * @param {String} account The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async mint(account, amount, sendParam = {}) {\n        const executableObj = this.methods.mint(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addMinter(account, sendParam = {}) {\n        const executableObj = this.methods.addMinter(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renounceMinter(sendParam = {}) {\n        const executableObj = this.methods.renounceMinter()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burn destroys amount tokens from the caller.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burn(amount, sendParam = {}) {\n        const executableObj = this.methods.burn(formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n     *\n     * @method burnFrom\n     * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burnFrom(account, amount, sendParam = {}) {\n        const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addPauser(account, sendParam = {}) {\n        const executableObj = this.methods.addPauser(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async pause(sendParam = {}) {\n        const executableObj = this.methods.pause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async unpause(sendParam = {}) {\n        const executableObj = this.methods.unpause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renouncePauser(sendParam = {}) {\n        const executableObj = this.methods.renouncePauser()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options)\n\n        return executableObj.send(sendParam)\n    }\n}\n\nKIP7.byteCode = kip7ByteCode\nmodule.exports = KIP7\n"]},"metadata":{},"sourceType":"script"}