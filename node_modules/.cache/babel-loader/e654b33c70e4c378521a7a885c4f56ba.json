{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nconst Account = require('../../../../caver-account');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate)) throw new Error(`Cannot decode to FeeDelegatedAccountUpdate. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, rlpEncodedKey, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    rlpEncodedKey,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate to see more detail.\n * @class\n */\n\n\nclass FeeDelegatedAccountUpdate extends AbstractFeeDelegatedTransaction {\n  /**\n   * Creates a fee delegated account update transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @return {FeeDelegatedAccountUpdate}\n   */\n  static create(createTxObj) {\n    return new FeeDelegatedAccountUpdate(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n   * @return {FeeDelegatedAccountUpdate}\n   */\n\n\n  static decode(rlpEncoded) {\n    const decoded = _decode(rlpEncoded);\n\n    decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n    return new FeeDelegatedAccountUpdate(decoded);\n  }\n  /**\n   * Creates a fee delegated account update transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj);\n    this.account = createTxObj.account;\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  get account() {\n    return this._account;\n  }\n\n  set account(acct) {\n    if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`);\n    if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`);\n    this._account = acct;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey()]);\n  }\n\n}\n\nmodule.exports = FeeDelegatedAccountUpdate;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/accountUpdate/feeDelegatedAccountUpdate.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","Account","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedAccountUpdate","Error","typeDettached","slice","nonce","gasPrice","gas","from","rlpEncodedKey","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedAccountUpdate","create","createTxObj","decoded","account","createFromRLPEncoding","constructor","isString","_account","acct","toLowerCase","address","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getRLPEncodingAccountKey","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\nconst Account = require('../../../../caver-account')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate))\n        throw new Error(\n            `Cannot decode to FeeDelegatedAccountUpdate. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, rlpEncodedKey, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        rlpEncodedKey,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate to see more detail.\n * @class\n */\nclass FeeDelegatedAccountUpdate extends AbstractFeeDelegatedTransaction {\n    /**\n     * Creates a fee delegated account update transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @return {FeeDelegatedAccountUpdate}\n     */\n    static create(createTxObj) {\n        return new FeeDelegatedAccountUpdate(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n     * @return {FeeDelegatedAccountUpdate}\n     */\n    static decode(rlpEncoded) {\n        const decoded = _decode(rlpEncoded)\n        decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey)\n        return new FeeDelegatedAccountUpdate(decoded)\n    }\n\n    /**\n     * Creates a fee delegated account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) {\n            createTxObj = _decode(createTxObj)\n            createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey)\n        }\n\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj)\n        this.account = createTxObj.account\n    }\n\n    /**\n     * @type {Account}\n     */\n    get account() {\n        return this._account\n    }\n\n    set account(acct) {\n        if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`)\n        if (this.from.toLowerCase() !== acct.address.toLowerCase())\n            throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`)\n\n        this._account = acct\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.account.getRLPEncodingAccountKey(),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.account.getRLPEncodingAccountKey(),\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedAccountUpdate\n"]},"metadata":{},"sourceType":"script"}