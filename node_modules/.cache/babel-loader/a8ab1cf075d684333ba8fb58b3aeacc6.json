{"ast":null,"code":"import Caver from \"caver-js\";\nimport { ACCESS_KEY_ID, SECRET_ACCESS_ID, COUNT_CONTRACT_ADDRESS } from \"../constants/index\";\nimport CounterABI from \"../abi/CounterABI.json\";\nconst option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_ID).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", option));\nconst CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\nexport const readCount = async () => {\n  const _count = await CountContract.methods.count().call();\n\n  console.log(_count);\n};\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(res => {\n    const balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(res));\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};\nexport const setCount = async newCount => {\n  // 사용할 account 설정\n  try {\n    const privatekey = \"0xc95ea41f54c5fafe7086c536a4e4294a68640935472cb61c90b8067452158742\";\n    const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n    caver.wallet.add(deployer); // 스마트 컨트랙트 실행 트랜잭션 날리기\n    // 결과 확인\n\n    const receipt = await CountContract.methods.setCount(newCount).send({\n      from: deployer.address,\n      // adress\n      gas: \"0x4bfd200\" //\n\n    });\n    console.log(receipt);\n  } catch (e) {\n    console.log(`[ERROR_SET_COUNT]${e}`);\n  }\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/src/api/UseCaver.js"],"names":["Caver","ACCESS_KEY_ID","SECRET_ACCESS_ID","COUNT_CONTRACT_ADDRESS","CounterABI","option","headers","name","value","Buffer","from","toString","CHAIN_ID","caver","providers","HttpProvider","CountContract","contract","readCount","_count","methods","count","call","console","log","getBalance","address","rpc","klay","then","res","balance","utils","convertFromPeb","hexToNumberString","setCount","newCount","privatekey","deployer","wallet","keyring","createFromPrivateKey","add","receipt","send","gas","e"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACEC,aADF,EAEEC,gBAFF,EAGEC,sBAHF,QAIO,oBAJP;AAKA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,KAAK,EACH,WACAC,MAAM,CAACC,IAAP,CAAYT,aAAa,GAAG,GAAhB,GAAsBC,gBAAlC,EAAoDS,QAApD,CAA6D,QAA7D;AAJJ,GADO,EAOP;AAAEJ,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,KAAK,EAAEI;AAA7B,GAPO;AADI,CAAf;AAWA,MAAMC,KAAK,GAAG,IAAIb,KAAJ,CACZ,IAAIA,KAAK,CAACc,SAAN,CAAgBC,YAApB,CACE,0CADF,EAEEV,MAFF,CADY,CAAd;AAMA,MAAMW,aAAa,GAAG,IAAIH,KAAK,CAACI,QAAV,CAAmBb,UAAnB,EAA+BD,sBAA/B,CAAtB;AACA,OAAO,MAAMe,SAAS,GAAG,YAAY;AACnC,QAAMC,MAAM,GAAG,MAAMH,aAAa,CAACI,OAAd,CAAsBC,KAAtB,GAA8BC,IAA9B,EAArB;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACD,CAHM;AAKP,OAAO,MAAMM,UAAU,GAAIC,OAAD,IAAa;AACrC,SAAOb,KAAK,CAACc,GAAN,CAAUC,IAAV,CAAeH,UAAf,CAA0BC,OAA1B,EAAmCG,IAAnC,CAAyCC,GAAD,IAAS;AACtD,UAAMC,OAAO,GAAGlB,KAAK,CAACmB,KAAN,CAAYC,cAAZ,CACdpB,KAAK,CAACmB,KAAN,CAAYE,iBAAZ,CAA8BJ,GAA9B,CADc,CAAhB;AAGAP,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWO,OAAQ,EAAhC;AACA,WAAOA,OAAP;AACD,GANM,CAAP;AAOD,CARM;AAUP,OAAO,MAAMI,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AAC1C;AACA,MAAI;AACF,UAAMC,UAAU,GACd,oEADF;AAEA,UAAMC,QAAQ,GAAGzB,KAAK,CAAC0B,MAAN,CAAaC,OAAb,CAAqBC,oBAArB,CAA0CJ,UAA1C,CAAjB;AAEAxB,IAAAA,KAAK,CAAC0B,MAAN,CAAaG,GAAb,CAAiBJ,QAAjB,EALE,CAMF;AACA;;AAEA,UAAMK,OAAO,GAAG,MAAM3B,aAAa,CAACI,OAAd,CAAsBe,QAAtB,CAA+BC,QAA/B,EAAyCQ,IAAzC,CAA8C;AAClElC,MAAAA,IAAI,EAAE4B,QAAQ,CAACZ,OADmD;AAC1C;AACxBmB,MAAAA,GAAG,EAAE,WAF6D,CAEhD;;AAFgD,KAA9C,CAAtB;AAIAtB,IAAAA,OAAO,CAACC,GAAR,CAAYmB,OAAZ;AACD,GAdD,CAcE,OAAOG,CAAP,EAAU;AACVvB,IAAAA,OAAO,CAACC,GAAR,CAAa,oBAAmBsB,CAAE,EAAlC;AACD;AACF,CAnBM","sourcesContent":["import Caver from \"caver-js\";\nimport {\n  ACCESS_KEY_ID,\n  SECRET_ACCESS_ID,\n  COUNT_CONTRACT_ADDRESS,\n} from \"../constants/index\";\nimport CounterABI from \"../abi/CounterABI.json\";\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_ID).toString(\"base64\"),\n    },\n    { name: \"x-chain-id\", value: CHAIN_ID },\n  ],\n};\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    \"https://node-api.klaytnapi.com/v1/klaytn\",\n    option\n  )\n);\nconst CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\nexport const readCount = async () => {\n  const _count = await CountContract.methods.count().call();\n  console.log(_count);\n};\n\nexport const getBalance = (address) => {\n  return caver.rpc.klay.getBalance(address).then((res) => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(res)\n    );\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};\n\nexport const setCount = async (newCount) => {\n  // 사용할 account 설정\n  try {\n    const privatekey =\n      \"0xc95ea41f54c5fafe7086c536a4e4294a68640935472cb61c90b8067452158742\";\n    const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n\n    caver.wallet.add(deployer);\n    // 스마트 컨트랙트 실행 트랜잭션 날리기\n    // 결과 확인\n\n    const receipt = await CountContract.methods.setCount(newCount).send({\n      from: deployer.address, // adress\n      gas: \"0x4bfd200\", //\n    });\n    console.log(receipt);\n  } catch (e) {\n    console.log(`[ERROR_SET_COUNT]${e}`);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}