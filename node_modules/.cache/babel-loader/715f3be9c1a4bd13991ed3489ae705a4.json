{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-requestmanager/src/jsonrpc.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n// Initialize Jsonrpc as a simple object with utility functions.\nconst Jsonrpc = {\n  messageId: 0\n};\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\n\nJsonrpc.toPayload = function (method, params) {\n  if (!method) {\n    throw new Error(`JSONRPC method should be specified for params: \"${JSON.stringify(params)}\"!`);\n  }\n\n  Jsonrpc.messageId++;\n  return {\n    jsonrpc: '2.0',\n    id: Jsonrpc.messageId,\n    method: method,\n    params: params || []\n  };\n};\n\nJsonrpc.isValidResponse = function (response) {\n  return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n\n  function validateSingleMessage(message) {\n    return !!message && !message.error && message.jsonrpc === '2.0' && (typeof message.id === 'number' || typeof message.id === 'string') && message.result !== undefined; // only undefined is not valid json object\n  }\n};\n\nJsonrpc.toBatchPayload = function (messages) {\n  return messages.map(function (message) {\n    return Jsonrpc.toPayload(message.method, message.params);\n  });\n};\n\nmodule.exports = Jsonrpc;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-core-requestmanager/src/jsonrpc.js"],"names":["Jsonrpc","messageId","toPayload","method","params","Error","JSON","stringify","jsonrpc","id","isValidResponse","response","Array","isArray","every","validateSingleMessage","message","error","result","undefined","toBatchPayload","messages","map","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,MAAMA,OAAO,GAAG;AACZC,EAAAA,SAAS,EAAE;AADC,CAAhB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,OAAO,CAACE,SAAR,GAAoB,UAASC,MAAT,EAAiBC,MAAjB,EAAyB;AACzC,MAAI,CAACD,MAAL,EAAa;AACT,UAAM,IAAIE,KAAJ,CAAW,mDAAkDC,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAuB,IAApF,CAAN;AACH;;AAEDJ,EAAAA,OAAO,CAACC,SAAR;AAEA,SAAO;AACHO,IAAAA,OAAO,EAAE,KADN;AAEHC,IAAAA,EAAE,EAAET,OAAO,CAACC,SAFT;AAGHE,IAAAA,MAAM,EAAEA,MAHL;AAIHC,IAAAA,MAAM,EAAEA,MAAM,IAAI;AAJf,GAAP;AAMH,CAbD;;AAeAJ,OAAO,CAACU,eAAR,GAA0B,UAASC,QAAT,EAAmB;AACzC,SAAOC,KAAK,CAACC,OAAN,CAAcF,QAAd,IAA0BA,QAAQ,CAACG,KAAT,CAAeC,qBAAf,CAA1B,GAAkEA,qBAAqB,CAACJ,QAAD,CAA9F;;AAEA,WAASI,qBAAT,CAA+BC,OAA/B,EAAwC;AACpC,WACI,CAAC,CAACA,OAAF,IACA,CAACA,OAAO,CAACC,KADT,IAEAD,OAAO,CAACR,OAAR,KAAoB,KAFpB,KAGC,OAAOQ,OAAO,CAACP,EAAf,KAAsB,QAAtB,IAAkC,OAAOO,OAAO,CAACP,EAAf,KAAsB,QAHzD,KAIAO,OAAO,CAACE,MAAR,KAAmBC,SALvB,CADoC,CAOlC;AACL;AACJ,CAZD;;AAcAnB,OAAO,CAACoB,cAAR,GAAyB,UAASC,QAAT,EAAmB;AACxC,SAAOA,QAAQ,CAACC,GAAT,CAAa,UAASN,OAAT,EAAkB;AAClC,WAAOhB,OAAO,CAACE,SAAR,CAAkBc,OAAO,CAACb,MAA1B,EAAkCa,OAAO,CAACZ,MAA1C,CAAP;AACH,GAFM,CAAP;AAGH,CAJD;;AAMAmB,MAAM,CAACC,OAAP,GAAiBxB,OAAjB","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-requestmanager/src/jsonrpc.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\n// Initialize Jsonrpc as a simple object with utility functions.\nconst Jsonrpc = {\n    messageId: 0,\n}\n\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function(method, params) {\n    if (!method) {\n        throw new Error(`JSONRPC method should be specified for params: \"${JSON.stringify(params)}\"!`)\n    }\n\n    Jsonrpc.messageId++\n\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || [],\n    }\n}\n\nJsonrpc.isValidResponse = function(response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response)\n\n    function validateSingleMessage(message) {\n        return (\n            !!message &&\n            !message.error &&\n            message.jsonrpc === '2.0' &&\n            (typeof message.id === 'number' || typeof message.id === 'string') &&\n            message.result !== undefined\n        ) // only undefined is not valid json object\n    }\n}\n\nJsonrpc.toBatchPayload = function(messages) {\n    return messages.map(function(message) {\n        return Jsonrpc.toPayload(message.method, message.params)\n    })\n}\n\nmodule.exports = Jsonrpc\n"]},"metadata":{},"sourceType":"script"}