{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-http/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2015\n */\nconst XHR2 = require('xhr2-cookies').XMLHttpRequest;\n\nconst errors = require('../../../caver-core-helpers').errors;\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n\n/**\n * @param       {string} host\n * @param       {object} options\n * @constructor\n */\n\n\nconst HttpProvider = function HttpProvider(host, options) {\n  options = options || {};\n  this.host = host || 'http://localhost:8545';\n  this.timeout = options.timeout || 0;\n  this.headers = options.headers;\n  this.connected = false;\n};\n/**\n * _prepareRequest create request instance\n */\n\n\nHttpProvider.prototype._prepareRequest = function () {\n  const request = new XHR2();\n  request.open('POST', this.host, true);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.timeout = this.timeout && this.timeout !== 1 ? this.timeout : 0;\n\n  if (this.headers) {\n    this.headers.forEach(function (header) {\n      request.setRequestHeader(header.name, header.value);\n    });\n  } // Set https default port\n\n\n  if (request._url.port === null && this.host.slice(0, 5) === 'https') request._url.port = 443;\n  return request;\n};\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\n\n\nHttpProvider.prototype.send = function (payload, callback) {\n  const _this = this;\n\n  const request = this._prepareRequest();\n\n  const host = this.host;\n  let timer;\n\n  request.onreadystatechange = function () {\n    /**\n     * readystate value\n     * 0: UNSENT - When client is created\n     * 1: OPENED - When request is opened\n     * 2: HEADERS_RECEIVED - When \"send\" is called and headers and status are available\n     * 3: LOADING - downloading\n     * 4: DONE - When receive response after operating request\n     */\n    if (request.readyState === 2) {\n      clearTimeout(timer);\n    }\n\n    if (request.readyState === 4 && request.timeout !== 1) {\n      let result = request.responseText;\n      let error = null;\n\n      if (request.response === null) {\n        error = errors.InvalidResponse(request.response);\n        clearTimeout(timer);\n      } else {\n        try {\n          result = JSON.parse(result);\n        } catch (e) {\n          if (request.responseText === '') {\n            error = errors.RequestFailed(request.statusText);\n          } else {\n            console.error(`Invalid JSON RPC response: ${JSON.stringify(request.responseText)}`);\n            error = errors.InvalidResponse(request.responseText);\n          }\n        }\n      }\n\n      _this.connected = true;\n      callback(error, result);\n    }\n  };\n\n  request.ontimeout = function () {\n    console.error(`CONNECTION TIMEOUT: timeout of ${this.timeout}ms achived`);\n    _this.connected = false;\n    clearTimeout(timer);\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    // Set timeout for connection\n    if (request.timeout !== 0) {\n      timer = setTimeout(function () {\n        if (request.status < 4) {\n          console.error(`CONNECTION ERROR: Couldn't connect to node ${host}`);\n          request.abort();\n          callback(errors.InvalidConnection(host));\n        }\n      }, request.timeout);\n    }\n\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    console.error(`CONNECTION ERROR: Couldn't connect to node ${this.host}`);\n    this.connected = false;\n    clearTimeout(timer);\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n\nHttpProvider.prototype.supportsSubscriptions = function () {\n  return false;\n};\n\nmodule.exports = HttpProvider;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-core-requestmanager/caver-providers-http/src/index.js"],"names":["XHR2","require","XMLHttpRequest","errors","HttpProvider","host","options","timeout","headers","connected","prototype","_prepareRequest","request","open","setRequestHeader","forEach","header","name","value","_url","port","slice","send","payload","callback","_this","timer","onreadystatechange","readyState","clearTimeout","result","responseText","error","response","InvalidResponse","JSON","parse","e","RequestFailed","statusText","console","stringify","ontimeout","ConnectionTimeout","setTimeout","status","abort","InvalidConnection","supportsSubscriptions","module","exports"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-http/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2015\n */\n\nconst XHR2 = require('xhr2-cookies').XMLHttpRequest\n\nconst errors = require('../../../caver-core-helpers').errors\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n/**\n * @param       {string} host\n * @param       {object} options\n * @constructor\n */\nconst HttpProvider = function HttpProvider(host, options) {\n    options = options || {}\n    this.host = host || 'http://localhost:8545'\n    this.timeout = options.timeout || 0\n    this.headers = options.headers\n    this.connected = false\n}\n\n/**\n * _prepareRequest create request instance\n */\nHttpProvider.prototype._prepareRequest = function() {\n    const request = new XHR2()\n\n    request.open('POST', this.host, true)\n    request.setRequestHeader('Content-Type', 'application/json')\n    request.timeout = this.timeout && this.timeout !== 1 ? this.timeout : 0\n\n    if (this.headers) {\n        this.headers.forEach(function(header) {\n            request.setRequestHeader(header.name, header.value)\n        })\n    }\n\n    // Set https default port\n    if (request._url.port === null && this.host.slice(0, 5) === 'https') request._url.port = 443\n\n    return request\n}\n\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.send = function(payload, callback) {\n    const _this = this\n    const request = this._prepareRequest()\n    const host = this.host\n    let timer\n\n    request.onreadystatechange = function() {\n        /**\n         * readystate value\n         * 0: UNSENT - When client is created\n         * 1: OPENED - When request is opened\n         * 2: HEADERS_RECEIVED - When \"send\" is called and headers and status are available\n         * 3: LOADING - downloading\n         * 4: DONE - When receive response after operating request\n         */\n\n        if (request.readyState === 2) {\n            clearTimeout(timer)\n        }\n\n        if (request.readyState === 4 && request.timeout !== 1) {\n            let result = request.responseText\n            let error = null\n\n            if (request.response === null) {\n                error = errors.InvalidResponse(request.response)\n                clearTimeout(timer)\n            } else {\n                try {\n                    result = JSON.parse(result)\n                } catch (e) {\n                    if (request.responseText === '') {\n                        error = errors.RequestFailed(request.statusText)\n                    } else {\n                        console.error(`Invalid JSON RPC response: ${JSON.stringify(request.responseText)}`)\n                        error = errors.InvalidResponse(request.responseText)\n                    }\n                }\n            }\n\n            _this.connected = true\n            callback(error, result)\n        }\n    }\n\n    request.ontimeout = function() {\n        console.error(`CONNECTION TIMEOUT: timeout of ${this.timeout}ms achived`)\n        _this.connected = false\n        clearTimeout(timer)\n        callback(errors.ConnectionTimeout(this.timeout))\n    }\n\n    try {\n        // Set timeout for connection\n        if (request.timeout !== 0) {\n            timer = setTimeout(function() {\n                if (request.status < 4) {\n                    console.error(`CONNECTION ERROR: Couldn't connect to node ${host}`)\n                    request.abort()\n                    callback(errors.InvalidConnection(host))\n                }\n            }, request.timeout)\n        }\n        request.send(JSON.stringify(payload))\n    } catch (error) {\n        console.error(`CONNECTION ERROR: Couldn't connect to node ${this.host}`)\n        this.connected = false\n        clearTimeout(timer)\n        callback(errors.InvalidConnection(this.host))\n    }\n}\n\nHttpProvider.prototype.supportsSubscriptions = function() {\n    return false\n}\n\nmodule.exports = HttpProvider\n"]},"metadata":{},"sourceType":"script"}