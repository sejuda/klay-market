{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\nconst constants = require('./constants');\n\nconst hasErrorMessage = result => !!result && !!result.error && !!result.error.message;\n\nconst txErrorTable = {\n  '0x2': 'VM error occurs while running smart contract',\n  '0x3': 'max call depth exceeded',\n  '0x4': 'contract address collision',\n  '0x5': 'contract creation code storage out of gas',\n  '0x6': 'evm: max code size exceeded',\n  '0x7': 'out of gas',\n  '0x8': 'evm: write protection',\n  '0x9': 'evm: execution reverted',\n  '0xa': 'reached the opcode count limit',\n  '0xb': 'account already exists',\n  '0xc': 'not a program account (e.g., an account having code and storage)',\n  '0xd': 'Human-readable address is not supported now',\n  '0xe': 'fee ratio is out of range [1, 99]',\n  '0xf': 'AccountKeyFail is not updatable',\n  '0x10': 'different account key type',\n  '0x11': 'AccountKeyNil cannot be initialized to an account',\n  '0x12': 'public key is not on curve',\n  '0x13': 'key weight is zero',\n  '0x14': 'key is not serializable',\n  '0x15': 'duplicated key',\n  '0x16': 'weighted sum overflow',\n  '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\n  '0x18': 'length is zero',\n  '0x19': 'length too long',\n  '0x1a': 'nested role-based key',\n  '0x1b': 'a legacy transaction must be with a legacy account key',\n  '0x1c': 'deprecated feature',\n  '0x1d': 'not supported',\n  '0x1e': 'smart contract code format is invalid'\n};\nmodule.exports = {\n  InvalidConnection: host => new Error(`CONNECTION ERROR: Couldn't connect to node ${host}.`),\n  RequestFailed: err => new Error(`Request failed: ${err}`),\n  ConnectionTimeout: ms => new Error(`CONNECTION TIMEOUT: timeout of ${ms}ms achived`),\n  ConnectionNotOpenError: event => {\n    const error = new Error('connection not open on send()');\n\n    if (event) {\n      error.code = event.code;\n      error.reason = event.reason;\n    }\n\n    return error;\n  },\n  MaxAttemptsReachedOnReconnectingError: () => new Error('Maximum number of reconnect attempts reached!'),\n  PendingRequestsOnReconnectingError: () => new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!'),\n  InvalidProvider: () => new Error('Provider not set or invalid'),\n  InvalidNumberOfParams: (got, expected, method) => new Error(`\n    Invalid number of parameters for \"${method}\". Got ${got} expected ${expected}!\n    `),\n  ErrorResponse: result => {\n    const message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result);\n    return new Error(`Returned error: ${message}`);\n  },\n  InvalidResponse: result => {\n    if (result === null) return new Error('Invalid response: null');\n    const message = hasErrorMessage(result) ? result.error.message : `Invalid JSON RPC response: ${JSON.stringify(result)}`;\n    return new Error(message);\n  },\n  needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n  blockHashNull: new Error('blockHash null'),\n  contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\n  receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\n  transactionReverted: receiptJSON => new Error(`Transaction has been reverted by the EVM:\\n${receiptJSON}`),\n  transactionRanOutOfGas: receiptJSON => new Error(`Transaction ran out of gas. Please provide more gas:\\n${receiptJSON}`),\n  invalidGasPrice: () => new Error(`Invalid gas price. Please provide valid gas price: ${constants.VALID_GAS_PRICE}`),\n  invalidGasLimit: () => new Error('Invalid gas limit. Please provide valid gas.'),\n  invalidData: () => new Error('Invalid data. Please provide valid hex-strict data.'),\n  notAllowedZeroGas: () => new Error(\"gas can't be 0. Please provide more gas.\"),\n  txErrorTable\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-core-helpers/src/errors.js"],"names":["constants","require","hasErrorMessage","result","error","message","txErrorTable","module","exports","InvalidConnection","host","Error","RequestFailed","err","ConnectionTimeout","ms","ConnectionNotOpenError","event","code","reason","MaxAttemptsReachedOnReconnectingError","PendingRequestsOnReconnectingError","InvalidProvider","InvalidNumberOfParams","got","expected","method","ErrorResponse","JSON","stringify","InvalidResponse","needNameCallPropertyToCreateMethod","blockHashNull","contractCouldntBeStored","receiptDidntContainContractAddress","transactionReverted","receiptJSON","transactionRanOutOfGas","invalidGasPrice","VALID_GAS_PRICE","invalidGasLimit","invalidData","notAllowedZeroGas"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/errors.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file errors.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\nconst constants = require('./constants')\n\nconst hasErrorMessage = result => !!result && !!result.error && !!result.error.message\n\nconst txErrorTable = {\n    '0x2': 'VM error occurs while running smart contract',\n    '0x3': 'max call depth exceeded',\n    '0x4': 'contract address collision',\n    '0x5': 'contract creation code storage out of gas',\n    '0x6': 'evm: max code size exceeded',\n    '0x7': 'out of gas',\n    '0x8': 'evm: write protection',\n    '0x9': 'evm: execution reverted',\n    '0xa': 'reached the opcode count limit',\n    '0xb': 'account already exists',\n    '0xc': 'not a program account (e.g., an account having code and storage)',\n    '0xd': 'Human-readable address is not supported now',\n    '0xe': 'fee ratio is out of range [1, 99]',\n    '0xf': 'AccountKeyFail is not updatable',\n    '0x10': 'different account key type',\n    '0x11': 'AccountKeyNil cannot be initialized to an account',\n    '0x12': 'public key is not on curve',\n    '0x13': 'key weight is zero',\n    '0x14': 'key is not serializable',\n    '0x15': 'duplicated key',\n    '0x16': 'weighted sum overflow',\n    '0x17': 'unsatisfiable threshold. Weighted sum of keys is less than the threshold.',\n    '0x18': 'length is zero',\n    '0x19': 'length too long',\n    '0x1a': 'nested role-based key',\n    '0x1b': 'a legacy transaction must be with a legacy account key',\n    '0x1c': 'deprecated feature',\n    '0x1d': 'not supported',\n    '0x1e': 'smart contract code format is invalid',\n}\n\nmodule.exports = {\n    InvalidConnection: host => new Error(`CONNECTION ERROR: Couldn't connect to node ${host}.`),\n    RequestFailed: err => new Error(`Request failed: ${err}`),\n    ConnectionTimeout: ms => new Error(`CONNECTION TIMEOUT: timeout of ${ms}ms achived`),\n    ConnectionNotOpenError: event => {\n        const error = new Error('connection not open on send()')\n        if (event) {\n            error.code = event.code\n            error.reason = event.reason\n        }\n\n        return error\n    },\n    MaxAttemptsReachedOnReconnectingError: () => new Error('Maximum number of reconnect attempts reached!'),\n    PendingRequestsOnReconnectingError: () =>\n        new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!'),\n    InvalidProvider: () => new Error('Provider not set or invalid'),\n    InvalidNumberOfParams: (got, expected, method) =>\n        new Error(`\n    Invalid number of parameters for \"${method}\". Got ${got} expected ${expected}!\n    `),\n    ErrorResponse: result => {\n        const message = hasErrorMessage(result) ? result.error.message : JSON.stringify(result)\n        return new Error(`Returned error: ${message}`)\n    },\n    InvalidResponse: result => {\n        if (result === null) return new Error('Invalid response: null')\n        const message = hasErrorMessage(result) ? result.error.message : `Invalid JSON RPC response: ${JSON.stringify(result)}`\n        return new Error(message)\n    },\n    needNameCallPropertyToCreateMethod: new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.'),\n    blockHashNull: new Error('blockHash null'),\n    contractCouldntBeStored: new Error(\"The contract code couldn't be stored, please check your gas limit.\"),\n    receiptDidntContainContractAddress: new Error(\"The transaction receipt didn't contain a contract address.\"),\n    transactionReverted: receiptJSON => new Error(`Transaction has been reverted by the EVM:\\n${receiptJSON}`),\n    transactionRanOutOfGas: receiptJSON => new Error(`Transaction ran out of gas. Please provide more gas:\\n${receiptJSON}`),\n    invalidGasPrice: () => new Error(`Invalid gas price. Please provide valid gas price: ${constants.VALID_GAS_PRICE}`),\n    invalidGasLimit: () => new Error('Invalid gas limit. Please provide valid gas.'),\n    invalidData: () => new Error('Invalid data. Please provide valid hex-strict data.'),\n    notAllowedZeroGas: () => new Error(\"gas can't be 0. Please provide more gas.\"),\n    txErrorTable,\n}\n"]},"metadata":{},"sourceType":"script"}