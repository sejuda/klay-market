{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  const [nonce, gasPrice, gas, to, value, input, v, r, s] = RLP.decode(rlpEncoded);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    input: input,\n    signatures: [v, r, s]\n  };\n}\n/**\n * Represents a legacy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction to see more detail.\n * @class\n */\n\n\nclass LegacyTransaction extends AbstractTransaction {\n  /**\n   * Creates a legacy transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n   * @return {LegacyTransaction}\n   */\n  static create(createTxObj) {\n    return new LegacyTransaction(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a LegacyTransaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded legacy transaction.\n   * @return {LegacyTransaction}\n   */\n\n\n  static decode(rlpEncoded) {\n    return new LegacyTransaction(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a legacy transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    createTxObj.from = createTxObj.from || '0x0000000000000000000000000000000000000000';\n    super(TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj);\n    this.to = createTxObj.to || '0x';\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data || '0x';\n    this.value = createTxObj.value || '0x0';\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (address !== '0x' && !utils.isAddress(address)) throw new Error(`Invalid address ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\n   * Appends signatures array to transaction.\n   * Legacy transaction cannot have more than one signature, so an error occurs if the transaction already has a signature.\n   *\n   * @override\n   * @param {Array.<string>|Array.<Array.<string>>} sig - An array of signatures to append.\n   */\n\n\n  appendSignatures(sig) {\n    if (!utils.isEmptySig(this.signatures)) throw new Error(`signatures already defined. ${this.type} cannot include more than one signature. Please use tx.signatures = sigArr to replace.`);\n\n    if (Array.isArray(sig[0])) {\n      if (sig.length > 1) throw new Error(`signatures are too long. ${this.type} cannot include more than one signature.`);\n      sig = sig[0];\n    }\n\n    this.signatures = sig;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, this.signatures.v, this.signatures.r, this.signatures.s]);\n  }\n  /**\n   * Returns RLP-encoded string for making signature\n   * @override\n   * @return {string}\n   */\n\n\n  getRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    if (this.chainId === undefined) throw new Error(`chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.`);\n    return RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.input, Bytes.fromNat(this.chainId || '0x1'), '0x', '0x']);\n  }\n  /**\n   * LegacyTransaction does not have a common RLP encoding because no other type exists.\n   * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\n   *\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    return this.getRLPEncodingForSignature();\n  }\n\n}\n\nmodule.exports = LegacyTransaction;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/legacyTransaction/legacyTransaction.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","utils","_decode","rlpEncoded","addHexPrefix","nonce","gasPrice","gas","to","value","input","v","r","s","decode","trimLeadingZero","signatures","LegacyTransaction","create","createTxObj","constructor","isString","from","TxTypeLegacyTransaction","data","Error","_to","address","isAddress","toLowerCase","_value","val","numberToHex","_input","isHex","appendSignatures","sig","isEmptySig","type","Array","isArray","length","getRLPEncoding","validateOptionalValues","encode","fromNat","getRLPEncodingForSignature","chainId","undefined","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    const [nonce, gasPrice, gas, to, value, input, v, r, s] = RLP.decode(rlpEncoded)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        input: input,\n        signatures: [v, r, s],\n    }\n}\n/**\n * Represents a legacy transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypelegacytransaction to see more detail.\n * @class\n */\nclass LegacyTransaction extends AbstractTransaction {\n    /**\n     * Creates a legacy transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n     * @return {LegacyTransaction}\n     */\n    static create(createTxObj) {\n        return new LegacyTransaction(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a LegacyTransaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded legacy transaction.\n     * @return {LegacyTransaction}\n     */\n    static decode(rlpEncoded) {\n        return new LegacyTransaction(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a legacy transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a LegacyTransaction transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n\n        createTxObj.from = createTxObj.from || '0x0000000000000000000000000000000000000000'\n\n        super(TX_TYPE_STRING.TxTypeLegacyTransaction, createTxObj)\n        this.to = createTxObj.to || '0x'\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n        this.input = createTxObj.input || createTxObj.data || '0x'\n\n        this.value = createTxObj.value || '0x0'\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (address !== '0x' && !utils.isAddress(address)) throw new Error(`Invalid address ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * @type {string}\n     */\n    get data() {\n        return this._input\n    }\n\n    set data(data) {\n        this._input = data\n    }\n\n    /**\n     * Appends signatures array to transaction.\n     * Legacy transaction cannot have more than one signature, so an error occurs if the transaction already has a signature.\n     *\n     * @override\n     * @param {Array.<string>|Array.<Array.<string>>} sig - An array of signatures to append.\n     */\n    appendSignatures(sig) {\n        if (!utils.isEmptySig(this.signatures))\n            throw new Error(\n                `signatures already defined. ${this.type} cannot include more than one signature. Please use tx.signatures = sigArr to replace.`\n            )\n\n        if (Array.isArray(sig[0])) {\n            if (sig.length > 1) throw new Error(`signatures are too long. ${this.type} cannot include more than one signature.`)\n            sig = sig[0]\n        }\n\n        this.signatures = sig\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.input,\n            this.signatures.v,\n            this.signatures.r,\n            this.signatures.s,\n        ])\n    }\n\n    /**\n     * Returns RLP-encoded string for making signature\n     * @override\n     * @return {string}\n     */\n    getRLPEncodingForSignature() {\n        this.validateOptionalValues()\n        if (this.chainId === undefined)\n            throw new Error(`chainId is undefined. Define chainId in transaction or use 'transaction.fillTransaction' to fill values.`)\n\n        return RLP.encode([\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.input,\n            Bytes.fromNat(this.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n\n    /**\n     * LegacyTransaction does not have a common RLP encoding because no other type exists.\n     * So getCommonRLPEncodingForSignature calls getRLPEncodingForSignature to return RLP-encoded string.\n     *\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        return this.getRLPEncodingForSignature()\n    }\n}\n\nmodule.exports = LegacyTransaction\n"]},"metadata":{},"sourceType":"script"}