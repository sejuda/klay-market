{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring)) throw new Error(`Cannot decode to FeeDelegatedChainDataAnchoring. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    input,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedchaindataanchoring to see more detail.\n * @class\n */\n\n\nclass FeeDelegatedChainDataAnchoring extends AbstractFeeDelegatedTransaction {\n  /**\n   * Creates a fee delegated chain data anchoring transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @return {FeeDelegatedChainDataAnchoring}\n   */\n  static create(createTxObj) {\n    return new FeeDelegatedChainDataAnchoring(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoring transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring transaction.\n   * @return {FeeDelegatedChainDataAnchoring}\n   */\n\n\n  static decode(rlpEncoded) {\n    return new FeeDelegatedChainDataAnchoring(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a fee delegated chain data anchoring transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring, createTxObj);\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input, signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.input]);\n  }\n\n}\n\nmodule.exports = FeeDelegatedChainDataAnchoring;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/chainDataAnchoring/feeDelegatedChainDataAnchoring.js"],"names":["_","require","RLP","Bytes","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedChainDataAnchoring","Error","typeDettached","slice","nonce","gasPrice","gas","from","input","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedChainDataAnchoring","create","createTxObj","constructor","isString","data","_input","isHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","toLowerCase","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring))\n        throw new Error(\n            `Cannot decode to FeeDelegatedChainDataAnchoring. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        input,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated chain data anchoring transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedchaindataanchoring to see more detail.\n * @class\n */\nclass FeeDelegatedChainDataAnchoring extends AbstractFeeDelegatedTransaction {\n    /**\n     * Creates a fee delegated chain data anchoring transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @return {FeeDelegatedChainDataAnchoring}\n     */\n    static create(createTxObj) {\n        return new FeeDelegatedChainDataAnchoring(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedChainDataAnchoring transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated chain data anchoring transaction.\n     * @return {FeeDelegatedChainDataAnchoring}\n     */\n    static decode(rlpEncoded) {\n        return new FeeDelegatedChainDataAnchoring(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a fee delegated chain data anchoring transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedChainDataAnchoring transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `nonce`, `gas`, `gasPrice`, `input`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring, createTxObj)\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.input,\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedChainDataAnchoring,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.input,\n        ])\n    }\n}\n\nmodule.exports = FeeDelegatedChainDataAnchoring\n"]},"metadata":{},"sourceType":"script"}