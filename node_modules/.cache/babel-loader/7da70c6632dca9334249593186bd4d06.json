{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nconst toAsyncIterable = require('../../lib/file-data-to-async-iterable');\n\nexports.toFormData = async (path, input) => {\n  input = toAsyncIterable(input);\n  const formData = new FormData(); // In the browser there's _currently_ no streaming upload, buffer up our\n  // async iterator chunks and append a big Blob :(\n  // One day, this will be browser streams\n\n  const bufs = [];\n\n  for await (const chunk of input) {\n    bufs.push(Buffer.isBuffer(chunk) ? chunk.buffer : chunk);\n  }\n\n  formData.append('file', new Blob(bufs, {\n    type: 'application/octet-stream'\n  }));\n  return formData;\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/ipfs-http-client-lite/src/files/write/form-data.browser.js"],"names":["toAsyncIterable","require","exports","toFormData","path","input","formData","FormData","bufs","chunk","push","Buffer","isBuffer","buffer","append","Blob","type"],"mappings":"AAAA;AACA;;AAEA,MAAMA,eAAe,GAAGC,OAAO,CAAC,uCAAD,CAA/B;;AAEAC,OAAO,CAACC,UAAR,GAAqB,OAAOC,IAAP,EAAaC,KAAb,KAAuB;AAC1CA,EAAAA,KAAK,GAAGL,eAAe,CAACK,KAAD,CAAvB;AACA,QAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB,CAF0C,CAI1C;AACA;AACA;;AACA,QAAMC,IAAI,GAAG,EAAb;;AACA,aAAW,MAAMC,KAAjB,IAA0BJ,KAA1B,EAAiC;AAC/BG,IAAAA,IAAI,CAACE,IAAL,CAAUC,MAAM,CAACC,QAAP,CAAgBH,KAAhB,IAAyBA,KAAK,CAACI,MAA/B,GAAwCJ,KAAlD;AACD;;AAEDH,EAAAA,QAAQ,CAACQ,MAAT,CAAgB,MAAhB,EAAwB,IAAIC,IAAJ,CAASP,IAAT,EAAe;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAf,CAAxB;AAEA,SAAOV,QAAP;AACD,CAfD","sourcesContent":["'use strict'\n/* eslint-env browser */\n\nconst toAsyncIterable = require('../../lib/file-data-to-async-iterable')\n\nexports.toFormData = async (path, input) => {\n  input = toAsyncIterable(input)\n  const formData = new FormData()\n\n  // In the browser there's _currently_ no streaming upload, buffer up our\n  // async iterator chunks and append a big Blob :(\n  // One day, this will be browser streams\n  const bufs = []\n  for await (const chunk of input) {\n    bufs.push(Buffer.isBuffer(chunk) ? chunk.buffer : chunk)\n  }\n\n  formData.append('file', new Blob(bufs, { type: 'application/octet-stream' }))\n\n  return formData\n}\n"]},"metadata":{},"sourceType":"script"}