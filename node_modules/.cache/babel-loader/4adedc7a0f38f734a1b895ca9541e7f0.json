{"ast":null,"code":"const getIterator = require('get-iterator');\n\nconst toIterable = require('pull-stream-to-async-iterator');\n\nfunction toPull(source) {\n  source = getIterator(source);\n  return async (end, cb) => {\n    if (end) {\n      if (source.return) {\n        try {\n          await source.return();\n        } catch (err) {\n          return cb(err);\n        }\n      }\n\n      return cb(end);\n    }\n\n    let next;\n\n    try {\n      next = await source.next();\n    } catch (err) {\n      return cb(err);\n    }\n\n    if (next.done) return cb(true); // eslint-disable-line\n\n    cb(null, next.value);\n  };\n}\n\ntoPull.source = toPull;\n\ntoPull.transform = toPull.through = source => read => toPull(source(toIterable(read)));\n\ntoPull.duplex = duplex => ({\n  sink: toPull.sink(duplex.sink),\n  source: toPull(duplex.source)\n});\n\ntoPull.sink = sink => {\n  return read => {\n    sink({\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n\n      next: () => new Promise((resolve, reject) => {\n        read(null, (end, value) => {\n          if (end === true) return resolve({\n            done: true,\n            value\n          });\n          if (end) return reject(end);\n          resolve({\n            done: false,\n            value\n          });\n        });\n      }),\n      return: () => new Promise((resolve, reject) => {\n        read(true, (end, value) => {\n          if (end && end !== true) return reject(end);\n          resolve({\n            done: true,\n            value\n          });\n        });\n      }),\n      throw: err => new Promise((resolve, reject) => {\n        read(err, (end, value) => {\n          if (end && end !== true) return reject(end);\n          resolve({\n            done: true,\n            value\n          });\n        });\n      })\n    });\n  };\n};\n\nmodule.exports = toPull;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/async-iterator-to-pull-stream/index.js"],"names":["getIterator","require","toIterable","toPull","source","end","cb","return","err","next","done","value","transform","through","read","duplex","sink","Symbol","asyncIterator","Promise","resolve","reject","throw","module","exports"],"mappings":"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","sourcesContent":["const getIterator = require('get-iterator')\nconst toIterable = require('pull-stream-to-async-iterator')\n\nfunction toPull (source) {\n  source = getIterator(source)\n\n  return async (end, cb) => {\n    if (end) {\n      if (source.return) {\n        try {\n          await source.return()\n        } catch (err) {\n          return cb(err)\n        }\n      }\n      return cb(end)\n    }\n\n    let next\n    try {\n      next = await source.next()\n    } catch (err) {\n      return cb(err)\n    }\n\n    if (next.done) return cb(true) // eslint-disable-line\n    cb(null, next.value)\n  }\n}\n\ntoPull.source = toPull\n\ntoPull.transform = toPull.through = source => read => toPull(source(toIterable(read)))\n\ntoPull.duplex = duplex => ({\n  sink: toPull.sink(duplex.sink),\n  source: toPull(duplex.source)\n})\n\ntoPull.sink = sink => {\n  return read => {\n    sink({\n      [Symbol.asyncIterator] () {\n        return this\n      },\n\n      next: () => new Promise((resolve, reject) => {\n        read(null, (end, value) => {\n          if (end === true) return resolve({ done: true, value })\n          if (end) return reject(end)\n          resolve({ done: false, value })\n        })\n      }),\n\n      return: () => new Promise((resolve, reject) => {\n        read(true, (end, value) => {\n          if (end && end !== true) return reject(end)\n          resolve({ done: true, value })\n        })\n      }),\n\n      throw: err => new Promise((resolve, reject) => {\n        read(err, (end, value) => {\n          if (end && end !== true) return reject(end)\n          resolve({ done: true, value })\n        })\n      })\n    })\n  }\n}\n\nmodule.exports = toPull\n"]},"metadata":{},"sourceType":"script"}