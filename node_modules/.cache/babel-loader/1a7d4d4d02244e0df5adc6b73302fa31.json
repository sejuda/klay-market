{"ast":null,"code":"'use strict';\n\nconst ndjson = require('iterable-ndjson');\n\nconst {\n  objectToQuery\n} = require('./lib/querystring');\n\nconst configure = require('./lib/configure');\n\nconst {\n  ok,\n  toIterable\n} = require('./lib/fetch');\n\nconst toCamel = require('./lib/to-camel');\n\nmodule.exports = configure(({\n  fetch,\n  apiUrl,\n  apiPath,\n  headers\n}) => {\n  return (peerId, options) => async function* () {\n    options = options || {};\n    const qs = objectToQuery({\n      arg: peerId,\n      count: options.count,\n      ...(options.qs || {})\n    });\n    const url = `${apiUrl}${apiPath}/ping${qs}`;\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }));\n\n    for await (const pong of ndjson(toIterable(res.body))) {\n      yield toCamel(pong);\n    }\n  }();\n});","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/ipfs-http-client-lite/src/ping.js"],"names":["ndjson","require","objectToQuery","configure","ok","toIterable","toCamel","module","exports","fetch","apiUrl","apiPath","headers","peerId","options","qs","arg","count","url","res","signal","pong","body"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAoBD,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;AAAEG,EAAAA,EAAF;AAAMC,EAAAA;AAAN,IAAqBJ,OAAO,CAAC,aAAD,CAAlC;;AACA,MAAMK,OAAO,GAAGL,OAAO,CAAC,gBAAD,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,CAAC;AAAEM,EAAAA,KAAF;AAASC,EAAAA,MAAT;AAAiBC,EAAAA,OAAjB;AAA0BC,EAAAA;AAA1B,CAAD,KAAyC;AAClE,SAAO,CAACC,MAAD,EAASC,OAAT,KAAsB,mBAAoB;AAC/CA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,UAAMC,EAAE,GAAGb,aAAa,CAAC;AACvBc,MAAAA,GAAG,EAAEH,MADkB;AAEvBI,MAAAA,KAAK,EAAEH,OAAO,CAACG,KAFQ;AAGvB,UAAIH,OAAO,CAACC,EAAR,IAAc,EAAlB;AAHuB,KAAD,CAAxB;AAMA,UAAMG,GAAG,GAAI,GAAER,MAAO,GAAEC,OAAQ,QAAOI,EAAG,EAA1C;AACA,UAAMI,GAAG,GAAG,MAAMf,EAAE,CAACK,KAAK,CAACS,GAAD,EAAM;AAC9BE,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADc;AAE9BR,MAAAA,OAAO,EAAEE,OAAO,CAACF,OAAR,IAAmBA;AAFE,KAAN,CAAN,CAApB;;AAKA,eAAW,MAAMS,IAAjB,IAAyBrB,MAAM,CAACK,UAAU,CAACc,GAAG,CAACG,IAAL,CAAX,CAA/B,EAAuD;AACrD,YAAMhB,OAAO,CAACe,IAAD,CAAb;AACD;AACF,GAlB2B,EAA5B;AAmBD,CApByB,CAA1B","sourcesContent":["'use strict'\n\nconst ndjson = require('iterable-ndjson')\nconst { objectToQuery } = require('./lib/querystring')\nconst configure = require('./lib/configure')\nconst { ok, toIterable } = require('./lib/fetch')\nconst toCamel = require('./lib/to-camel')\n\nmodule.exports = configure(({ fetch, apiUrl, apiPath, headers }) => {\n  return (peerId, options) => (async function * () {\n    options = options || {}\n\n    const qs = objectToQuery({\n      arg: peerId,\n      count: options.count,\n      ...(options.qs || {})\n    })\n\n    const url = `${apiUrl}${apiPath}/ping${qs}`\n    const res = await ok(fetch(url, {\n      signal: options.signal,\n      headers: options.headers || headers\n    }))\n\n    for await (const pong of ndjson(toIterable(res.body))) {\n      yield toCamel(pong)\n    }\n  })()\n})\n"]},"metadata":{},"sourceType":"script"}