{"ast":null,"code":"import Caver from \"caver-js\"; // import CounterABI from '../abi/CounterABI.json';\n\nimport KIP17ABI from \"../abi/KIP17TokenABI.json\";\nimport { ACCESS_KEY_ID, SECRET_ACCESS_KEY, COUNT_CONTRACT_ADDRESS, NFT_CONTRACT_ADDRESS, CHAIN_ID } from \"../constants\";\nconst option = {\n  headers: [{\n    name: \"Authorization\",\n    value: \"Basic \" + Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\")\n  }, {\n    name: \"x-chain-id\",\n    value: CHAIN_ID\n  }]\n};\nconst caver = new Caver(new Caver.providers.HttpProvider(\"https://node-api.klaytnapi.com/v1/klaytn\", option));\nconst NFTContract = new caver.contract(KIP17ABI, NFT_CONTRACT_ADDRESS);\nexport const fetchCardsOf = async address => {\n  // Fetch Balance\n  const balance = await NFTContract.methods.balanceOf(address).call();\n  console.log(`[NFT Balance]${balance}`); // Fetch Token IDs\n\n  const tokenIds = [];\n\n  for (let i = 0; i < balance; i++) {\n    const id = await NFTContract.methods.tokenOfOwnerByIndex(address, i).call();\n    tokenIds.push(id);\n  } // Fetch Token URIs\n\n\n  const tokenUris = [];\n\n  for (let i = 0; i < balance; i++) {\n    const uri = await NFTContract.methods.tokenURI(tokenIds[i]).call();\n    tokenUris.push(uri);\n  }\n\n  const nfts = [];\n\n  for (let i = 0; i < balance; i++) {\n    nfts.push({\n      uri: tokenUris[i],\n      id: tokenIds[i]\n    });\n  }\n\n  console.log(nfts);\n  return nfts;\n};\nexport const getBalance = address => {\n  return caver.rpc.klay.getBalance(address).then(response => {\n    const balance = caver.utils.convertFromPeb(caver.utils.hexToNumberString(response));\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n}; // const CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\n// export const readCount = async () => {\n//   const _count = await CountContract.methods.count().call();\n//   console.log(_count);\n// }\n// export const setCount = async (newCount) => {\n//   // 사용할 account 설정\n//   try {\n//     const privatekey = '0x26c8485748a7f9e9ae637a5c014f9955c2be9aa24ca8f1674e7e98c7123c9a4d';\n//     const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n//     caver.wallet.add(deployer);\n//     // 스마트 컨트랙트 실행 트랜젝션 날리기\n//     // 결과 확인\n//     const receipt = await CountContract.methods.setCount(newCount).send({\n//       from: deployer.address, // address\n//       gas: \"0x4bfd200\"//\n//     })\n//     console.log(receipt);\n//   } catch(e) {\n//     console.log(`[ERROR_SET_COUNT]${e}`);\n//   }\n// }","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/src/api/UseCaver.js"],"names":["Caver","KIP17ABI","ACCESS_KEY_ID","SECRET_ACCESS_KEY","COUNT_CONTRACT_ADDRESS","NFT_CONTRACT_ADDRESS","CHAIN_ID","option","headers","name","value","Buffer","from","toString","caver","providers","HttpProvider","NFTContract","contract","fetchCardsOf","address","balance","methods","balanceOf","call","console","log","tokenIds","i","id","tokenOfOwnerByIndex","push","tokenUris","uri","tokenURI","nfts","getBalance","rpc","klay","then","response","utils","convertFromPeb","hexToNumberString"],"mappings":"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","sourcesContent":["import Caver from \"caver-js\";\n// import CounterABI from '../abi/CounterABI.json';\nimport KIP17ABI from \"../abi/KIP17TokenABI.json\";\nimport {\n  ACCESS_KEY_ID,\n  SECRET_ACCESS_KEY,\n  COUNT_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  CHAIN_ID,\n} from \"../constants\";\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\"),\n    },\n    { name: \"x-chain-id\", value: CHAIN_ID },\n  ],\n};\n\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    \"https://node-api.klaytnapi.com/v1/klaytn\",\n    option\n  )\n);\nconst NFTContract = new caver.contract(KIP17ABI, NFT_CONTRACT_ADDRESS);\n\nexport const fetchCardsOf = async (address) => {\n  // Fetch Balance\n  const balance = await NFTContract.methods.balanceOf(address).call();\n  console.log(`[NFT Balance]${balance}`);\n  // Fetch Token IDs\n  const tokenIds = [];\n  for (let i = 0; i < balance; i++) {\n    const id = await NFTContract.methods.tokenOfOwnerByIndex(address, i).call();\n    tokenIds.push(id);\n  }\n  // Fetch Token URIs\n  const tokenUris = [];\n  for (let i = 0; i < balance; i++) {\n    const uri = await NFTContract.methods.tokenURI(tokenIds[i]).call();\n    tokenUris.push(uri);\n  }\n  const nfts = [];\n  for (let i = 0; i < balance; i++) {\n    nfts.push({ uri: tokenUris[i], id: tokenIds[i] });\n  }\n  console.log(nfts);\n  return nfts;\n};\n\nexport const getBalance = (address) => {\n  return caver.rpc.klay.getBalance(address).then((response) => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response)\n    );\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};\n\n// const CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\n\n// export const readCount = async () => {\n//   const _count = await CountContract.methods.count().call();\n//   console.log(_count);\n// }\n\n// export const setCount = async (newCount) => {\n//   // 사용할 account 설정\n//   try {\n//     const privatekey = '0x26c8485748a7f9e9ae637a5c014f9955c2be9aa24ca8f1674e7e98c7123c9a4d';\n//     const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n//     caver.wallet.add(deployer);\n//     // 스마트 컨트랙트 실행 트랜젝션 날리기\n//     // 결과 확인\n\n//     const receipt = await CountContract.methods.setCount(newCount).send({\n//       from: deployer.address, // address\n//       gas: \"0x4bfd200\"//\n//     })\n//     console.log(receipt);\n//   } catch(e) {\n//     console.log(`[ERROR_SET_COUNT]${e}`);\n//   }\n\n// }\n"]},"metadata":{},"sourceType":"module"}