{"ast":null,"code":"/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst utils = require('../../../../caver-utils');\n\nconst helpers = require('../../../../caver-core-helpers');\n\nconst {\n  ACCOUNT_UPDATE_TYPE_TAG,\n  ACCOUNT_KEY_NIL_TAG,\n  ACCOUNT_KEY_LEGACY_TAG,\n  ACCOUNT_KEY_PUBLIC_TAG,\n  ACCOUNT_KEY_FAIL_TAG,\n  ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG,\n  ACCOUNT_KEY_ROLE_BASED_TAG,\n  FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n  FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG\n} = helpers.constants;\n\nfunction rlpEncodeForAccountUpdate(transaction) {\n  const accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdate(transaction) {\n  if (transaction.senderRawTransaction) {\n    const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`; // eslint-disable-next-line no-unused-vars\n\n    const [nonce, gasPrice, gas, from, accountKey, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction);\n    return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), accountKey]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  const accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction) {\n  if (transaction.senderRawTransaction) {\n    const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`; // eslint-disable-next-line no-unused-vars\n\n    const [nonce, gasPrice, gas, from, accountKey, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction);\n    return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG, Bytes.fromNat(nonce), Bytes.fromNat(gasPrice), Bytes.fromNat(gas), from.toLowerCase(), accountKey, Bytes.fromNat(feeRatio)]), transaction.feePayer.toLowerCase(), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n  }\n\n  const accountKey = resolveRawKeyToAccountKey(transaction);\n  return RLP.encode([RLP.encode([FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG, Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.from.toLowerCase(), accountKey, Bytes.fromNat(transaction.feeRatio)]), Bytes.fromNat(transaction.chainId || '0x1'), '0x', '0x']);\n}\n\nfunction resolveRawKeyToAccountKey(transaction) {\n  // Handles the case where AccountForUpdate is set in key field in transaction object to update account.\n  if (transaction.key) {\n    if (transaction.from && transaction.from.toLowerCase() !== transaction.key.address.toLowerCase()) {\n      throw new Error('The value of the from field of the transaction does not match the address of AccountForUpdate.');\n    }\n\n    transaction.key.fillUpdateObject(transaction);\n  }\n\n  if (transaction.legacyKey) return ACCOUNT_KEY_LEGACY_TAG;\n  if (transaction.failKey) return ACCOUNT_KEY_FAIL_TAG;\n\n  if (transaction.multisig) {\n    const {\n      threshold,\n      keys\n    } = transaction.multisig;\n    const encodedMultisigPublicKeys = keys.map(({\n      weight,\n      publicKey\n    }) => {\n      if (!weight) throw new Error('weight should be specified for multisig account');\n      if (!publicKey) throw new Error('publicKey should be specified for multisig account');\n      const compressedPublicKey = utils.compressPublicKey(publicKey);\n      return [Bytes.fromNat(utils.numberToHex(weight)), compressedPublicKey];\n    });\n    return ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG + RLP.encode([Bytes.fromNat(utils.numberToHex(threshold)), encodedMultisigPublicKeys]).slice(2);\n  }\n\n  if (transaction.publicKey) {\n    const compressedPublicKey = utils.compressPublicKey(transaction.publicKey);\n    return ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2);\n  }\n\n  if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n    // Create a new object so as not to damage the input transaction object.\n    const roleBasedObject = {};\n    roleBasedObject.roleTransactionKey = transaction.roleTransactionKey ? resolveRawKeyToAccountKey(transaction.roleTransactionKey) : ACCOUNT_KEY_NIL_TAG;\n    roleBasedObject.roleAccountUpdateKey = transaction.roleAccountUpdateKey ? resolveRawKeyToAccountKey(transaction.roleAccountUpdateKey) : ACCOUNT_KEY_NIL_TAG;\n    roleBasedObject.roleFeePayerKey = transaction.roleFeePayerKey ? resolveRawKeyToAccountKey(transaction.roleFeePayerKey) : ACCOUNT_KEY_NIL_TAG;\n    const keys = [roleBasedObject.roleTransactionKey, roleBasedObject.roleAccountUpdateKey, roleBasedObject.roleFeePayerKey];\n    return ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(keys).slice(2);\n  }\n\n  return ACCOUNT_KEY_NIL_TAG;\n}\n\nfunction parseAccountKey(transaction) {\n  const key = transaction.accountKey;\n  delete transaction.accountKey;\n\n  if (key.startsWith(ACCOUNT_KEY_LEGACY_TAG)) {\n    transaction.legacyKey = true;\n  } else if (key.startsWith(ACCOUNT_KEY_FAIL_TAG)) {\n    transaction.failKey = true;\n  } else if (key.startsWith(ACCOUNT_KEY_PUBLIC_TAG)) {\n    transaction.publicKey = RLP.decode(`0x${key.slice(ACCOUNT_KEY_PUBLIC_TAG.length)}`);\n  } else if (key.startsWith(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n    let [threshold, multiSigkeys] = RLP.decode(`0x${key.slice(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`);\n    multiSigkeys = multiSigkeys.map(k => {\n      return {\n        weight: utils.hexToNumber(k[0]),\n        publicKey: k[1]\n      };\n    });\n    transaction.multisig = {\n      threshold: utils.hexToNumber(threshold),\n      keys: multiSigkeys\n    };\n  } else if (key.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) {\n    const keys = RLP.decode(`0x${key.slice(ACCOUNT_KEY_ROLE_BASED_TAG.length)}`);\n    keys.map(k => {\n      if (k.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.');\n    });\n    if (keys.length > 0 && !keys[0].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleTransactionKey = parseAccountKey({\n      accountKey: keys[0]\n    });\n    if (keys.length > 1 && !keys[1].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleAccountUpdateKey = parseAccountKey({\n      accountKey: keys[1]\n    });\n    if (keys.length > 2 && !keys[2].startsWith(ACCOUNT_KEY_NIL_TAG)) transaction.roleFeePayerKey = parseAccountKey({\n      accountKey: keys[2]\n    });\n  }\n\n  return transaction;\n}\n\nmodule.exports = {\n  rlpEncodeForAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdate,\n  rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n  parseAccountKey\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-klay/caver-klay-accounts/src/transactionType/account.js"],"names":["RLP","require","Bytes","utils","helpers","ACCOUNT_UPDATE_TYPE_TAG","ACCOUNT_KEY_NIL_TAG","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","ACCOUNT_KEY_ROLE_BASED_TAG","FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG","FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG","constants","rlpEncodeForAccountUpdate","transaction","accountKey","resolveRawKeyToAccountKey","encode","fromNat","nonce","gasPrice","gas","from","toLowerCase","chainId","rlpEncodeForFeeDelegatedAccountUpdate","senderRawTransaction","typeDetacehdRawTransaction","slice","v","r","s","rlpDecode","feePayer","rlpEncodeForFeeDelegatedAccountUpdateWithRatio","feeRatio","key","address","Error","fillUpdateObject","legacyKey","failKey","multisig","threshold","keys","encodedMultisigPublicKeys","map","weight","publicKey","compressedPublicKey","compressPublicKey","numberToHex","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","roleBasedObject","parseAccountKey","startsWith","decode","length","multiSigkeys","k","hexToNumber","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst utils = require('../../../../caver-utils')\nconst helpers = require('../../../../caver-core-helpers')\n\nconst {\n    ACCOUNT_UPDATE_TYPE_TAG,\n\n    ACCOUNT_KEY_NIL_TAG,\n    ACCOUNT_KEY_LEGACY_TAG,\n    ACCOUNT_KEY_PUBLIC_TAG,\n    ACCOUNT_KEY_FAIL_TAG,\n    ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG,\n    ACCOUNT_KEY_ROLE_BASED_TAG,\n\n    FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n    FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\n} = helpers.constants\n\nfunction rlpEncodeForAccountUpdate(transaction) {\n    const accountKey = resolveRawKeyToAccountKey(transaction)\n\n    return RLP.encode([\n        RLP.encode([\n            ACCOUNT_UPDATE_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.from.toLowerCase(),\n            accountKey,\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdate(transaction) {\n    if (transaction.senderRawTransaction) {\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, from, accountKey, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                from.toLowerCase(),\n                accountKey,\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    const accountKey = resolveRawKeyToAccountKey(transaction)\n\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_ACCOUNT_UPDATE_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.from.toLowerCase(),\n            accountKey,\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction rlpEncodeForFeeDelegatedAccountUpdateWithRatio(transaction) {\n    if (transaction.senderRawTransaction) {\n        const typeDetacehdRawTransaction = `0x${transaction.senderRawTransaction.slice(4)}`\n\n        // eslint-disable-next-line no-unused-vars\n        const [nonce, gasPrice, gas, from, accountKey, feeRatio, [[v, r, s]]] = utils.rlpDecode(typeDetacehdRawTransaction)\n\n        return RLP.encode([\n            RLP.encode([\n                FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\n                Bytes.fromNat(nonce),\n                Bytes.fromNat(gasPrice),\n                Bytes.fromNat(gas),\n                from.toLowerCase(),\n                accountKey,\n                Bytes.fromNat(feeRatio),\n            ]),\n            transaction.feePayer.toLowerCase(),\n            Bytes.fromNat(transaction.chainId || '0x1'),\n            '0x',\n            '0x',\n        ])\n    }\n    const accountKey = resolveRawKeyToAccountKey(transaction)\n\n    return RLP.encode([\n        RLP.encode([\n            FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO_TYPE_TAG,\n            Bytes.fromNat(transaction.nonce),\n            Bytes.fromNat(transaction.gasPrice),\n            Bytes.fromNat(transaction.gas),\n            transaction.from.toLowerCase(),\n            accountKey,\n            Bytes.fromNat(transaction.feeRatio),\n        ]),\n        Bytes.fromNat(transaction.chainId || '0x1'),\n        '0x',\n        '0x',\n    ])\n}\n\nfunction resolveRawKeyToAccountKey(transaction) {\n    // Handles the case where AccountForUpdate is set in key field in transaction object to update account.\n    if (transaction.key) {\n        if (transaction.from && transaction.from.toLowerCase() !== transaction.key.address.toLowerCase()) {\n            throw new Error('The value of the from field of the transaction does not match the address of AccountForUpdate.')\n        }\n        transaction.key.fillUpdateObject(transaction)\n    }\n\n    if (transaction.legacyKey) return ACCOUNT_KEY_LEGACY_TAG\n    if (transaction.failKey) return ACCOUNT_KEY_FAIL_TAG\n\n    if (transaction.multisig) {\n        const { threshold, keys } = transaction.multisig\n\n        const encodedMultisigPublicKeys = keys.map(({ weight, publicKey }) => {\n            if (!weight) throw new Error('weight should be specified for multisig account')\n            if (!publicKey) throw new Error('publicKey should be specified for multisig account')\n\n            const compressedPublicKey = utils.compressPublicKey(publicKey)\n\n            return [Bytes.fromNat(utils.numberToHex(weight)), compressedPublicKey]\n        })\n\n        return (\n            ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG +\n            RLP.encode([Bytes.fromNat(utils.numberToHex(threshold)), encodedMultisigPublicKeys]).slice(2)\n        )\n    }\n\n    if (transaction.publicKey) {\n        const compressedPublicKey = utils.compressPublicKey(transaction.publicKey)\n\n        return ACCOUNT_KEY_PUBLIC_TAG + RLP.encode(compressedPublicKey).slice(2)\n    }\n\n    if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n        // Create a new object so as not to damage the input transaction object.\n        const roleBasedObject = {}\n\n        roleBasedObject.roleTransactionKey = transaction.roleTransactionKey\n            ? resolveRawKeyToAccountKey(transaction.roleTransactionKey)\n            : ACCOUNT_KEY_NIL_TAG\n        roleBasedObject.roleAccountUpdateKey = transaction.roleAccountUpdateKey\n            ? resolveRawKeyToAccountKey(transaction.roleAccountUpdateKey)\n            : ACCOUNT_KEY_NIL_TAG\n        roleBasedObject.roleFeePayerKey = transaction.roleFeePayerKey\n            ? resolveRawKeyToAccountKey(transaction.roleFeePayerKey)\n            : ACCOUNT_KEY_NIL_TAG\n\n        const keys = [roleBasedObject.roleTransactionKey, roleBasedObject.roleAccountUpdateKey, roleBasedObject.roleFeePayerKey]\n        return ACCOUNT_KEY_ROLE_BASED_TAG + RLP.encode(keys).slice(2)\n    }\n\n    return ACCOUNT_KEY_NIL_TAG\n}\n\nfunction parseAccountKey(transaction) {\n    const key = transaction.accountKey\n    delete transaction.accountKey\n\n    if (key.startsWith(ACCOUNT_KEY_LEGACY_TAG)) {\n        transaction.legacyKey = true\n    } else if (key.startsWith(ACCOUNT_KEY_FAIL_TAG)) {\n        transaction.failKey = true\n    } else if (key.startsWith(ACCOUNT_KEY_PUBLIC_TAG)) {\n        transaction.publicKey = RLP.decode(`0x${key.slice(ACCOUNT_KEY_PUBLIC_TAG.length)}`)\n    } else if (key.startsWith(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG)) {\n        let [threshold, multiSigkeys] = RLP.decode(`0x${key.slice(ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG.length)}`)\n        multiSigkeys = multiSigkeys.map(k => {\n            return { weight: utils.hexToNumber(k[0]), publicKey: k[1] }\n        })\n        transaction.multisig = {\n            threshold: utils.hexToNumber(threshold),\n            keys: multiSigkeys,\n        }\n    } else if (key.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) {\n        const keys = RLP.decode(`0x${key.slice(ACCOUNT_KEY_ROLE_BASED_TAG.length)}`)\n        keys.map(k => {\n            if (k.startsWith(ACCOUNT_KEY_ROLE_BASED_TAG)) throw new Error('Nested role based key.')\n        })\n\n        if (keys.length > 0 && !keys[0].startsWith(ACCOUNT_KEY_NIL_TAG))\n            transaction.roleTransactionKey = parseAccountKey({\n                accountKey: keys[0],\n            })\n        if (keys.length > 1 && !keys[1].startsWith(ACCOUNT_KEY_NIL_TAG))\n            transaction.roleAccountUpdateKey = parseAccountKey({\n                accountKey: keys[1],\n            })\n        if (keys.length > 2 && !keys[2].startsWith(ACCOUNT_KEY_NIL_TAG))\n            transaction.roleFeePayerKey = parseAccountKey({\n                accountKey: keys[2],\n            })\n    }\n\n    return transaction\n}\n\nmodule.exports = {\n    rlpEncodeForAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdate,\n    rlpEncodeForFeeDelegatedAccountUpdateWithRatio,\n    parseAccountKey,\n}\n"]},"metadata":{},"sourceType":"script"}