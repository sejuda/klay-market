{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/formatters.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst utils = require('../../caver-utils');\n\nconst validateParams = require('../../caver-core-helpers/src/validateFunction').validateParams;\n\nconst {\n  getTypeInt\n} = require('../../caver-transaction/src/transactionHelper/transactionHelper');\n\nconst AccountKeyLegacy = require('../../caver-account/src/accountKey/accountKeyLegacy');\n\nconst AccountKeyPublic = require('../../caver-account/src/accountKey/accountKeyPublic');\n\nconst AccountKeyFail = require('../../caver-account/src/accountKey/accountKeyFail');\n\nconst AccountKeyWeightedMultiSig = require('../../caver-account/src/accountKey/accountKeyWeightedMultiSig');\n\nconst AccountKeyRoleBased = require('../../caver-account/src/accountKey/accountKeyRoleBased');\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\n\n\nconst outputBigNumberFormatter = function (number) {\n  return utils.toBN(number).toString(10);\n};\n\nconst inputDefaultBlockNumberFormatter = function (blockNumber) {\n  if (this && (blockNumber === undefined || blockNumber === null)) {\n    return utils.parsePredefinedBlockNumber(this.defaultBlock) || 'latest';\n  }\n\n  return inputBlockNumberFormatter(blockNumber);\n};\n\nconst inputBlockNumberFormatter = function (blockNumber) {\n  if (blockNumber === undefined) {\n    return undefined;\n  }\n\n  if (utils.isPredefinedBlockNumber(blockNumber)) {\n    return utils.parsePredefinedBlockNumber(blockNumber);\n  }\n\n  return utils.isHexStrict(blockNumber) ? _.isString(blockNumber) ? blockNumber.toLowerCase() : blockNumber : utils.numberToHex(blockNumber);\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\n\n\nconst _txInputFormatter = function (options) {\n  if (options.from) {\n    options.from = inputAddressFormatter(options.from);\n  }\n\n  if (options.to) {\n    if (options.type && options.type.includes('DEPLOY')) options.humanReadable = options.humanReadable !== undefined ? options.humanReadable : false;\n    if (options.humanReadable) throw new Error('HumanReadableAddress is not supported yet.');\n\n    if (!utils.isContractDeployment(options) || options.to !== '0x') {\n      options.to = inputAddressFormatter(options.to);\n    }\n  }\n\n  if (options.data && options.input && !options.type.includes('TxType')) {\n    throw new Error('You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.');\n  }\n\n  if (!options.data && options.input) {\n    options.data = options.input;\n    delete options.input;\n  }\n\n  if (options.data && !utils.isHex(options.data)) {\n    options.data = utils.toHex(options.data);\n  } // allow both\n\n\n  if (options.gas || options.gasLimit) {\n    options.gas = options.gas || options.gasLimit;\n  }\n\n  const fieldToBeHex = ['gasPrice', 'gas', 'value', 'nonce', 'feeRatio'];\n  fieldToBeHex.filter(function (key) {\n    return options[key] !== undefined;\n  }).forEach(function (key) {\n    options[key] = utils.numberToHex(options[key]);\n  });\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */\n\n\nconst inputCallFormatter = function (options) {\n  options = _txInputFormatter(options);\n  const from = options.from || (this ? this.defaultAccount : null);\n\n  if (from) {\n    options.from = inputAddressFormatter(from);\n  }\n\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */\n\n\nconst inputTransactionFormatter = function (options) {\n  options = _txInputFormatter(options); // If senderRawTransaction' exist in transaction, it means object is fee payer transaction format like below\n  // { senderRawTransaction: '', feePayer: '' }\n\n  if (options.senderRawTransaction) {\n    if (options.feePayer === undefined) {\n      throw new Error('The \"feePayer\" field must be defined for signing with feePayer!');\n    }\n\n    options.feePayer = inputAddressFormatter(options.feePayer);\n    return options;\n  } // check from, only if not number, or object\n\n\n  if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n    options.from = options.from || (this ? this.defaultAccount : null);\n\n    if (!options.from && !_.isNumber(options.from)) {\n      throw new Error('The send transactions \"from\" field must be defined!');\n    }\n\n    options.from = inputAddressFormatter(options.from);\n  }\n\n  if (options.data) {\n    options.data = utils.addHexPrefix(options.data);\n  }\n\n  const err = validateParams(options);\n\n  if (err) {\n    throw err;\n  } // Set typeInt value in object\n\n\n  const typeInt = getTypeInt(options.type);\n  if (typeInt !== '') options.typeInt = typeInt;\n  return options;\n};\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputPersonalTransactionFormatter\n * @param {Object} options\n * @returns object\n */\n\n\nconst inputPersonalTransactionFormatter = function (options) {\n  options = _txInputFormatter(options); // check from, only if not number, or object\n\n  if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n    options.from = options.from || (this ? this.defaultAccount : null);\n\n    if (!options.from && !_.isNumber(options.from)) {\n      throw new Error('The send transactions \"from\" field must be defined!');\n    }\n\n    options.from = inputAddressFormatter(options.from);\n  }\n\n  if (options.data) {\n    options.data = utils.addHexPrefix(options.data);\n  }\n\n  return options;\n};\n/**\n * Hex encodes the data passed to klay_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\n\n\nconst inputSignFormatter = function (data) {\n  return utils.isHexStrict(data) ? data : utils.utf8ToHex(data);\n};\n/**\n * Formats the accountKey to object which defines `keyType` and `key`\n *\n * @method inputAccountKeyFormatter\n * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased|object} accountKey\n * @returns {object}\n */\n\n\nconst inputAccountKeyFormatter = function (accountKey) {\n  if (accountKey instanceof AccountKeyLegacy) return {\n    keyType: 1,\n    key: {}\n  };\n  if (accountKey instanceof AccountKeyPublic) return {\n    keyType: 2,\n    key: {\n      x: accountKey.getXYPoint()[0],\n      y: accountKey.getXYPoint()[1]\n    }\n  };\n  if (accountKey instanceof AccountKeyFail) return {\n    keyType: 3,\n    key: {}\n  };\n\n  if (accountKey instanceof AccountKeyWeightedMultiSig) {\n    const weightedMultiSig = {\n      threshold: accountKey.threshold,\n      keys: []\n    };\n\n    for (const wp of accountKey.weightedPublicKeys) {\n      weightedMultiSig.keys.push({\n        weight: wp.weight,\n        key: {\n          x: utils.xyPointFromPublicKey(wp.publicKey)[0],\n          y: utils.xyPointFromPublicKey(wp.publicKey)[1]\n        }\n      });\n    }\n\n    return {\n      keyType: 4,\n      key: weightedMultiSig\n    };\n  }\n\n  if (accountKey instanceof AccountKeyRoleBased) {\n    const key = [];\n\n    for (const k of accountKey.accountKeys) {\n      key.push(inputAccountKeyFormatter(k));\n    }\n\n    return {\n      keyType: 5,\n      key\n    };\n  }\n\n  if (accountKey.keyType === undefined || accountKey.key === undefined) {\n    throw new Error(`AccountKey obejct should define 'keyType' and 'key'`);\n  }\n\n  return accountKey;\n};\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */\n\n\nconst outputTransactionFormatter = function (tx) {\n  if (!tx) return null;\n\n  if (tx.blockNumber !== undefined) {\n    tx.blockNumber = utils.hexToNumber(tx.blockNumber);\n  }\n\n  if (tx.transactionIndex !== undefined) {\n    tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);\n  }\n\n  tx.nonce = utils.hexToNumber(tx.nonce);\n  tx.gas = utils.hexToNumber(tx.gas);\n  tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);\n\n  if (tx.value) {\n    tx.value = outputBigNumberFormatter(tx.value);\n  }\n\n  if (tx.to && utils.isAddress(tx.to)) {\n    // tx.to could be `0x0` or `null` while contract creation\n    tx.to = utils.toChecksumAddress(tx.to);\n  } else {\n    tx.to = null; // set to `null` if invalid address\n  }\n\n  if (tx.from) {\n    tx.from = utils.toChecksumAddress(tx.from);\n  }\n\n  return tx;\n};\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */\n\n\nconst outputTransactionReceiptFormatter = function (receipt) {\n  if (!receipt) return null;\n\n  if (typeof receipt !== 'object') {\n    throw new Error(`Received receipt is invalid: ${receipt}`);\n  }\n\n  if (receipt.blockNumber !== undefined) {\n    receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);\n  }\n\n  if (receipt.transactionIndex !== undefined) {\n    receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);\n  }\n\n  receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);\n\n  if (_.isArray(receipt.logs)) {\n    receipt.logs = receipt.logs.map(outputLogFormatter);\n  }\n\n  if (receipt.contractAddress) {\n    receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);\n  }\n\n  if (typeof receipt.status !== 'undefined') {\n    receipt.status = parseInt(receipt.status) === 1;\n  }\n\n  return receipt;\n};\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */\n\n\nconst outputBlockFormatter = function (block) {\n  // transform to number\n  block.gasLimit = utils.hexToNumber(block.gasLimit);\n  block.gasUsed = utils.hexToNumber(block.gasUsed);\n  block.size = utils.hexToNumber(block.size);\n  block.timestamp = utils.hexToNumber(block.timestamp);\n\n  if (block.number !== undefined) {\n    block.number = utils.hexToNumber(block.number);\n  }\n\n  if (block.difficulty) {\n    block.difficulty = outputBigNumberFormatter(block.difficulty);\n  }\n\n  if (block.totalDifficulty) {\n    block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);\n  }\n\n  if (_.isArray(block.transactions)) {\n    block.transactions.forEach(function (item) {\n      if (!_.isString(item)) {\n        return outputTransactionFormatter(item);\n      }\n    });\n  }\n\n  if (block.miner) {\n    block.miner = utils.toChecksumAddress(block.miner);\n  }\n\n  return block;\n};\n/**\n * inputLogFormatter's inner function\n * format topic values\n */\n\n\nconst toTopic = function (value) {\n  if (value === null || typeof value === 'undefined') {\n    return null;\n  }\n\n  value = String(value); // If value is not hex string, return it\n\n  if (value.indexOf('0x') === 0) {\n    return value;\n  }\n\n  return utils.fromUtf8(value);\n};\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\n\n\nconst inputLogFormatter = function (options) {\n  // make sure topics, get converted to hex\n  options.topics = (options.topics || []).map(topic => _.isArray(topic) ? topic.map(toTopic) : toTopic(topic));\n\n  if (options.address) {\n    options.address = _.isArray(options.address) ? options.address.map(addr => inputAddressFormatter(addr)) : inputAddressFormatter(options.address);\n  } // if `fromBlock`, `toBlock` type is number, convert it to hex string.\n\n\n  options.fromBlock = typeof options.fromBlock === 'number' ? utils.numberToHex(options.fromBlock) : options.fromBlock;\n  options.toBlock = typeof options.toBlock === 'number' ? utils.numberToHex(options.toBlock) : options.toBlock;\n  return options;\n};\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\n\n\nconst outputLogFormatter = function (log) {\n  // `removed` field is unnecessary,\n  // since it isn't possible for block to be removed in Klaytn consensus scenario.\n  delete log.removed; // generate a custom log id\n\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n    const shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n    log.id = `log_${shaId.replace('0x', '').substr(0, 8)}`;\n  } else if (!log.id) {\n    log.id = null;\n  }\n\n  if (log.blockNumber !== undefined) {\n    log.blockNumber = utils.hexToNumber(log.blockNumber);\n  }\n\n  if (log.transactionIndex !== undefined) {\n    log.transactionIndex = utils.hexToNumber(log.transactionIndex);\n  }\n\n  if (log.logIndex !== undefined) {\n    log.logIndex = utils.hexToNumber(log.logIndex);\n  }\n\n  if (log.address) {\n    log.address = utils.toChecksumAddress(log.address);\n  }\n\n  return log;\n};\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */\n\n\nconst inputPostFormatter = function (post) {\n  // post.payload = utils.toHex(post.payload);\n  if (post.ttl) {\n    post.ttl = utils.numberToHex(post.ttl);\n  }\n\n  if (post.workToProve) {\n    post.workToProve = utils.numberToHex(post.workToProve);\n  }\n\n  if (post.priority) {\n    post.priority = utils.numberToHex(post.priority);\n  } // fallback\n\n\n  if (!_.isArray(post.topics)) {\n    post.topics = post.topics ? [post.topics] : [];\n  } // format the following options\n\n\n  post.topics = post.topics.map(function (topic) {\n    // convert only if not hex\n    return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic);\n  });\n  return post;\n};\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\n\n\nconst outputPostFormatter = function (post) {\n  post.expiry = utils.hexToNumber(post.expiry);\n  post.sent = utils.hexToNumber(post.sent);\n  post.ttl = utils.hexToNumber(post.ttl);\n  post.workProved = utils.hexToNumber(post.workProved); // post.payloadRaw = post.payload;\n  // post.payload = utils.hexToAscii(post.payload);\n  // if (utils.isJson(post.payload)) {\n  //     post.payload = JSON.parse(post.payload);\n  // }\n  // format the following options\n\n  if (!post.topics) {\n    post.topics = [];\n  }\n\n  post.topics = post.topics.map(function (topic) {\n    return utils.toUtf8(topic);\n  });\n  return post;\n};\n\nconst inputAddressFormatter = function (address) {\n  const iban = new utils.Iban(address);\n\n  if (iban.isValid() && iban.isDirect()) {\n    return iban.toAddress().toLowerCase();\n  }\n\n  if (utils.isAddress(address)) {\n    return `0x${address.toLowerCase().replace('0x', '')}`;\n  }\n\n  throw new Error(`Provided address \"${address}\" is invalid, the capitalization checksum test failed.`);\n};\n\nconst outputSyncingFormatter = function (result) {\n  result.startingBlock = utils.hexToNumber(result.startingBlock);\n  result.currentBlock = utils.hexToNumber(result.currentBlock);\n  result.highestBlock = utils.hexToNumber(result.highestBlock);\n\n  if (result.knownStates) {\n    result.knownStates = utils.hexToNumber(result.knownStates);\n    result.pulledStates = utils.hexToNumber(result.pulledStates);\n  }\n\n  return result;\n};\n\nconst inputRawKeyFormatter = function (rawKey) {\n  if (rawKey.slice(0, 2) === '0x') rawKey = rawKey.slice(2);\n  return rawKey;\n};\n\nconst toBoolean = v => !!v;\n\nmodule.exports = {\n  inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n  inputBlockNumberFormatter: inputBlockNumberFormatter,\n  inputCallFormatter: inputCallFormatter,\n  inputTransactionFormatter: inputTransactionFormatter,\n  inputPersonalTransactionFormatter: inputPersonalTransactionFormatter,\n  inputAddressFormatter: inputAddressFormatter,\n  inputPostFormatter: inputPostFormatter,\n  inputLogFormatter: inputLogFormatter,\n  inputSignFormatter: inputSignFormatter,\n  inputRawKeyFormatter: inputRawKeyFormatter,\n  inputAccountKeyFormatter: inputAccountKeyFormatter,\n  outputBigNumberFormatter: outputBigNumberFormatter,\n  outputTransactionFormatter: outputTransactionFormatter,\n  outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n  outputBlockFormatter: outputBlockFormatter,\n  outputLogFormatter: outputLogFormatter,\n  outputPostFormatter: outputPostFormatter,\n  outputSyncingFormatter: outputSyncingFormatter,\n  // moved from util\n  toChecksumAddress: utils.toChecksumAddress,\n  hexToNumber: utils.hexToNumber,\n  numberToHex: utils.numberToHex,\n  toBoolean: toBoolean\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-core-helpers/src/formatters.js"],"names":["_","require","utils","validateParams","getTypeInt","AccountKeyLegacy","AccountKeyPublic","AccountKeyFail","AccountKeyWeightedMultiSig","AccountKeyRoleBased","outputBigNumberFormatter","number","toBN","toString","inputDefaultBlockNumberFormatter","blockNumber","undefined","parsePredefinedBlockNumber","defaultBlock","inputBlockNumberFormatter","isPredefinedBlockNumber","isHexStrict","isString","toLowerCase","numberToHex","_txInputFormatter","options","from","inputAddressFormatter","to","type","includes","humanReadable","Error","isContractDeployment","data","input","isHex","toHex","gas","gasLimit","fieldToBeHex","filter","key","forEach","inputCallFormatter","defaultAccount","inputTransactionFormatter","senderRawTransaction","feePayer","isNumber","isObject","addHexPrefix","err","typeInt","inputPersonalTransactionFormatter","inputSignFormatter","utf8ToHex","inputAccountKeyFormatter","accountKey","keyType","x","getXYPoint","y","weightedMultiSig","threshold","keys","wp","weightedPublicKeys","push","weight","xyPointFromPublicKey","publicKey","k","accountKeys","outputTransactionFormatter","tx","hexToNumber","transactionIndex","nonce","gasPrice","value","isAddress","toChecksumAddress","outputTransactionReceiptFormatter","receipt","gasUsed","isArray","logs","map","outputLogFormatter","contractAddress","status","parseInt","outputBlockFormatter","block","size","timestamp","difficulty","totalDifficulty","transactions","item","miner","toTopic","String","indexOf","fromUtf8","inputLogFormatter","topics","topic","address","addr","fromBlock","toBlock","log","removed","blockHash","transactionHash","logIndex","shaId","sha3","replace","id","substr","inputPostFormatter","post","ttl","workToProve","priority","outputPostFormatter","expiry","sent","workProved","toUtf8","iban","Iban","isValid","isDirect","toAddress","outputSyncingFormatter","result","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","inputRawKeyFormatter","rawKey","slice","toBoolean","v","module","exports"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-helpers/src/formatters.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file formatters.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\nconst _ = require('lodash')\nconst utils = require('../../caver-utils')\nconst validateParams = require('../../caver-core-helpers/src/validateFunction').validateParams\nconst { getTypeInt } = require('../../caver-transaction/src/transactionHelper/transactionHelper')\nconst AccountKeyLegacy = require('../../caver-account/src/accountKey/accountKeyLegacy')\nconst AccountKeyPublic = require('../../caver-account/src/accountKey/accountKeyPublic')\nconst AccountKeyFail = require('../../caver-account/src/accountKey/accountKeyFail')\nconst AccountKeyWeightedMultiSig = require('../../caver-account/src/accountKey/accountKeyWeightedMultiSig')\nconst AccountKeyRoleBased = require('../../caver-account/src/accountKey/accountKeyRoleBased')\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber} number\n * @returns {BigNumber} object\n */\nconst outputBigNumberFormatter = function(number) {\n    return utils.toBN(number).toString(10)\n}\n\nconst inputDefaultBlockNumberFormatter = function(blockNumber) {\n    if (this && (blockNumber === undefined || blockNumber === null)) {\n        return utils.parsePredefinedBlockNumber(this.defaultBlock) || 'latest'\n    }\n    return inputBlockNumberFormatter(blockNumber)\n}\n\nconst inputBlockNumberFormatter = function(blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined\n    }\n    if (utils.isPredefinedBlockNumber(blockNumber)) {\n        return utils.parsePredefinedBlockNumber(blockNumber)\n    }\n    return utils.isHexStrict(blockNumber)\n        ? _.isString(blockNumber)\n            ? blockNumber.toLowerCase()\n            : blockNumber\n        : utils.numberToHex(blockNumber)\n}\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method _txInputFormatter\n * @param {Object} transaction options\n * @returns object\n */\nconst _txInputFormatter = function(options) {\n    if (options.from) {\n        options.from = inputAddressFormatter(options.from)\n    }\n\n    if (options.to) {\n        if (options.type && options.type.includes('DEPLOY'))\n            options.humanReadable = options.humanReadable !== undefined ? options.humanReadable : false\n\n        if (options.humanReadable) throw new Error('HumanReadableAddress is not supported yet.')\n        if (!utils.isContractDeployment(options) || options.to !== '0x') {\n            options.to = inputAddressFormatter(options.to)\n        }\n    }\n\n    if (options.data && options.input && !options.type.includes('TxType')) {\n        throw new Error(\n            'You can\\'t have \"data\" and \"input\" as properties of transactions at the same time, please use either \"data\" or \"input\" instead.'\n        )\n    }\n\n    if (!options.data && options.input) {\n        options.data = options.input\n        delete options.input\n    }\n\n    if (options.data && !utils.isHex(options.data)) {\n        options.data = utils.toHex(options.data)\n    }\n\n    // allow both\n    if (options.gas || options.gasLimit) {\n        options.gas = options.gas || options.gasLimit\n    }\n\n    const fieldToBeHex = ['gasPrice', 'gas', 'value', 'nonce', 'feeRatio']\n\n    fieldToBeHex\n        .filter(function(key) {\n            return options[key] !== undefined\n        })\n        .forEach(function(key) {\n            options[key] = utils.numberToHex(options[key])\n        })\n\n    return options\n}\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n */\nconst inputCallFormatter = function(options) {\n    options = _txInputFormatter(options)\n\n    const from = options.from || (this ? this.defaultAccount : null)\n\n    if (from) {\n        options.from = inputAddressFormatter(from)\n    }\n\n    return options\n}\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} options\n * @returns object\n */\nconst inputTransactionFormatter = function(options) {\n    options = _txInputFormatter(options)\n\n    // If senderRawTransaction' exist in transaction, it means object is fee payer transaction format like below\n    // { senderRawTransaction: '', feePayer: '' }\n    if (options.senderRawTransaction) {\n        if (options.feePayer === undefined) {\n            throw new Error('The \"feePayer\" field must be defined for signing with feePayer!')\n        }\n        options.feePayer = inputAddressFormatter(options.feePayer)\n        return options\n    }\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null)\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!')\n        }\n\n        options.from = inputAddressFormatter(options.from)\n    }\n\n    if (options.data) {\n        options.data = utils.addHexPrefix(options.data)\n    }\n\n    const err = validateParams(options)\n    if (err) {\n        throw err\n    }\n\n    // Set typeInt value in object\n    const typeInt = getTypeInt(options.type)\n    if (typeInt !== '') options.typeInt = typeInt\n\n    return options\n}\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputPersonalTransactionFormatter\n * @param {Object} options\n * @returns object\n */\nconst inputPersonalTransactionFormatter = function(options) {\n    options = _txInputFormatter(options)\n\n    // check from, only if not number, or object\n    if (!_.isNumber(options.from) && !_.isObject(options.from)) {\n        options.from = options.from || (this ? this.defaultAccount : null)\n\n        if (!options.from && !_.isNumber(options.from)) {\n            throw new Error('The send transactions \"from\" field must be defined!')\n        }\n\n        options.from = inputAddressFormatter(options.from)\n    }\n\n    if (options.data) {\n        options.data = utils.addHexPrefix(options.data)\n    }\n\n    return options\n}\n\n/**\n * Hex encodes the data passed to klay_sign and personal_sign\n *\n * @method inputSignFormatter\n * @param {String} data\n * @returns {String}\n */\nconst inputSignFormatter = function(data) {\n    return utils.isHexStrict(data) ? data : utils.utf8ToHex(data)\n}\n\n/**\n * Formats the accountKey to object which defines `keyType` and `key`\n *\n * @method inputAccountKeyFormatter\n * @param {AccountKeyLegacy|AccountKeyPublic|AccountKeyFail|AccountKeyWeightedMultiSig|AccountKeyRoleBased|object} accountKey\n * @returns {object}\n */\nconst inputAccountKeyFormatter = function(accountKey) {\n    if (accountKey instanceof AccountKeyLegacy) return { keyType: 1, key: {} }\n    if (accountKey instanceof AccountKeyPublic) return { keyType: 2, key: { x: accountKey.getXYPoint()[0], y: accountKey.getXYPoint()[1] } }\n    if (accountKey instanceof AccountKeyFail) return { keyType: 3, key: {} }\n    if (accountKey instanceof AccountKeyWeightedMultiSig) {\n        const weightedMultiSig = { threshold: accountKey.threshold, keys: [] }\n        for (const wp of accountKey.weightedPublicKeys) {\n            weightedMultiSig.keys.push({\n                weight: wp.weight,\n                key: {\n                    x: utils.xyPointFromPublicKey(wp.publicKey)[0],\n                    y: utils.xyPointFromPublicKey(wp.publicKey)[1],\n                },\n            })\n        }\n        return { keyType: 4, key: weightedMultiSig }\n    }\n    if (accountKey instanceof AccountKeyRoleBased) {\n        const key = []\n        for (const k of accountKey.accountKeys) {\n            key.push(inputAccountKeyFormatter(k))\n        }\n        return { keyType: 5, key }\n    }\n\n    if (accountKey.keyType === undefined || accountKey.key === undefined) {\n        throw new Error(`AccountKey obejct should define 'keyType' and 'key'`)\n    }\n\n    return accountKey\n}\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n */\nconst outputTransactionFormatter = function(tx) {\n    if (!tx) return null\n\n    if (tx.blockNumber !== undefined) {\n        tx.blockNumber = utils.hexToNumber(tx.blockNumber)\n    }\n    if (tx.transactionIndex !== undefined) {\n        tx.transactionIndex = utils.hexToNumber(tx.transactionIndex)\n    }\n    tx.nonce = utils.hexToNumber(tx.nonce)\n    tx.gas = utils.hexToNumber(tx.gas)\n    tx.gasPrice = outputBigNumberFormatter(tx.gasPrice)\n    if (tx.value) {\n        tx.value = outputBigNumberFormatter(tx.value)\n    }\n\n    if (tx.to && utils.isAddress(tx.to)) {\n        // tx.to could be `0x0` or `null` while contract creation\n        tx.to = utils.toChecksumAddress(tx.to)\n    } else {\n        tx.to = null // set to `null` if invalid address\n    }\n\n    if (tx.from) {\n        tx.from = utils.toChecksumAddress(tx.from)\n    }\n\n    return tx\n}\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n */\nconst outputTransactionReceiptFormatter = function(receipt) {\n    if (!receipt) return null\n\n    if (typeof receipt !== 'object') {\n        throw new Error(`Received receipt is invalid: ${receipt}`)\n    }\n\n    if (receipt.blockNumber !== undefined) {\n        receipt.blockNumber = utils.hexToNumber(receipt.blockNumber)\n    }\n    if (receipt.transactionIndex !== undefined) {\n        receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex)\n    }\n    receipt.gasUsed = utils.hexToNumber(receipt.gasUsed)\n\n    if (_.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(outputLogFormatter)\n    }\n\n    if (receipt.contractAddress) {\n        receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress)\n    }\n\n    if (typeof receipt.status !== 'undefined') {\n        receipt.status = parseInt(receipt.status) === 1\n    }\n\n    return receipt\n}\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n */\nconst outputBlockFormatter = function(block) {\n    // transform to number\n    block.gasLimit = utils.hexToNumber(block.gasLimit)\n    block.gasUsed = utils.hexToNumber(block.gasUsed)\n    block.size = utils.hexToNumber(block.size)\n    block.timestamp = utils.hexToNumber(block.timestamp)\n    if (block.number !== undefined) {\n        block.number = utils.hexToNumber(block.number)\n    }\n\n    if (block.difficulty) {\n        block.difficulty = outputBigNumberFormatter(block.difficulty)\n    }\n    if (block.totalDifficulty) {\n        block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty)\n    }\n\n    if (_.isArray(block.transactions)) {\n        block.transactions.forEach(function(item) {\n            if (!_.isString(item)) {\n                return outputTransactionFormatter(item)\n            }\n        })\n    }\n\n    if (block.miner) {\n        block.miner = utils.toChecksumAddress(block.miner)\n    }\n\n    return block\n}\n\n/**\n * inputLogFormatter's inner function\n * format topic values\n */\nconst toTopic = function(value) {\n    if (value === null || typeof value === 'undefined') {\n        return null\n    }\n\n    value = String(value)\n\n    // If value is not hex string, return it\n    if (value.indexOf('0x') === 0) {\n        return value\n    }\n    return utils.fromUtf8(value)\n}\n\n/**\n * Formats the input of a log\n *\n * @method inputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nconst inputLogFormatter = function(options) {\n    // make sure topics, get converted to hex\n    options.topics = (options.topics || []).map(topic => (_.isArray(topic) ? topic.map(toTopic) : toTopic(topic)))\n\n    if (options.address) {\n        options.address = _.isArray(options.address)\n            ? options.address.map(addr => inputAddressFormatter(addr))\n            : inputAddressFormatter(options.address)\n    }\n\n    // if `fromBlock`, `toBlock` type is number, convert it to hex string.\n\n    options.fromBlock = typeof options.fromBlock === 'number' ? utils.numberToHex(options.fromBlock) : options.fromBlock\n\n    options.toBlock = typeof options.toBlock === 'number' ? utils.numberToHex(options.toBlock) : options.toBlock\n\n    return options\n}\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n */\nconst outputLogFormatter = function(log) {\n    // `removed` field is unnecessary,\n    // since it isn't possible for block to be removed in Klaytn consensus scenario.\n    delete log.removed\n\n    // generate a custom log id\n    if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n        const shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''))\n        log.id = `log_${shaId.replace('0x', '').substr(0, 8)}`\n    } else if (!log.id) {\n        log.id = null\n    }\n\n    if (log.blockNumber !== undefined) {\n        log.blockNumber = utils.hexToNumber(log.blockNumber)\n    }\n    if (log.transactionIndex !== undefined) {\n        log.transactionIndex = utils.hexToNumber(log.transactionIndex)\n    }\n    if (log.logIndex !== undefined) {\n        log.logIndex = utils.hexToNumber(log.logIndex)\n    }\n    if (log.address) {\n        log.address = utils.toChecksumAddress(log.address)\n    }\n\n    return log\n}\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n */\nconst inputPostFormatter = function(post) {\n    // post.payload = utils.toHex(post.payload);\n\n    if (post.ttl) {\n        post.ttl = utils.numberToHex(post.ttl)\n    }\n    if (post.workToProve) {\n        post.workToProve = utils.numberToHex(post.workToProve)\n    }\n    if (post.priority) {\n        post.priority = utils.numberToHex(post.priority)\n    }\n\n    // fallback\n    if (!_.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : []\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic) {\n        // convert only if not hex\n        return topic.indexOf('0x') === 0 ? topic : utils.fromUtf8(topic)\n    })\n\n    return post\n}\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nconst outputPostFormatter = function(post) {\n    post.expiry = utils.hexToNumber(post.expiry)\n    post.sent = utils.hexToNumber(post.sent)\n    post.ttl = utils.hexToNumber(post.ttl)\n    post.workProved = utils.hexToNumber(post.workProved)\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.hexToAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = []\n    }\n    post.topics = post.topics.map(function(topic) {\n        return utils.toUtf8(topic)\n    })\n\n    return post\n}\n\nconst inputAddressFormatter = function(address) {\n    const iban = new utils.Iban(address)\n    if (iban.isValid() && iban.isDirect()) {\n        return iban.toAddress().toLowerCase()\n    }\n    if (utils.isAddress(address)) {\n        return `0x${address.toLowerCase().replace('0x', '')}`\n    }\n\n    throw new Error(`Provided address \"${address}\" is invalid, the capitalization checksum test failed.`)\n}\n\nconst outputSyncingFormatter = function(result) {\n    result.startingBlock = utils.hexToNumber(result.startingBlock)\n    result.currentBlock = utils.hexToNumber(result.currentBlock)\n    result.highestBlock = utils.hexToNumber(result.highestBlock)\n    if (result.knownStates) {\n        result.knownStates = utils.hexToNumber(result.knownStates)\n        result.pulledStates = utils.hexToNumber(result.pulledStates)\n    }\n\n    return result\n}\n\nconst inputRawKeyFormatter = function(rawKey) {\n    if (rawKey.slice(0, 2) === '0x') rawKey = rawKey.slice(2)\n    return rawKey\n}\n\nconst toBoolean = v => !!v\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputPersonalTransactionFormatter: inputPersonalTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    inputLogFormatter: inputLogFormatter,\n    inputSignFormatter: inputSignFormatter,\n    inputRawKeyFormatter: inputRawKeyFormatter,\n    inputAccountKeyFormatter: inputAccountKeyFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter,\n    // moved from util\n    toChecksumAddress: utils.toChecksumAddress,\n    hexToNumber: utils.hexToNumber,\n    numberToHex: utils.numberToHex,\n    toBoolean: toBoolean,\n}\n"]},"metadata":{},"sourceType":"script"}