{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst WeightedMultiSigOptions = require('./weightedMultiSigOptions');\n\nconst ACCOUNT_KEY_TAG = {\n  ACCOUNT_KEY_NIL_TAG: '0x80',\n  ACCOUNT_KEY_LEGACY_TAG: '0x01c0',\n  ACCOUNT_KEY_PUBLIC_TAG: '0x02',\n  ACCOUNT_KEY_FAIL_TAG: '0x03c0',\n  ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG: '0x04',\n  ACCOUNT_KEY_ROLE_BASED_TAG: '0x05'\n};\n/**\n * Creates and returns the valid instance of WeightedMultiSigOptions for AccountKeyWeightedMultiSig.\n * If the user does not define the values of options(threshold, weights),\n * default options(threshold is 1 and the weight of each key is 1) are returned.\n *\n * @param {number} lengthOfKeys The lenght of keys.\n * @param {WeightedMultiSigOptions|object} [options] An instance of WeightedMultiSigOptions or an object that defines 'threshold' and 'weight'.\n * @return {WeightedMultiSigOptions}\n */\n\nconst fillWeightedMultiSigOptionsForMultiSig = (lengthOfKeys, options) => {\n  if (_.isArray(options)) throw new Error(`For AccountKeyWeightedMultiSig, options cannot be defined as an array of WeightedMultiSigOptions.`);\n  if (!options) options = new WeightedMultiSigOptions(1, Array(lengthOfKeys).fill(1));\n  if (!(options instanceof WeightedMultiSigOptions)) options = WeightedMultiSigOptions.fromObject(options);\n  return options.isEmpty() ? new WeightedMultiSigOptions(1, Array(lengthOfKeys).fill(1)) : options;\n};\n/**\n * Creates and returns the valid instance of WeightedMultiSigOptions for AccountKeyRoleBased.\n * If the user does not define the values of options(threshold, weights),\n * default options(threshold is 1 and the weight of each key is 1) will be used for each role key.\n *\n * @param {Array.<number>} lengthOfKeys The lenght of keys.\n * @param {Array.<WeightedMultiSigOptions>|Array.<object>} [options] An array of WeightedMultiSigOptions or object that defines 'threshold' and 'weight'.\n * @return {Array.<WeightedMultiSigOptions>}\n */\n\n\nconst fillWeightedMultiSigOptionsForRoleBased = (lengthOfKeys, options = []) => {\n  if (!_.isArray(options)) throw new Error(`For AccountKeyRoleBased, options should be an array of WeightedMultiSigOptions.`);\n\n  for (let i = 0; i < lengthOfKeys.length; i++) {\n    if (options[i] && !(options[i] instanceof WeightedMultiSigOptions)) {\n      options[i] = WeightedMultiSigOptions.fromObject(options);\n    } // If the WeightedMultiSigOptions instance is not empty,\n    // it means that the user has defined the option parameters needed when updating to AccountKeyWeightedMultiSig.\n\n\n    if (options[i] && !options[i].isEmpty()) continue;\n    let optionToAdd;\n\n    if (lengthOfKeys[i] > 1) {\n      // default option when option is not set\n      optionToAdd = new WeightedMultiSigOptions(1, Array(lengthOfKeys[i]).fill(1));\n    } else {\n      // AccountKeyPublic does not need option\n      optionToAdd = new WeightedMultiSigOptions();\n    }\n\n    if (options[i]) {\n      options[i] = optionToAdd;\n    } else {\n      options.push(optionToAdd);\n    }\n  }\n\n  return options;\n};\n\nmodule.exports = {\n  ACCOUNT_KEY_TAG,\n  fillWeightedMultiSigOptionsForMultiSig,\n  fillWeightedMultiSigOptionsForRoleBased\n};","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-account/src/accountKey/accountKeyHelper.js"],"names":["_","require","WeightedMultiSigOptions","ACCOUNT_KEY_TAG","ACCOUNT_KEY_NIL_TAG","ACCOUNT_KEY_LEGACY_TAG","ACCOUNT_KEY_PUBLIC_TAG","ACCOUNT_KEY_FAIL_TAG","ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG","ACCOUNT_KEY_ROLE_BASED_TAG","fillWeightedMultiSigOptionsForMultiSig","lengthOfKeys","options","isArray","Error","Array","fill","fromObject","isEmpty","fillWeightedMultiSigOptionsForRoleBased","i","length","optionToAdd","push","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst WeightedMultiSigOptions = require('./weightedMultiSigOptions')\n\nconst ACCOUNT_KEY_TAG = {\n    ACCOUNT_KEY_NIL_TAG: '0x80',\n    ACCOUNT_KEY_LEGACY_TAG: '0x01c0',\n    ACCOUNT_KEY_PUBLIC_TAG: '0x02',\n    ACCOUNT_KEY_FAIL_TAG: '0x03c0',\n    ACCOUNT_KEY_WEIGHTED_MULTISIG_TAG: '0x04',\n    ACCOUNT_KEY_ROLE_BASED_TAG: '0x05',\n}\n\n/**\n * Creates and returns the valid instance of WeightedMultiSigOptions for AccountKeyWeightedMultiSig.\n * If the user does not define the values of options(threshold, weights),\n * default options(threshold is 1 and the weight of each key is 1) are returned.\n *\n * @param {number} lengthOfKeys The lenght of keys.\n * @param {WeightedMultiSigOptions|object} [options] An instance of WeightedMultiSigOptions or an object that defines 'threshold' and 'weight'.\n * @return {WeightedMultiSigOptions}\n */\nconst fillWeightedMultiSigOptionsForMultiSig = (lengthOfKeys, options) => {\n    if (_.isArray(options))\n        throw new Error(`For AccountKeyWeightedMultiSig, options cannot be defined as an array of WeightedMultiSigOptions.`)\n\n    if (!options) options = new WeightedMultiSigOptions(1, Array(lengthOfKeys).fill(1))\n    if (!(options instanceof WeightedMultiSigOptions)) options = WeightedMultiSigOptions.fromObject(options)\n\n    return options.isEmpty() ? new WeightedMultiSigOptions(1, Array(lengthOfKeys).fill(1)) : options\n}\n\n/**\n * Creates and returns the valid instance of WeightedMultiSigOptions for AccountKeyRoleBased.\n * If the user does not define the values of options(threshold, weights),\n * default options(threshold is 1 and the weight of each key is 1) will be used for each role key.\n *\n * @param {Array.<number>} lengthOfKeys The lenght of keys.\n * @param {Array.<WeightedMultiSigOptions>|Array.<object>} [options] An array of WeightedMultiSigOptions or object that defines 'threshold' and 'weight'.\n * @return {Array.<WeightedMultiSigOptions>}\n */\nconst fillWeightedMultiSigOptionsForRoleBased = (lengthOfKeys, options = []) => {\n    if (!_.isArray(options)) throw new Error(`For AccountKeyRoleBased, options should be an array of WeightedMultiSigOptions.`)\n\n    for (let i = 0; i < lengthOfKeys.length; i++) {\n        if (options[i] && !(options[i] instanceof WeightedMultiSigOptions)) {\n            options[i] = WeightedMultiSigOptions.fromObject(options)\n        }\n        // If the WeightedMultiSigOptions instance is not empty,\n        // it means that the user has defined the option parameters needed when updating to AccountKeyWeightedMultiSig.\n        if (options[i] && !options[i].isEmpty()) continue\n\n        let optionToAdd\n        if (lengthOfKeys[i] > 1) {\n            // default option when option is not set\n            optionToAdd = new WeightedMultiSigOptions(1, Array(lengthOfKeys[i]).fill(1))\n        } else {\n            // AccountKeyPublic does not need option\n            optionToAdd = new WeightedMultiSigOptions()\n        }\n\n        if (options[i]) {\n            options[i] = optionToAdd\n        } else {\n            options.push(optionToAdd)\n        }\n    }\n    return options\n}\n\nmodule.exports = {\n    ACCOUNT_KEY_TAG,\n    fillWeightedMultiSigOptionsForMultiSig,\n    fillWeightedMultiSigOptionsForRoleBased,\n}\n"]},"metadata":{},"sourceType":"script"}