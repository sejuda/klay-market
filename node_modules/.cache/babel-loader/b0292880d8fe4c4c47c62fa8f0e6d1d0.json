{"ast":null,"code":"/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst _ = require('lodash');\n\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst AbstractTransaction = require('../abstractTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeValueTransfer)) throw new Error(`Cannot decode to ValueTransfer. The prefix must be ${TX_TYPE_TAG.TxTypeValueTransfer}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    signatures\n  };\n}\n/**\n * Represents a value transfer transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypevaluetransfer to see more detail.\n * @class\n */\n\n\nclass ValueTransfer extends AbstractTransaction {\n  /**\n   * Creates a value transfer transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   * @return {ValueTransfer}\n   */\n  static create(createTxObj) {\n    return new ValueTransfer(createTxObj);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a ValueTransfer transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded value transfer transaction.\n   * @return {ValueTransfer}\n   */\n\n\n  static decode(rlpEncoded) {\n    return new ValueTransfer(_decode(rlpEncoded));\n  }\n  /**\n   * Creates a value transfer transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n   */\n\n\n  constructor(createTxObj) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeValueTransfer, createTxObj);\n    this.to = createTxObj.to;\n    this.value = createTxObj.value;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   * @return {string}\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeValueTransfer + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), signatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * @return {string}\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeValueTransfer, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase()]);\n  }\n\n}\n\nmodule.exports = ValueTransfer;","map":{"version":3,"sources":["/Users/mac/Desktop/klay-market/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/valueTransfer/valueTransfer.js"],"names":["_","require","RLP","Bytes","AbstractTransaction","TX_TYPE_STRING","TX_TYPE_TAG","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeValueTransfer","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","signatures","decode","trimLeadingZero","ValueTransfer","create","createTxObj","constructor","isString","_to","address","isAddress","toLowerCase","_value","val","numberToHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst AbstractTransaction = require('../abstractTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeValueTransfer))\n        throw new Error(`Cannot decode to ValueTransfer. The prefix must be ${TX_TYPE_TAG.TxTypeValueTransfer}: ${rlpEncoded}`)\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, signatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        signatures,\n    }\n}\n\n/**\n * Represents a value transfer transaction.\n * Please refer to https://docs.klaytn.com/klaytn/design/transactions/basic#txtypevaluetransfer to see more detail.\n * @class\n */\nclass ValueTransfer extends AbstractTransaction {\n    /**\n     * Creates a value transfer transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     * @return {ValueTransfer}\n     */\n    static create(createTxObj) {\n        return new ValueTransfer(createTxObj)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a ValueTransfer transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded value transfer transaction.\n     * @return {ValueTransfer}\n     */\n    static decode(rlpEncoded) {\n        return new ValueTransfer(_decode(rlpEncoded))\n    }\n\n    /**\n     * Creates a value transfer transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a ValueTransfer transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `nonce`, `gas`, `gasPrice`, `signatures` and `chainId`.\n     */\n    constructor(createTxObj) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeValueTransfer, createTxObj)\n\n        this.to = createTxObj.to\n        this.value = createTxObj.value\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     * @return {string}\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeValueTransfer +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                signatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * @return {string}\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeValueTransfer,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n        ])\n    }\n}\n\nmodule.exports = ValueTransfer\n"]},"metadata":{},"sourceType":"script"}