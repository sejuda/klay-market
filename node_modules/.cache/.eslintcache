[{"/Users/mac/Desktop/klay-market/src/index.js":"1","/Users/mac/Desktop/klay-market/src/App.js":"2","/Users/mac/Desktop/klay-market/src/reportWebVitals.js":"3","/Users/mac/Desktop/klay-market/src/api/UseCaver.js":"4","/Users/mac/Desktop/klay-market/src/constants/index.js":"5","/Users/mac/Desktop/klay-market/src/constants/constants.baobob.js":"6","/Users/mac/Desktop/klay-market/src/api/UseKlip.js":"7","/Users/mac/Desktop/klay-market/src/constants/constants.cypress.js":"8"},{"size":500,"mtime":1623772400905,"results":"9","hashOfConfig":"10"},{"size":9712,"mtime":1624601927652,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1623772400907,"results":"12","hashOfConfig":"10"},{"size":2567,"mtime":1624605046639,"results":"13","hashOfConfig":"10"},{"size":37,"mtime":1623997444013,"results":"14","hashOfConfig":"10"},{"size":280,"mtime":1623818876356,"results":"15","hashOfConfig":"10"},{"size":5450,"mtime":1624605367655,"results":"16","hashOfConfig":"10"},{"size":470,"mtime":1624605307484,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1y83g9s",{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Desktop/klay-market/src/index.js",[],["39","40"],"/Users/mac/Desktop/klay-market/src/App.js",["41","42","43","44","45"],"import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport QRCode from \"qrcode.react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faWallet, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { getBalance, readCount, setCount, fetchCardsOf } from \"./api/UseCaver\";\nimport * as KlipAPI from \"./api/UseKlip\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport \"./market.css\";\nimport {\n  Alert,\n  Container,\n  Card,\n  Nav,\n  Form,\n  Button,\n  Modal,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport { MARKET_CONTRACT_ADDRESS } from \"./constants\";\n\nfunction onPressButton(balance) {\n  console.log(\"hi\");\n}\nconst onPressButton2 = (_balance, _setBalance) => {\n  _setBalance(_balance);\n};\nconst DEFAULT_QR_CODE = \"DEFAULT\";\nconst DEFAULT_ADDRESS = \"0x00000000000000000000000000000\";\nfunction App() {\n  const [nfts, setNfts] = useState([]); // {id: '101', uri: ''}\n  const [myBalance, setMyBalance] = useState(\"0\");\n  const [myAddress, setMyAddress] = useState(\"0x00000000000000000000000000000\");\n\n  // UI\n  const [qrvalue, setQrvalue] = useState(DEFAULT_QR_CODE);\n  const [tab, setTab] = useState(\"MARKET\"); // MARKET, MINT, WALLET\n  const [mintImageUrl, setMintImageUrl] = useState(\"\");\n  // Modal\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalProps, setModalProps] = useState({\n    title: \"MODAL\",\n    onConfirm: () => {},\n  });\n  const rows = nfts.slice(nfts.length / 2);\n  const fetchMarketNFTs = async () => {\n    const _nfts = await fetchCardsOf(MARKET_CONTRACT_ADDRESS);\n    setNfts(_nfts);\n  };\n\n  const fetchMyNFTs = async () => {\n    if (myAddress === DEFAULT_ADDRESS) {\n      alert(\"NO ADDRESS\");\n      return;\n    }\n    const _nfts = await fetchCardsOf(myAddress);\n    setNfts(_nfts);\n  };\n\n  const onClickMint = async (uri) => {\n    if (myAddress === DEFAULT_ADDRESS) {\n      alert(\"NO ADDRESS\");\n      return;\n    }\n    const randomTokenId = parseInt(Math.random() * 10000000);\n    KlipAPI.mintCardWithURI(\n      myAddress,\n      randomTokenId,\n      uri,\n      setQrvalue,\n      (result) => {\n        alert(JSON.stringify(result));\n      }\n    );\n  };\n  const onClickCard = (id) => {\n    if (tab === \"WALLET\") {\n      setModalProps({\n        title: \"NFT를 마켓에 올리시겠어요?\",\n        onConfirm: () => {\n          onClickMyCard(id);\n        },\n      });\n      setShowModal(true);\n    }\n    if (tab === \"MARKET\") {\n      setModalProps({\n        title: \"NFT를 구매하시겠어요?\",\n        onConfirm: () => {\n          onClickMarketCard(id);\n        },\n      });\n      setShowModal(true);\n    }\n  };\n  const onClickMyCard = (tokenId) => {\n    KlipAPI.listingCard(myAddress, tokenId, setQrvalue, (result) => {\n      alert(JSON.stringify(result));\n    });\n  };\n\n  const onClickMarketCard = (tokenId) => {\n    KlipAPI.buyCard(tokenId, setQrvalue, (result) => {\n      alert(JSON.stringify(result));\n    });\n  };\n\n  const getUserData = () => {\n    setModalProps({\n      title: \"Klip 지갑을 연동하시겠습니까?\",\n      onConfirm: () => {\n        KlipAPI.getAddress(setQrvalue, async (address) => {\n          setMyAddress(address);\n          const _balance = await getBalance(address);\n          setMyBalance(_balance);\n        });\n      },\n    });\n    setShowModal(true);\n  };\n\n  useEffect(() => {\n    getUserData();\n    fetchMarketNFTs();\n  }, []);\n  return (\n    <div className=\"App\">\n      <div style={{ backgroundColor: \"black\", padding: 10 }}>\n        {/* 주소 잔고 */}\n        <div\n          style={{\n            fontSize: 30,\n            fontWeight: \"bold\",\n            paddingLeft: 5,\n            marginTop: 10,\n          }}\n        >\n          내 지갑\n        </div>\n        {myAddress}\n        <br />\n        <Alert\n          onClick={getUserData}\n          variant={\"balance\"}\n          style={{ backgroundColor: \"#f40075\", fontSize: 25 }}\n        >\n          {myAddress !== DEFAULT_ADDRESS\n            ? `${myBalance} KLAY`\n            : \"지갑 연동하기\"}\n        </Alert>\n        {qrvalue !== \"DEFAULT\" ? (\n          <Container\n            style={{\n              backgroundColor: \"white\",\n              width: 300,\n              height: 300,\n              padding: 20,\n            }}\n          >\n            <QRCode value={qrvalue} size={256} style={{ margin: \"auto\" }} />\n\n            <br />\n            <br />\n          </Container>\n        ) : null}\n\n        {/* 갤러리(마켓, 내 지갑) */}\n        {tab === \"MARKET\" || tab === \"WALLET\" ? (\n          <div className=\"container\" style={{ padding: 0, width: \"100%\" }}>\n            {rows.map((o, rowIndex) => (\n              <Row key={`rowkey${rowIndex}`}>\n                <Col style={{ marginRight: 0, paddingRight: 0 }}>\n                  <Card\n                    onClick={() => {\n                      onClickCard(nfts[rowIndex * 2].id);\n                    }}\n                  >\n                    <Card.Img src={nfts[rowIndex * 2].uri} />\n                  </Card>\n                  [{nfts[rowIndex * 2].id}]NFT\n                </Col>\n                <Col style={{ marginRight: 0, paddingRight: 0 }}>\n                  {nfts.length > rowIndex * 2 + 1 ? (\n                    <Card\n                      onClick={() => {\n                        onClickCard(nfts[rowIndex * 2 + 1].id);\n                      }}\n                    >\n                      <Card.Img src={nfts[rowIndex * 2 + 1].uri} />\n                    </Card>\n                  ) : null}\n                  {nfts.length > rowIndex * 2 + 1 ? (\n                    <>[{nfts[rowIndex * 2 + 1].id}]NFT</>\n                  ) : null}\n                </Col>\n              </Row>\n            ))}\n          </div>\n        ) : null}\n        {/* 발행 페이지 */}\n        {tab === \"MINT\" ? (\n          <div className=\"container\" style={{ padding: 0, width: \"100%\" }}>\n            <Card\n              className=\"text-center\"\n              style={{ color: \"black\", height: \"50%\", borderColor: \"#C5B358\" }}\n            >\n              <Card.Body style={{ opacity: 0.9, backgroundColor: \"black\" }}>\n                {mintImageUrl !== \"\" ? (\n                  <Card.Img src={mintImageUrl} height={\"50%\"} />\n                ) : null}\n                <Form>\n                  <Form.Group>\n                    <Form.Control\n                      value={mintImageUrl}\n                      onChange={(e) => {\n                        console.log(e.target.value);\n                        setMintImageUrl(e.target.value);\n                      }}\n                      type=\"text\"\n                      placeholder=\"이미지 주소를 입력해주세요\"\n                    />\n                  </Form.Group>\n                  <br />\n                  <Button\n                    onClick={() => {\n                      onClickMint(mintImageUrl);\n                    }}\n                    variant=\"primary\"\n                    style={{\n                      backgroundColor: \"#810034\",\n                      borderColor: \"#810034\",\n                    }}\n                  >\n                    발행하기\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>\n          </div>\n        ) : null}\n      </div>\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      {/* 모달 */}\n      <Modal\n        centered\n        size=\"sm\"\n        show={showModal}\n        onHide={() => {\n          setShowModal(false);\n        }}\n      >\n        <Modal.Header\n          style={{ border: 0, backgroundColor: \"black\", opacity: 0.8 }}\n        >\n          <Modal.Title>{modalProps.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Footer\n          style={{ border: 0, backgroundColor: \"black\", opacity: 0.8 }}\n        >\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              setShowModal(false);\n            }}\n          >\n            닫기\n          </Button>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              modalProps.onConfirm();\n              setShowModal(false);\n            }}\n            style={{ backgroundColor: \"#810034\", borderColor: \"#810034\" }}\n          >\n            진행\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      {/* 탭 */}\n      <nav\n        style={{ backgroundColor: \"#1b1717\", height: 45 }}\n        className=\"navbar fixed-bottom navbar-light\"\n        role=\"navigation\"\n      >\n        <Nav className=\"w-100\">\n          <div className=\"d-flex flex-row justify-content-around w-100\">\n            <div\n              onClick={() => {\n                setTab(\"MARKET\");\n                fetchMarketNFTs();\n              }}\n              className=\"row d-flex flex-column justify-content-center align-items-center\"\n            >\n              <div>\n                <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faHome} />\n              </div>\n            </div>\n            <div\n              onClick={() => {\n                setTab(\"MINT\");\n              }}\n              className=\"row d-flex flex-column justify-content-center align-items-center\"\n            >\n              <div>\n                <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faPlus} />\n              </div>\n            </div>\n            <div\n              onClick={() => {\n                setTab(\"WALLET\");\n                fetchMyNFTs();\n              }}\n              className=\"row d-flex flex-column justify-content-center align-items-center\"\n            >\n              <div>\n                <FontAwesomeIcon color=\"white\" size=\"lg\" icon={faWallet} />\n              </div>\n            </div>\n          </div>\n        </Nav>\n      </nav>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mac/Desktop/klay-market/src/reportWebVitals.js",[],"/Users/mac/Desktop/klay-market/src/api/UseCaver.js",["46"],"import Caver from \"caver-js\";\n// import CounterABI from '../abi/CounterABI.json';\nimport KIP17ABI from \"../abi/KIP17TokenABI.json\";\nimport {\n  ACCESS_KEY_ID,\n  SECRET_ACCESS_KEY,\n  COUNT_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n  CHAIN_ID,\n} from \"../constants\";\nconst option = {\n  headers: [\n    {\n      name: \"Authorization\",\n      value:\n        \"Basic \" +\n        Buffer.from(ACCESS_KEY_ID + \":\" + SECRET_ACCESS_KEY).toString(\"base64\"),\n    },\n    { name: \"x-chain-id\", value: CHAIN_ID },\n  ],\n};\n\nconst caver = new Caver(\n  new Caver.providers.HttpProvider(\n    \"https://node-api.klaytnapi.com/v1/klaytn\",\n    option\n  )\n);\nconst NFTContract = new caver.contract(KIP17ABI, NFT_CONTRACT_ADDRESS);\n\nexport const fetchCardsOf = async (address) => {\n  // Fetch Balance\n  const balance = await NFTContract.methods.balanceOf(address).call();\n  console.log(`[NFT Balance]${balance}`);\n  // Fetch Token IDs\n  const tokenIds = [];\n  for (let i = 0; i < balance; i++) {\n    const id = await NFTContract.methods.tokenOfOwnerByIndex(address, i).call();\n    tokenIds.push(id);\n  }\n  // Fetch Token URIs\n  const tokenUris = [];\n  for (let i = 0; i < balance; i++) {\n    const uri = await NFTContract.methods.tokenURI(tokenIds[i]).call();\n    tokenUris.push(uri);\n  }\n  const nfts = [];\n  for (let i = 0; i < balance; i++) {\n    nfts.push({ uri: tokenUris[i], id: tokenIds[i] });\n  }\n  console.log(nfts);\n  return nfts;\n};\n\nexport const getBalance = (address) => {\n  return caver.rpc.klay.getBalance(address).then((response) => {\n    const balance = caver.utils.convertFromPeb(\n      caver.utils.hexToNumberString(response)\n    );\n    console.log(`BALANCE: ${balance}`);\n    return balance;\n  });\n};\n\n// const CountContract = new caver.contract(CounterABI, COUNT_CONTRACT_ADDRESS);\n\n// export const readCount = async () => {\n//   const _count = await CountContract.methods.count().call();\n//   console.log(_count);\n// }\n\n// export const setCount = async (newCount) => {\n//   // 사용할 account 설정\n//   try {\n//     const privatekey = '0x26c8485748a7f9e9ae637a5c014f9955c2be9aa24ca8f1674e7e98c7123c9a4d';\n//     const deployer = caver.wallet.keyring.createFromPrivateKey(privatekey);\n//     caver.wallet.add(deployer);\n//     // 스마트 컨트랙트 실행 트랜젝션 날리기\n//     // 결과 확인\n\n//     const receipt = await CountContract.methods.setCount(newCount).send({\n//       from: deployer.address, // address\n//       gas: \"0x4bfd200\"//\n//     })\n//     console.log(receipt);\n//   } catch(e) {\n//     console.log(`[ERROR_SET_COUNT]${e}`);\n//   }\n\n// }\n","/Users/mac/Desktop/klay-market/src/constants/index.js",[],"/Users/mac/Desktop/klay-market/src/constants/constants.baobob.js",[],["47","48"],"/Users/mac/Desktop/klay-market/src/api/UseKlip.js",["49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65"],"import axios from \"axios\";\nimport {\n  COUNT_CONTRACT_ADDRESS,\n  MARKET_CONTRACT_ADDRESS,\n  NFT_CONTRACT_ADDRESS,\n} from \"../constants\";\n\nconst A2P_API_PREPARE_URL = \"https://a2a-api.klipwallet.com/v2/a2a/prepare\";\nconst APP_NAME = \"KLAY_MARKET\";\nconst isMobile = window.screen.width >= 1280 ? false : true;\n\nconst getKlipAccessUrl = (method, request_key) => {\n  if (method === \"QR\") {\n    return `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n  }\n  return `kakaotalk://klipwallet/open?url=https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n};\nexport const buyCard = async (tokenId, setQrvalue, callback) => {\n  const functionJson =\n    '{ \"constant\": false, \"inputs\": [ { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"NFTAddress\", \"type\": \"address\" } ], \"name\": \"buyNFT\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\" }';\n  executeContract(\n    MARKET_CONTRACT_ADDRESS,\n    functionJson,\n    \"10000000000000000\",\n    `[\\\"${tokenId}\\\",\\\"${NFT_CONTRACT_ADDRESS}\\\"]`,\n    setQrvalue,\n    callback\n  );\n};\n\nexport const listingCard = async (\n  fromAddress,\n  tokenId,\n  setQrvalue,\n  callback\n) => {\n  const functionJson =\n    '{ \"constant\": false, \"inputs\": [ { \"name\": \"from\", \"type\": \"address\" }, { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  executeContract(\n    NFT_CONTRACT_ADDRESS,\n    functionJson,\n    \"0\",\n    `[\\\"${fromAddress}\\\",\\\"${MARKET_CONTRACT_ADDRESS}\\\",\\\"${tokenId}\\\"]`,\n    setQrvalue,\n    callback\n  );\n};\n\nexport const mintCardWithURI = async (\n  toAddress,\n  tokenId,\n  uri,\n  setQrvalue,\n  callback\n) => {\n  const functionJson =\n    '{ \"constant\": false, \"inputs\": [ { \"name\": \"to\", \"type\": \"address\" }, { \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"name\": \"tokenURI\", \"type\": \"string\" } ], \"name\": \"mintWithTokenURI\", \"outputs\": [ { \"name\": \"\", \"type\": \"bool\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }';\n  executeContract(\n    NFT_CONTRACT_ADDRESS,\n    functionJson,\n    \"0\",\n    `[\\\"${toAddress}\\\",\\\"${tokenId}\\\",\\\"${uri}\\\"]`,\n    setQrvalue,\n    callback\n  );\n};\n\nexport const executeContract = (\n  txTo,\n  functionJSON,\n  value,\n  params,\n  setQrvalue,\n  callback\n) => {\n  axios\n    .post(A2P_API_PREPARE_URL, {\n      bapp: {\n        name: APP_NAME,\n      },\n      type: \"execute_contract\",\n      transaction: {\n        to: txTo,\n        abi: functionJSON,\n        value: value,\n        params: params,\n      },\n    })\n    .then((response) => {\n      const { request_key } = response.data;\n      if (isMobile) {\n        window.location.href = getKlipAccessUrl(\"android\", request_key);\n      } else {\n        setQrvalue(getKlipAccessUrl(\"QR\", request_key));\n      }\n\n      let timerId = setInterval(() => {\n        axios\n          .get(\n            `https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`\n          )\n          .then((res) => {\n            if (res.data.result) {\n              console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n              callback(res.data.result);\n              clearInterval(timerId);\n              setQrvalue(\"DEFAULT\");\n            }\n          });\n      }, 1000);\n    });\n};\n\nexport const getAddress = (setQrvalue, callback) => {\n  axios\n    .post(A2P_API_PREPARE_URL, {\n      bapp: {\n        name: APP_NAME,\n      },\n      type: \"auth\",\n    })\n    .then((response) => {\n      const { request_key } = response.data;\n      if (isMobile) {\n        window.location.href = getKlipAccessUrl(\"android\", request_key);\n      } else {\n        setQrvalue(getKlipAccessUrl(\"QR\", request_key));\n      }\n      let timerId = setInterval(() => {\n        axios\n          .get(\n            `https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`\n          )\n          .then((res) => {\n            if (res.data.result) {\n              console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n              callback(res.data.result.klaytn_address);\n              clearInterval(timerId);\n              setQrvalue(\"DEFAULT\");\n            }\n          });\n      }, 1000);\n    });\n};\n\n// export const setCount = (count, setQrvalue) => {\n//   axios\n//     .post(A2P_API_PREPARE_URL, {\n//       bapp: {\n//         name: APP_NAME,\n//       },\n//       type: \"execute_contract\",\n//       transaction: {\n//         to: COUNT_CONTRACT_ADDRESS,\n//         abi:\n//           '{ \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }',\n//         value: \"0\",\n//         params: `[\\\"${count}\\\"]`,\n//       },\n//     })\n//     .then((response) => {\n//       const { request_key } = response.data;\n//       const qrcode = `https://klipwallet.com/?target=/a2a?request_key=${request_key}`;\n//       setQrvalue(qrcode);\n//       let timerId = setInterval(() => {\n//         axios\n//           .get(\n//             `https://a2a-api.klipwallet.com/v2/a2a/result?request_key=${request_key}`\n//           )\n//           .then((res) => {\n//             if (res.data.result) {\n//               console.log(`[Result] ${JSON.stringify(res.data.result)}`);\n//               clearInterval(timerId);\n//             }\n//           });\n//       }, 1000);\n//     });\n// };\n","/Users/mac/Desktop/klay-market/src/constants/constants.cypress.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":12},{"ruleId":"70","severity":1,"message":"74","line":6,"column":22,"nodeType":"72","messageId":"73","endLine":6,"endColumn":31},{"ruleId":"70","severity":1,"message":"75","line":6,"column":33,"nodeType":"72","messageId":"73","endLine":6,"endColumn":41},{"ruleId":"70","severity":1,"message":"76","line":24,"column":10,"nodeType":"72","messageId":"73","endLine":24,"endColumn":23},{"ruleId":"70","severity":1,"message":"77","line":27,"column":7,"nodeType":"72","messageId":"73","endLine":27,"endColumn":21},{"ruleId":"70","severity":1,"message":"78","line":7,"column":3,"nodeType":"72","messageId":"73","endLine":7,"endColumn":25},{"ruleId":"66","replacedBy":"79"},{"ruleId":"68","replacedBy":"80"},{"ruleId":"70","severity":1,"message":"78","line":3,"column":3,"nodeType":"72","messageId":"73","endLine":3,"endColumn":25},{"ruleId":"81","severity":1,"message":"82","line":25,"column":7,"nodeType":"83","messageId":"84","endLine":25,"endColumn":8,"suggestions":"85"},{"ruleId":"81","severity":1,"message":"82","line":25,"column":19,"nodeType":"83","messageId":"84","endLine":25,"endColumn":20,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"82","line":25,"column":22,"nodeType":"83","messageId":"84","endLine":25,"endColumn":23,"suggestions":"87"},{"ruleId":"81","severity":1,"message":"82","line":25,"column":47,"nodeType":"83","messageId":"84","endLine":25,"endColumn":48,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":7,"nodeType":"83","messageId":"84","endLine":43,"endColumn":8,"suggestions":"89"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":23,"nodeType":"83","messageId":"84","endLine":43,"endColumn":24,"suggestions":"90"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":26,"nodeType":"83","messageId":"84","endLine":43,"endColumn":27,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":54,"nodeType":"83","messageId":"84","endLine":43,"endColumn":55,"suggestions":"92"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":57,"nodeType":"83","messageId":"84","endLine":43,"endColumn":58,"suggestions":"93"},{"ruleId":"81","severity":1,"message":"82","line":43,"column":69,"nodeType":"83","messageId":"84","endLine":43,"endColumn":70,"suggestions":"94"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":7,"nodeType":"83","messageId":"84","endLine":62,"endColumn":8,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":21,"nodeType":"83","messageId":"84","endLine":62,"endColumn":22,"suggestions":"96"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":24,"nodeType":"83","messageId":"84","endLine":62,"endColumn":25,"suggestions":"97"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":36,"nodeType":"83","messageId":"84","endLine":62,"endColumn":37,"suggestions":"98"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":39,"nodeType":"83","messageId":"84","endLine":62,"endColumn":40,"suggestions":"99"},{"ruleId":"81","severity":1,"message":"82","line":62,"column":47,"nodeType":"83","messageId":"84","endLine":62,"endColumn":48,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'readCount' is defined but never used.","'setCount' is defined but never used.","'onPressButton' is defined but never used.","'onPressButton2' is assigned a value but never used.","'COUNT_CONTRACT_ADDRESS' is defined but never used.",["101"],["102"],"no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["103","104"],["105","106"],["107","108"],["109","110"],["111","112"],["113","114"],["115","116"],["117","118"],["119","120"],["121","122"],["123","124"],["125","126"],["127","128"],["129","130"],["131","132"],["133","134"],"no-global-assign","no-unsafe-negation",{"messageId":"135","fix":"136","desc":"137"},{"messageId":"138","fix":"139","desc":"140"},{"messageId":"135","fix":"141","desc":"137"},{"messageId":"138","fix":"142","desc":"140"},{"messageId":"135","fix":"143","desc":"137"},{"messageId":"138","fix":"144","desc":"140"},{"messageId":"135","fix":"145","desc":"137"},{"messageId":"138","fix":"146","desc":"140"},{"messageId":"135","fix":"147","desc":"137"},{"messageId":"138","fix":"148","desc":"140"},{"messageId":"135","fix":"149","desc":"137"},{"messageId":"138","fix":"150","desc":"140"},{"messageId":"135","fix":"151","desc":"137"},{"messageId":"138","fix":"152","desc":"140"},{"messageId":"135","fix":"153","desc":"137"},{"messageId":"138","fix":"154","desc":"140"},{"messageId":"135","fix":"155","desc":"137"},{"messageId":"138","fix":"156","desc":"140"},{"messageId":"135","fix":"157","desc":"137"},{"messageId":"138","fix":"158","desc":"140"},{"messageId":"135","fix":"159","desc":"137"},{"messageId":"138","fix":"160","desc":"140"},{"messageId":"135","fix":"161","desc":"137"},{"messageId":"138","fix":"162","desc":"140"},{"messageId":"135","fix":"163","desc":"137"},{"messageId":"138","fix":"164","desc":"140"},{"messageId":"135","fix":"165","desc":"137"},{"messageId":"138","fix":"166","desc":"140"},{"messageId":"135","fix":"167","desc":"137"},{"messageId":"138","fix":"168","desc":"140"},{"messageId":"135","fix":"169","desc":"137"},{"messageId":"138","fix":"170","desc":"140"},"removeEscape",{"range":"171","text":"172"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"173","text":"174"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"175","text":"172"},{"range":"176","text":"174"},{"range":"177","text":"172"},{"range":"178","text":"174"},{"range":"179","text":"172"},{"range":"180","text":"174"},{"range":"181","text":"172"},{"range":"182","text":"174"},{"range":"183","text":"172"},{"range":"184","text":"174"},{"range":"185","text":"172"},{"range":"186","text":"174"},{"range":"187","text":"172"},{"range":"188","text":"174"},{"range":"189","text":"172"},{"range":"190","text":"174"},{"range":"191","text":"172"},{"range":"192","text":"174"},{"range":"193","text":"172"},{"range":"194","text":"174"},{"range":"195","text":"172"},{"range":"196","text":"174"},{"range":"197","text":"172"},{"range":"198","text":"174"},{"range":"199","text":"172"},{"range":"200","text":"174"},{"range":"201","text":"172"},{"range":"202","text":"174"},{"range":"203","text":"172"},{"range":"204","text":"174"},[1024,1025],"",[1024,1024],"\\",[1036,1037],[1036,1036],[1039,1040],[1039,1039],[1064,1065],[1064,1064],[1577,1578],[1577,1577],[1593,1594],[1593,1593],[1596,1597],[1596,1596],[1624,1625],[1624,1624],[1627,1628],[1627,1627],[1639,1640],[1639,1639],[2196,2197],[2196,2196],[2210,2211],[2210,2210],[2213,2214],[2213,2213],[2225,2226],[2225,2225],[2228,2229],[2228,2228],[2236,2237],[2236,2236]]